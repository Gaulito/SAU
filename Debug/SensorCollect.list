
SensorCollect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cce0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800ce70  0800ce70  0001ce70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d438  0800d438  00020220  2**0
                  CONTENTS
  4 .ARM          00000000  0800d438  0800d438  00020220  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d438  0800d438  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d438  0800d438  0001d438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d43c  0800d43c  0001d43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800d440  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020220  2**0
                  CONTENTS
 10 .bss          00000be0  20000220  20000220  00020220  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000e00  20000e00  00020220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f5ed  00000000  00000000  00020293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036e2  00000000  00000000  0003f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 0000dc27  00000000  00000000  00042f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001230  00000000  00000000  00050b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e8c  00000000  00000000  00051dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00020912  00000000  00000000  00052c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00022d26  00000000  00000000  0007355e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000bb76f  00000000  00000000  00096284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004c7c  00000000  00000000  001519f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000069  00000000  00000000  00156670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce58 	.word	0x0800ce58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800ce58 	.word	0x0800ce58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	b085      	sub	sp, #20
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
	inx = 0;
 8000c92:	4b83      	ldr	r3, [pc, #524]	; (8000ea0 <decodeGGA+0x218>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c98:	e002      	b.n	8000ca0 <decodeGGA+0x18>
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a80      	ldr	r2, [pc, #512]	; (8000ea0 <decodeGGA+0x218>)
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	4b7f      	ldr	r3, [pc, #508]	; (8000ea0 <decodeGGA+0x218>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	5ce2      	ldrb	r2, [r4, r3]
 8000ca6:	2a2c      	cmp	r2, #44	; 0x2c
 8000ca8:	d1f7      	bne.n	8000c9a <decodeGGA+0x12>
	inx++;
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a7c      	ldr	r2, [pc, #496]	; (8000ea0 <decodeGGA+0x218>)
 8000cae:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000cb0:	e002      	b.n	8000cb8 <decodeGGA+0x30>
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a7a      	ldr	r2, [pc, #488]	; (8000ea0 <decodeGGA+0x218>)
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b79      	ldr	r3, [pc, #484]	; (8000ea0 <decodeGGA+0x218>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	5ce2      	ldrb	r2, [r4, r3]
 8000cbe:	2a2c      	cmp	r2, #44	; 0x2c
 8000cc0:	d1f7      	bne.n	8000cb2 <decodeGGA+0x2a>
	inx++;
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a76      	ldr	r2, [pc, #472]	; (8000ea0 <decodeGGA+0x218>)
 8000cc6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000cc8:	e002      	b.n	8000cd0 <decodeGGA+0x48>
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a74      	ldr	r2, [pc, #464]	; (8000ea0 <decodeGGA+0x218>)
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b73      	ldr	r3, [pc, #460]	; (8000ea0 <decodeGGA+0x218>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	5ce2      	ldrb	r2, [r4, r3]
 8000cd6:	2a2c      	cmp	r2, #44	; 0x2c
 8000cd8:	d1f7      	bne.n	8000cca <decodeGGA+0x42>
	inx++;
 8000cda:	3301      	adds	r3, #1
 8000cdc:	4a70      	ldr	r2, [pc, #448]	; (8000ea0 <decodeGGA+0x218>)
 8000cde:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000ce0:	e002      	b.n	8000ce8 <decodeGGA+0x60>
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a6e      	ldr	r2, [pc, #440]	; (8000ea0 <decodeGGA+0x218>)
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b6d      	ldr	r3, [pc, #436]	; (8000ea0 <decodeGGA+0x218>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	5ce2      	ldrb	r2, [r4, r3]
 8000cee:	2a2c      	cmp	r2, #44	; 0x2c
 8000cf0:	d1f7      	bne.n	8000ce2 <decodeGGA+0x5a>
	inx++;
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a6a      	ldr	r2, [pc, #424]	; (8000ea0 <decodeGGA+0x218>)
 8000cf6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000cf8:	e002      	b.n	8000d00 <decodeGGA+0x78>
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	4a68      	ldr	r2, [pc, #416]	; (8000ea0 <decodeGGA+0x218>)
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	4b67      	ldr	r3, [pc, #412]	; (8000ea0 <decodeGGA+0x218>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	5ce2      	ldrb	r2, [r4, r3]
 8000d06:	2a2c      	cmp	r2, #44	; 0x2c
 8000d08:	d1f7      	bne.n	8000cfa <decodeGGA+0x72>
	inx++;
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	4a64      	ldr	r2, [pc, #400]	; (8000ea0 <decodeGGA+0x218>)
 8000d0e:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000d10:	e002      	b.n	8000d18 <decodeGGA+0x90>
 8000d12:	3301      	adds	r3, #1
 8000d14:	4a62      	ldr	r2, [pc, #392]	; (8000ea0 <decodeGGA+0x218>)
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	4b61      	ldr	r3, [pc, #388]	; (8000ea0 <decodeGGA+0x218>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	5ce2      	ldrb	r2, [r4, r3]
 8000d1e:	2a2c      	cmp	r2, #44	; 0x2c
 8000d20:	d1f7      	bne.n	8000d12 <decodeGGA+0x8a>
	inx++;  // reached the character to identify the fix
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a5e      	ldr	r2, [pc, #376]	; (8000ea0 <decodeGGA+0x218>)
 8000d26:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000d28:	5ce2      	ldrb	r2, [r4, r3]
 8000d2a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d901      	bls.n	8000d38 <decodeGGA+0xb0>
 8000d34:	2a36      	cmp	r2, #54	; 0x36
 8000d36:	d105      	bne.n	8000d44 <decodeGGA+0xbc>
	{
		gga->isfixValid = 1;   // fix available
 8000d38:	2301      	movs	r3, #1
 8000d3a:	61eb      	str	r3, [r5, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000d3c:	4b58      	ldr	r3, [pc, #352]	; (8000ea0 <decodeGGA+0x218>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000d42:	e006      	b.n	8000d52 <decodeGGA+0xca>
		gga->isfixValid = 0;   // If the fix is not available
 8000d44:	2300      	movs	r3, #0
 8000d46:	61eb      	str	r3, [r5, #28]
		return 1;  // return error
 8000d48:	2001      	movs	r0, #1
 8000d4a:	e1eb      	b.n	8001124 <decodeGGA+0x49c>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	4a54      	ldr	r2, [pc, #336]	; (8000ea0 <decodeGGA+0x218>)
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	4b53      	ldr	r3, [pc, #332]	; (8000ea0 <decodeGGA+0x218>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	5ce2      	ldrb	r2, [r4, r3]
 8000d58:	2a2c      	cmp	r2, #44	; 0x2c
 8000d5a:	d1f7      	bne.n	8000d4c <decodeGGA+0xc4>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a50      	ldr	r2, [pc, #320]	; (8000ea0 <decodeGGA+0x218>)
 8000d60:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000d62:	2200      	movs	r2, #0
 8000d64:	9201      	str	r2, [sp, #4]
 8000d66:	9202      	str	r2, [sp, #8]
 8000d68:	9203      	str	r2, [sp, #12]
	i=0;
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000d6a:	e008      	b.n	8000d7e <decodeGGA+0xf6>
	{
		buffer[i] = GGAbuffer[inx];
 8000d6c:	f102 0010 	add.w	r0, r2, #16
 8000d70:	4468      	add	r0, sp
 8000d72:	f800 1c0c 	strb.w	r1, [r0, #-12]
		i++;
 8000d76:	3201      	adds	r2, #1
		inx++;
 8000d78:	3301      	adds	r3, #1
 8000d7a:	4949      	ldr	r1, [pc, #292]	; (8000ea0 <decodeGGA+0x218>)
 8000d7c:	600b      	str	r3, [r1, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000d7e:	4b48      	ldr	r3, [pc, #288]	; (8000ea0 <decodeGGA+0x218>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	5ce1      	ldrb	r1, [r4, r3]
 8000d84:	292c      	cmp	r1, #44	; 0x2c
 8000d86:	d1f1      	bne.n	8000d6c <decodeGGA+0xe4>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000d88:	a801      	add	r0, sp, #4
 8000d8a:	f006 fead 	bl	8007ae8 <atoi>
 8000d8e:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <decodeGGA+0x21c>)
 8000d90:	fb83 2300 	smull	r2, r3, r3, r0
 8000d94:	17c0      	asrs	r0, r0, #31
 8000d96:	ebc0 3023 	rsb	r0, r0, r3, asr #12
 8000d9a:	4f43      	ldr	r7, [pc, #268]	; (8000ea8 <decodeGGA+0x220>)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	4e43      	ldr	r6, [pc, #268]	; (8000eac <decodeGGA+0x224>)
 8000da0:	fb86 1203 	smull	r1, r2, r6, r3
 8000da4:	17db      	asrs	r3, r3, #31
 8000da6:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8000daa:	4418      	add	r0, r3
 8000dac:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <decodeGGA+0x228>)
 8000dae:	6018      	str	r0, [r3, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000db0:	a801      	add	r0, sp, #4
 8000db2:	f006 fe99 	bl	8007ae8 <atoi>
 8000db6:	fb86 2300 	smull	r2, r3, r6, r0
 8000dba:	17c0      	asrs	r0, r0, #31
 8000dbc:	ebc0 1363 	rsb	r3, r0, r3, asr #5
 8000dc0:	fb86 2103 	smull	r2, r1, r6, r3
 8000dc4:	17da      	asrs	r2, r3, #31
 8000dc6:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	fb00 3212 	mls	r2, r0, r2, r3
 8000dd0:	6839      	ldr	r1, [r7, #0]
 8000dd2:	fb86 3601 	smull	r3, r6, r6, r1
 8000dd6:	17cb      	asrs	r3, r1, #31
 8000dd8:	ebc3 1366 	rsb	r3, r3, r6, asr #5
 8000ddc:	fb00 1313 	mls	r3, r0, r3, r1
 8000de0:	441a      	add	r2, r3
 8000de2:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <decodeGGA+0x22c>)
 8000de4:	601a      	str	r2, [r3, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8000de6:	2a3b      	cmp	r2, #59	; 0x3b
 8000de8:	dd05      	ble.n	8000df6 <decodeGGA+0x16e>
	{
		min = min-60;
 8000dea:	3a3c      	subs	r2, #60	; 0x3c
 8000dec:	601a      	str	r2, [r3, #0]
		hr++;
 8000dee:	4a30      	ldr	r2, [pc, #192]	; (8000eb0 <decodeGGA+0x228>)
 8000df0:	6813      	ldr	r3, [r2, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000df6:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <decodeGGA+0x228>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db26      	blt.n	8000e4c <decodeGGA+0x1c4>
	{
		hr=24+hr;
		daychange--;
	}
	if (hr>=24)
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <decodeGGA+0x228>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b17      	cmp	r3, #23
 8000e04:	dd06      	ble.n	8000e14 <decodeGGA+0x18c>
	{
		hr=hr-24;
 8000e06:	3b18      	subs	r3, #24
 8000e08:	4a29      	ldr	r2, [pc, #164]	; (8000eb0 <decodeGGA+0x228>)
 8000e0a:	6013      	str	r3, [r2, #0]
		daychange++;
 8000e0c:	4a2a      	ldr	r2, [pc, #168]	; (8000eb8 <decodeGGA+0x230>)
 8000e0e:	6813      	ldr	r3, [r2, #0]
 8000e10:	3301      	adds	r3, #1
 8000e12:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <decodeGGA+0x228>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	612b      	str	r3, [r5, #16]
	gga->tim.min = min;
 8000e1a:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <decodeGGA+0x22c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	616b      	str	r3, [r5, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000e20:	a801      	add	r0, sp, #4
 8000e22:	f006 fe61 	bl	8007ae8 <atoi>
 8000e26:	4a21      	ldr	r2, [pc, #132]	; (8000eac <decodeGGA+0x224>)
 8000e28:	fb82 3200 	smull	r3, r2, r2, r0
 8000e2c:	17c3      	asrs	r3, r0, #31
 8000e2e:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 8000e32:	2264      	movs	r2, #100	; 0x64
 8000e34:	fb02 0313 	mls	r3, r2, r3, r0
 8000e38:	61ab      	str	r3, [r5, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000e3a:	4a19      	ldr	r2, [pc, #100]	; (8000ea0 <decodeGGA+0x218>)
 8000e3c:	6813      	ldr	r3, [r2, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000e42:	2200      	movs	r2, #0
 8000e44:	9201      	str	r2, [sp, #4]
 8000e46:	9202      	str	r2, [sp, #8]
 8000e48:	9203      	str	r2, [sp, #12]
	i=0;
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000e4a:	e010      	b.n	8000e6e <decodeGGA+0x1e6>
		hr=24+hr;
 8000e4c:	3318      	adds	r3, #24
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <decodeGGA+0x228>)
 8000e50:	6013      	str	r3, [r2, #0]
		daychange--;
 8000e52:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <decodeGGA+0x230>)
 8000e54:	6813      	ldr	r3, [r2, #0]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e7d0      	b.n	8000dfe <decodeGGA+0x176>
	{
		buffer[i] = GGAbuffer[inx];
 8000e5c:	f102 0010 	add.w	r0, r2, #16
 8000e60:	4468      	add	r0, sp
 8000e62:	f800 1c0c 	strb.w	r1, [r0, #-12]
		i++;
 8000e66:	3201      	adds	r2, #1
		inx++;
 8000e68:	3301      	adds	r3, #1
 8000e6a:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <decodeGGA+0x218>)
 8000e6c:	600b      	str	r3, [r1, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <decodeGGA+0x218>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	5ce1      	ldrb	r1, [r4, r3]
 8000e74:	292c      	cmp	r1, #44	; 0x2c
 8000e76:	d1f1      	bne.n	8000e5c <decodeGGA+0x1d4>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8000e78:	a801      	add	r0, sp, #4
 8000e7a:	f7ff f9f9 	bl	8000270 <strlen>
 8000e7e:	2805      	cmp	r0, #5
 8000e80:	f240 8153 	bls.w	800112a <decodeGGA+0x4a2>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8000e84:	a801      	add	r0, sp, #4
 8000e86:	f006 fe2f 	bl	8007ae8 <atoi>
 8000e8a:	b207      	sxth	r7, r0
	int j = 0;
 8000e8c:	2300      	movs	r3, #0
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8000e8e:	f103 0210 	add.w	r2, r3, #16
 8000e92:	446a      	add	r2, sp
 8000e94:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000e98:	2a2e      	cmp	r2, #46	; 0x2e
 8000e9a:	d00f      	beq.n	8000ebc <decodeGGA+0x234>
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	e7f6      	b.n	8000e8e <decodeGGA+0x206>
 8000ea0:	20000318 	.word	0x20000318
 8000ea4:	68db8bad 	.word	0x68db8bad
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	51eb851f 	.word	0x51eb851f
 8000eb0:	20000314 	.word	0x20000314
 8000eb4:	2000031c 	.word	0x2000031c
 8000eb8:	20000308 	.word	0x20000308
	j++;
 8000ebc:	1c5e      	adds	r6, r3, #1
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000ebe:	a801      	add	r0, sp, #4
 8000ec0:	f7ff f9d6 	bl	8000270 <strlen>
 8000ec4:	eba0 0806 	sub.w	r8, r0, r6
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000ec8:	ab01      	add	r3, sp, #4
 8000eca:	1998      	adds	r0, r3, r6
 8000ecc:	f006 fe0c 	bl	8007ae8 <atoi>
 8000ed0:	4606      	mov	r6, r0
	float lat = (num/100) + (num%100 + dec/pow(10, (declen+2)))/0.6;  // 1234.56789 = 12.3456789
 8000ed2:	f108 0002 	add.w	r0, r8, #2
 8000ed6:	f7ff fb25 	bl	8000524 <__aeabi_i2d>
 8000eda:	ec41 0b11 	vmov	d1, r0, r1
 8000ede:	ed9f 0b94 	vldr	d0, [pc, #592]	; 8001130 <decodeGGA+0x4a8>
 8000ee2:	f009 fba1 	bl	800a628 <pow>
 8000ee6:	ec59 8b10 	vmov	r8, r9, d0
 8000eea:	4630      	mov	r0, r6
 8000eec:	f7ff fb1a 	bl	8000524 <__aeabi_i2d>
 8000ef0:	4642      	mov	r2, r8
 8000ef2:	464b      	mov	r3, r9
 8000ef4:	f7ff fcaa 	bl	800084c <__aeabi_ddiv>
 8000ef8:	4680      	mov	r8, r0
 8000efa:	4689      	mov	r9, r1
 8000efc:	4b90      	ldr	r3, [pc, #576]	; (8001140 <decodeGGA+0x4b8>)
 8000efe:	fb83 2307 	smull	r2, r3, r3, r7
 8000f02:	17fe      	asrs	r6, r7, #31
 8000f04:	ebc6 1663 	rsb	r6, r6, r3, asr #5
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	fb03 7016 	mls	r0, r3, r6, r7
 8000f0e:	b200      	sxth	r0, r0
 8000f10:	f7ff fb08 	bl	8000524 <__aeabi_i2d>
 8000f14:	4642      	mov	r2, r8
 8000f16:	464b      	mov	r3, r9
 8000f18:	f7ff f9b8 	bl	800028c <__adddf3>
 8000f1c:	a386      	add	r3, pc, #536	; (adr r3, 8001138 <decodeGGA+0x4b0>)
 8000f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f22:	f7ff fc93 	bl	800084c <__aeabi_ddiv>
 8000f26:	4680      	mov	r8, r0
 8000f28:	4689      	mov	r9, r1
 8000f2a:	b230      	sxth	r0, r6
 8000f2c:	f7ff fafa 	bl	8000524 <__aeabi_i2d>
 8000f30:	4642      	mov	r2, r8
 8000f32:	464b      	mov	r3, r9
 8000f34:	f7ff f9aa 	bl	800028c <__adddf3>
 8000f38:	f7ff fe56 	bl	8000be8 <__aeabi_d2f>
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8000f3c:	6028      	str	r0, [r5, #0]
	inx++;  
 8000f3e:	4a81      	ldr	r2, [pc, #516]	; (8001144 <decodeGGA+0x4bc>)
 8000f40:	6813      	ldr	r3, [r2, #0]
 8000f42:	3301      	adds	r3, #1
 8000f44:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8000f46:	5ce1      	ldrb	r1, [r4, r3]
 8000f48:	7129      	strb	r1, [r5, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8000f4e:	3301      	adds	r3, #1
 8000f50:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000f52:	2200      	movs	r2, #0
 8000f54:	9201      	str	r2, [sp, #4]
 8000f56:	9202      	str	r2, [sp, #8]
 8000f58:	9203      	str	r2, [sp, #12]
	i=0;
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000f5a:	4b7a      	ldr	r3, [pc, #488]	; (8001144 <decodeGGA+0x4bc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	5ce1      	ldrb	r1, [r4, r3]
 8000f60:	292c      	cmp	r1, #44	; 0x2c
 8000f62:	d009      	beq.n	8000f78 <decodeGGA+0x2f0>
	{
		buffer[i] = GGAbuffer[inx];
 8000f64:	f102 0010 	add.w	r0, r2, #16
 8000f68:	4468      	add	r0, sp
 8000f6a:	f800 1c0c 	strb.w	r1, [r0, #-12]
		i++;
 8000f6e:	3201      	adds	r2, #1
		inx++;
 8000f70:	3301      	adds	r3, #1
 8000f72:	4974      	ldr	r1, [pc, #464]	; (8001144 <decodeGGA+0x4bc>)
 8000f74:	600b      	str	r3, [r1, #0]
 8000f76:	e7f0      	b.n	8000f5a <decodeGGA+0x2d2>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8000f78:	a801      	add	r0, sp, #4
 8000f7a:	f006 fdb5 	bl	8007ae8 <atoi>
 8000f7e:	b207      	sxth	r7, r0
	j = 0;
 8000f80:	2300      	movs	r3, #0
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8000f82:	f103 0210 	add.w	r2, r3, #16
 8000f86:	446a      	add	r2, sp
 8000f88:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000f8c:	2a2e      	cmp	r2, #46	; 0x2e
 8000f8e:	d001      	beq.n	8000f94 <decodeGGA+0x30c>
 8000f90:	3301      	adds	r3, #1
 8000f92:	e7f6      	b.n	8000f82 <decodeGGA+0x2fa>
	j++;
 8000f94:	1c5e      	adds	r6, r3, #1
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000f96:	a801      	add	r0, sp, #4
 8000f98:	f7ff f96a 	bl	8000270 <strlen>
 8000f9c:	eba0 0806 	sub.w	r8, r0, r6
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000fa0:	ab01      	add	r3, sp, #4
 8000fa2:	1998      	adds	r0, r3, r6
 8000fa4:	f006 fda0 	bl	8007ae8 <atoi>
 8000fa8:	4606      	mov	r6, r0
	lat = (num/100) + (num%100 + dec/pow(10, (declen+2)))/0.6;  // 1234.56789 = 12.3456789
 8000faa:	f108 0002 	add.w	r0, r8, #2
 8000fae:	f7ff fab9 	bl	8000524 <__aeabi_i2d>
 8000fb2:	ec41 0b11 	vmov	d1, r0, r1
 8000fb6:	ed9f 0b5e 	vldr	d0, [pc, #376]	; 8001130 <decodeGGA+0x4a8>
 8000fba:	f009 fb35 	bl	800a628 <pow>
 8000fbe:	ec59 8b10 	vmov	r8, r9, d0
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff faae 	bl	8000524 <__aeabi_i2d>
 8000fc8:	4642      	mov	r2, r8
 8000fca:	464b      	mov	r3, r9
 8000fcc:	f7ff fc3e 	bl	800084c <__aeabi_ddiv>
 8000fd0:	4680      	mov	r8, r0
 8000fd2:	4689      	mov	r9, r1
 8000fd4:	4b5a      	ldr	r3, [pc, #360]	; (8001140 <decodeGGA+0x4b8>)
 8000fd6:	fb83 2307 	smull	r2, r3, r3, r7
 8000fda:	17fe      	asrs	r6, r7, #31
 8000fdc:	ebc6 1663 	rsb	r6, r6, r3, asr #5
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	fb03 7016 	mls	r0, r3, r6, r7
 8000fe6:	b200      	sxth	r0, r0
 8000fe8:	f7ff fa9c 	bl	8000524 <__aeabi_i2d>
 8000fec:	4642      	mov	r2, r8
 8000fee:	464b      	mov	r3, r9
 8000ff0:	f7ff f94c 	bl	800028c <__adddf3>
 8000ff4:	a350      	add	r3, pc, #320	; (adr r3, 8001138 <decodeGGA+0x4b0>)
 8000ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffa:	f7ff fc27 	bl	800084c <__aeabi_ddiv>
 8000ffe:	4680      	mov	r8, r0
 8001000:	4689      	mov	r9, r1
 8001002:	b230      	sxth	r0, r6
 8001004:	f7ff fa8e 	bl	8000524 <__aeabi_i2d>
 8001008:	4642      	mov	r2, r8
 800100a:	464b      	mov	r3, r9
 800100c:	f7ff f93e 	bl	800028c <__adddf3>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2f>

	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001014:	60a8      	str	r0, [r5, #8]
	inx++;
 8001016:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <decodeGGA+0x4bc>)
 8001018:	6813      	ldr	r3, [r2, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800101e:	5ce1      	ldrb	r1, [r4, r3]
 8001020:	7329      	strb	r1, [r5, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 8001022:	3301      	adds	r3, #1
 8001024:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001026:	3301      	adds	r3, #1
 8001028:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800102a:	3301      	adds	r3, #1
 800102c:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 800102e:	3301      	adds	r3, #1
 8001030:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001032:	2200      	movs	r2, #0
 8001034:	9201      	str	r2, [sp, #4]
 8001036:	9202      	str	r2, [sp, #8]
 8001038:	9203      	str	r2, [sp, #12]
	i=0;
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800103a:	4b42      	ldr	r3, [pc, #264]	; (8001144 <decodeGGA+0x4bc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	5ce1      	ldrb	r1, [r4, r3]
 8001040:	292c      	cmp	r1, #44	; 0x2c
 8001042:	d009      	beq.n	8001058 <decodeGGA+0x3d0>
	{
		buffer[i] = GGAbuffer[inx];
 8001044:	f102 0010 	add.w	r0, r2, #16
 8001048:	4468      	add	r0, sp
 800104a:	f800 1c0c 	strb.w	r1, [r0, #-12]
		i++;
 800104e:	3201      	adds	r2, #1
		inx++;
 8001050:	3301      	adds	r3, #1
 8001052:	493c      	ldr	r1, [pc, #240]	; (8001144 <decodeGGA+0x4bc>)
 8001054:	600b      	str	r3, [r1, #0]
 8001056:	e7f0      	b.n	800103a <decodeGGA+0x3b2>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 8001058:	a801      	add	r0, sp, #4
 800105a:	f006 fd45 	bl	8007ae8 <atoi>
 800105e:	62a8      	str	r0, [r5, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 8001060:	4a38      	ldr	r2, [pc, #224]	; (8001144 <decodeGGA+0x4bc>)
 8001062:	6813      	ldr	r3, [r2, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001068:	4b36      	ldr	r3, [pc, #216]	; (8001144 <decodeGGA+0x4bc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	5ce2      	ldrb	r2, [r4, r3]
 800106e:	2a2c      	cmp	r2, #44	; 0x2c
 8001070:	d003      	beq.n	800107a <decodeGGA+0x3f2>
 8001072:	3301      	adds	r3, #1
 8001074:	4a33      	ldr	r2, [pc, #204]	; (8001144 <decodeGGA+0x4bc>)
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	e7f6      	b.n	8001068 <decodeGGA+0x3e0>


	/*************** Altitude calculation ********************/
	inx++;
 800107a:	3301      	adds	r3, #1
 800107c:	4a31      	ldr	r2, [pc, #196]	; (8001144 <decodeGGA+0x4bc>)
 800107e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001080:	2200      	movs	r2, #0
 8001082:	9201      	str	r2, [sp, #4]
 8001084:	9202      	str	r2, [sp, #8]
 8001086:	9203      	str	r2, [sp, #12]
	i=0;
	while (GGAbuffer[inx] != ',')
 8001088:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <decodeGGA+0x4bc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	5ce1      	ldrb	r1, [r4, r3]
 800108e:	292c      	cmp	r1, #44	; 0x2c
 8001090:	d009      	beq.n	80010a6 <decodeGGA+0x41e>
	{
		buffer[i] = GGAbuffer[inx];
 8001092:	f102 0010 	add.w	r0, r2, #16
 8001096:	4468      	add	r0, sp
 8001098:	f800 1c0c 	strb.w	r1, [r0, #-12]
		i++;
 800109c:	3201      	adds	r2, #1
		inx++;
 800109e:	3301      	adds	r3, #1
 80010a0:	4928      	ldr	r1, [pc, #160]	; (8001144 <decodeGGA+0x4bc>)
 80010a2:	600b      	str	r3, [r1, #0]
 80010a4:	e7f0      	b.n	8001088 <decodeGGA+0x400>
	}
	num = (atoi(buffer));
 80010a6:	a801      	add	r0, sp, #4
 80010a8:	f006 fd1e 	bl	8007ae8 <atoi>
 80010ac:	b207      	sxth	r7, r0
	j = 0;
 80010ae:	2300      	movs	r3, #0
	while (buffer[j] != '.') j++;
 80010b0:	f103 0210 	add.w	r2, r3, #16
 80010b4:	446a      	add	r2, sp
 80010b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80010ba:	2a2e      	cmp	r2, #46	; 0x2e
 80010bc:	d001      	beq.n	80010c2 <decodeGGA+0x43a>
 80010be:	3301      	adds	r3, #1
 80010c0:	e7f6      	b.n	80010b0 <decodeGGA+0x428>
	j++;
 80010c2:	1c5e      	adds	r6, r3, #1
	declen = (strlen(buffer))-j;
 80010c4:	a801      	add	r0, sp, #4
 80010c6:	f7ff f8d3 	bl	8000270 <strlen>
 80010ca:	eba0 0806 	sub.w	r8, r0, r6
	dec = atoi ((char *) buffer+j);
 80010ce:	ab01      	add	r3, sp, #4
 80010d0:	1998      	adds	r0, r3, r6
 80010d2:	f006 fd09 	bl	8007ae8 <atoi>
 80010d6:	4606      	mov	r6, r0
	lat = (num) + (dec/pow(10, (declen)));
 80010d8:	4640      	mov	r0, r8
 80010da:	f7ff fa23 	bl	8000524 <__aeabi_i2d>
 80010de:	ec41 0b11 	vmov	d1, r0, r1
 80010e2:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8001130 <decodeGGA+0x4a8>
 80010e6:	f009 fa9f 	bl	800a628 <pow>
 80010ea:	ec59 8b10 	vmov	r8, r9, d0
 80010ee:	4630      	mov	r0, r6
 80010f0:	f7ff fa18 	bl	8000524 <__aeabi_i2d>
 80010f4:	4642      	mov	r2, r8
 80010f6:	464b      	mov	r3, r9
 80010f8:	f7ff fba8 	bl	800084c <__aeabi_ddiv>
 80010fc:	4680      	mov	r8, r0
 80010fe:	4689      	mov	r9, r1
 8001100:	4638      	mov	r0, r7
 8001102:	f7ff fa0f 	bl	8000524 <__aeabi_i2d>
 8001106:	4642      	mov	r2, r8
 8001108:	464b      	mov	r3, r9
 800110a:	f7ff f8bf 	bl	800028c <__adddf3>
 800110e:	f7ff fd6b 	bl	8000be8 <__aeabi_d2f>
	gga->alt.altitude = lat;
 8001112:	6228      	str	r0, [r5, #32]

	inx++;
 8001114:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <decodeGGA+0x4bc>)
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800111c:	5ce3      	ldrb	r3, [r4, r3]
 800111e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24

	return 0;
 8001122:	2000      	movs	r0, #0

}
 8001124:	b005      	add	sp, #20
 8001126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 800112a:	2002      	movs	r0, #2
 800112c:	e7fa      	b.n	8001124 <decodeGGA+0x49c>
 800112e:	bf00      	nop
 8001130:	00000000 	.word	0x00000000
 8001134:	40240000 	.word	0x40240000
 8001138:	33333333 	.word	0x33333333
 800113c:	3fe33333 	.word	0x3fe33333
 8001140:	51eb851f 	.word	0x51eb851f
 8001144:	20000318 	.word	0x20000318

08001148 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800114c:	b085      	sub	sp, #20
 800114e:	4604      	mov	r4, r0
 8001150:	460d      	mov	r5, r1
	inx = 0;
 8001152:	4ba9      	ldr	r3, [pc, #676]	; (80013f8 <decodeRMC+0x2b0>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 8001158:	e002      	b.n	8001160 <decodeRMC+0x18>
 800115a:	3301      	adds	r3, #1
 800115c:	4aa6      	ldr	r2, [pc, #664]	; (80013f8 <decodeRMC+0x2b0>)
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4ba5      	ldr	r3, [pc, #660]	; (80013f8 <decodeRMC+0x2b0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	5ce2      	ldrb	r2, [r4, r3]
 8001166:	2a2c      	cmp	r2, #44	; 0x2c
 8001168:	d1f7      	bne.n	800115a <decodeRMC+0x12>
	inx++;
 800116a:	3301      	adds	r3, #1
 800116c:	4aa2      	ldr	r2, [pc, #648]	; (80013f8 <decodeRMC+0x2b0>)
 800116e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 8001170:	e002      	b.n	8001178 <decodeRMC+0x30>
 8001172:	3301      	adds	r3, #1
 8001174:	4aa0      	ldr	r2, [pc, #640]	; (80013f8 <decodeRMC+0x2b0>)
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b9f      	ldr	r3, [pc, #636]	; (80013f8 <decodeRMC+0x2b0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	5ce2      	ldrb	r2, [r4, r3]
 800117e:	2a2c      	cmp	r2, #44	; 0x2c
 8001180:	d1f7      	bne.n	8001172 <decodeRMC+0x2a>
	inx++;
 8001182:	3301      	adds	r3, #1
 8001184:	4a9c      	ldr	r2, [pc, #624]	; (80013f8 <decodeRMC+0x2b0>)
 8001186:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001188:	5ce2      	ldrb	r2, [r4, r3]
 800118a:	2a41      	cmp	r2, #65	; 0x41
 800118c:	d10f      	bne.n	80011ae <decodeRMC+0x66>
	{
		rmc->isValid = 1;
 800118e:	2201      	movs	r2, #1
 8001190:	616a      	str	r2, [r5, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001192:	4413      	add	r3, r2
 8001194:	4a98      	ldr	r2, [pc, #608]	; (80013f8 <decodeRMC+0x2b0>)
 8001196:	6013      	str	r3, [r2, #0]
	inx++;
 8001198:	3301      	adds	r3, #1
 800119a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800119c:	4b96      	ldr	r3, [pc, #600]	; (80013f8 <decodeRMC+0x2b0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	5ce2      	ldrb	r2, [r4, r3]
 80011a2:	2a2c      	cmp	r2, #44	; 0x2c
 80011a4:	d009      	beq.n	80011ba <decodeRMC+0x72>
 80011a6:	3301      	adds	r3, #1
 80011a8:	4a93      	ldr	r2, [pc, #588]	; (80013f8 <decodeRMC+0x2b0>)
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e7f6      	b.n	800119c <decodeRMC+0x54>
		rmc->isValid =0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	616b      	str	r3, [r5, #20]
		return 1;
 80011b2:	2001      	movs	r0, #1
	rmc->date.Day = day;
	rmc->date.Mon = mon;
	rmc->date.Yr = yr;

	return 0;
}
 80011b4:	b005      	add	sp, #20
 80011b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	inx++;
 80011ba:	3301      	adds	r3, #1
 80011bc:	4a8e      	ldr	r2, [pc, #568]	; (80013f8 <decodeRMC+0x2b0>)
 80011be:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 80011c0:	4b8d      	ldr	r3, [pc, #564]	; (80013f8 <decodeRMC+0x2b0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	5ce2      	ldrb	r2, [r4, r3]
 80011c6:	2a2c      	cmp	r2, #44	; 0x2c
 80011c8:	d003      	beq.n	80011d2 <decodeRMC+0x8a>
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a8a      	ldr	r2, [pc, #552]	; (80013f8 <decodeRMC+0x2b0>)
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e7f6      	b.n	80011c0 <decodeRMC+0x78>
	inx++;
 80011d2:	3301      	adds	r3, #1
 80011d4:	4a88      	ldr	r2, [pc, #544]	; (80013f8 <decodeRMC+0x2b0>)
 80011d6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 80011d8:	4b87      	ldr	r3, [pc, #540]	; (80013f8 <decodeRMC+0x2b0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	5ce2      	ldrb	r2, [r4, r3]
 80011de:	2a2c      	cmp	r2, #44	; 0x2c
 80011e0:	d003      	beq.n	80011ea <decodeRMC+0xa2>
 80011e2:	3301      	adds	r3, #1
 80011e4:	4a84      	ldr	r2, [pc, #528]	; (80013f8 <decodeRMC+0x2b0>)
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e7f6      	b.n	80011d8 <decodeRMC+0x90>
	inx++;
 80011ea:	3301      	adds	r3, #1
 80011ec:	4a82      	ldr	r2, [pc, #520]	; (80013f8 <decodeRMC+0x2b0>)
 80011ee:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 80011f0:	4b81      	ldr	r3, [pc, #516]	; (80013f8 <decodeRMC+0x2b0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	5ce2      	ldrb	r2, [r4, r3]
 80011f6:	2a2c      	cmp	r2, #44	; 0x2c
 80011f8:	d003      	beq.n	8001202 <decodeRMC+0xba>
 80011fa:	3301      	adds	r3, #1
 80011fc:	4a7e      	ldr	r2, [pc, #504]	; (80013f8 <decodeRMC+0x2b0>)
 80011fe:	6013      	str	r3, [r2, #0]
 8001200:	e7f6      	b.n	80011f0 <decodeRMC+0xa8>
	inx++;
 8001202:	3301      	adds	r3, #1
 8001204:	4a7c      	ldr	r2, [pc, #496]	; (80013f8 <decodeRMC+0x2b0>)
 8001206:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001208:	2200      	movs	r2, #0
 800120a:	9201      	str	r2, [sp, #4]
 800120c:	9202      	str	r2, [sp, #8]
 800120e:	9203      	str	r2, [sp, #12]
	while (RMCbuffer[inx] != ',')
 8001210:	4b79      	ldr	r3, [pc, #484]	; (80013f8 <decodeRMC+0x2b0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	5ce1      	ldrb	r1, [r4, r3]
 8001216:	292c      	cmp	r1, #44	; 0x2c
 8001218:	d009      	beq.n	800122e <decodeRMC+0xe6>
		buffer[i] = RMCbuffer[inx];
 800121a:	f102 0010 	add.w	r0, r2, #16
 800121e:	4468      	add	r0, sp
 8001220:	f800 1c0c 	strb.w	r1, [r0, #-12]
		i++;
 8001224:	3201      	adds	r2, #1
		inx++;
 8001226:	3301      	adds	r3, #1
 8001228:	4973      	ldr	r1, [pc, #460]	; (80013f8 <decodeRMC+0x2b0>)
 800122a:	600b      	str	r3, [r1, #0]
 800122c:	e7f0      	b.n	8001210 <decodeRMC+0xc8>
	if (strlen (buffer) > 0){          // if the speed have some data
 800122e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001232:	b9c3      	cbnz	r3, 8001266 <decodeRMC+0x11e>
	else rmc->speed = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	60eb      	str	r3, [r5, #12]
	inx++;
 8001238:	4a6f      	ldr	r2, [pc, #444]	; (80013f8 <decodeRMC+0x2b0>)
 800123a:	6813      	ldr	r3, [r2, #0]
 800123c:	3301      	adds	r3, #1
 800123e:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001240:	2200      	movs	r2, #0
 8001242:	9201      	str	r2, [sp, #4]
 8001244:	9202      	str	r2, [sp, #8]
 8001246:	9203      	str	r2, [sp, #12]
	while (RMCbuffer[inx] != ',')
 8001248:	4b6b      	ldr	r3, [pc, #428]	; (80013f8 <decodeRMC+0x2b0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	5ce1      	ldrb	r1, [r4, r3]
 800124e:	292c      	cmp	r1, #44	; 0x2c
 8001250:	d041      	beq.n	80012d6 <decodeRMC+0x18e>
		buffer[i] = RMCbuffer[inx];
 8001252:	f102 0010 	add.w	r0, r2, #16
 8001256:	4468      	add	r0, sp
 8001258:	f800 1c0c 	strb.w	r1, [r0, #-12]
		i++;
 800125c:	3201      	adds	r2, #1
		inx++;
 800125e:	3301      	adds	r3, #1
 8001260:	4965      	ldr	r1, [pc, #404]	; (80013f8 <decodeRMC+0x2b0>)
 8001262:	600b      	str	r3, [r1, #0]
 8001264:	e7f0      	b.n	8001248 <decodeRMC+0x100>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001266:	a801      	add	r0, sp, #4
 8001268:	f006 fc3e 	bl	8007ae8 <atoi>
 800126c:	b207      	sxth	r7, r0
		int j = 0;
 800126e:	2300      	movs	r3, #0
		while (buffer[j] != '.') j++;   // same as above
 8001270:	e000      	b.n	8001274 <decodeRMC+0x12c>
 8001272:	3301      	adds	r3, #1
 8001274:	f103 0210 	add.w	r2, r3, #16
 8001278:	446a      	add	r2, sp
 800127a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800127e:	2a2e      	cmp	r2, #46	; 0x2e
 8001280:	d1f7      	bne.n	8001272 <decodeRMC+0x12a>
		j++;
 8001282:	1c5e      	adds	r6, r3, #1
		int declen = (strlen(buffer))-j;
 8001284:	a801      	add	r0, sp, #4
 8001286:	f7fe fff3 	bl	8000270 <strlen>
 800128a:	eba0 0806 	sub.w	r8, r0, r6
		int dec = atoi ((char *) buffer+j);
 800128e:	ab01      	add	r3, sp, #4
 8001290:	1998      	adds	r0, r3, r6
 8001292:	f006 fc29 	bl	8007ae8 <atoi>
 8001296:	4606      	mov	r6, r0
		float lat = num + (dec/pow(10, (declen)));
 8001298:	4640      	mov	r0, r8
 800129a:	f7ff f943 	bl	8000524 <__aeabi_i2d>
 800129e:	ec41 0b11 	vmov	d1, r0, r1
 80012a2:	ed9f 0b53 	vldr	d0, [pc, #332]	; 80013f0 <decodeRMC+0x2a8>
 80012a6:	f009 f9bf 	bl	800a628 <pow>
 80012aa:	ec59 8b10 	vmov	r8, r9, d0
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff f938 	bl	8000524 <__aeabi_i2d>
 80012b4:	4642      	mov	r2, r8
 80012b6:	464b      	mov	r3, r9
 80012b8:	f7ff fac8 	bl	800084c <__aeabi_ddiv>
 80012bc:	4680      	mov	r8, r0
 80012be:	4689      	mov	r9, r1
 80012c0:	4638      	mov	r0, r7
 80012c2:	f7ff f92f 	bl	8000524 <__aeabi_i2d>
 80012c6:	4642      	mov	r2, r8
 80012c8:	464b      	mov	r3, r9
 80012ca:	f7fe ffdf 	bl	800028c <__adddf3>
 80012ce:	f7ff fc8b 	bl	8000be8 <__aeabi_d2f>
		rmc->speed = lat;
 80012d2:	60e8      	str	r0, [r5, #12]
 80012d4:	e7b0      	b.n	8001238 <decodeRMC+0xf0>
	if (strlen (buffer) > 0){  // if the course have some data
 80012d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80012da:	b9c3      	cbnz	r3, 800130e <decodeRMC+0x1c6>
			rmc->course = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	612b      	str	r3, [r5, #16]
	inx++;
 80012e0:	4a45      	ldr	r2, [pc, #276]	; (80013f8 <decodeRMC+0x2b0>)
 80012e2:	6813      	ldr	r3, [r2, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80012e8:	2200      	movs	r2, #0
 80012ea:	9201      	str	r2, [sp, #4]
 80012ec:	9202      	str	r2, [sp, #8]
 80012ee:	9203      	str	r2, [sp, #12]
	while (RMCbuffer[inx] != ',')
 80012f0:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <decodeRMC+0x2b0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	5ce1      	ldrb	r1, [r4, r3]
 80012f6:	292c      	cmp	r1, #44	; 0x2c
 80012f8:	d041      	beq.n	800137e <decodeRMC+0x236>
		buffer[i] = RMCbuffer[inx];
 80012fa:	f102 0010 	add.w	r0, r2, #16
 80012fe:	4468      	add	r0, sp
 8001300:	f800 1c0c 	strb.w	r1, [r0, #-12]
		i++;
 8001304:	3201      	adds	r2, #1
		inx++;
 8001306:	3301      	adds	r3, #1
 8001308:	493b      	ldr	r1, [pc, #236]	; (80013f8 <decodeRMC+0x2b0>)
 800130a:	600b      	str	r3, [r1, #0]
 800130c:	e7f0      	b.n	80012f0 <decodeRMC+0x1a8>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 800130e:	a801      	add	r0, sp, #4
 8001310:	f006 fbea 	bl	8007ae8 <atoi>
 8001314:	b207      	sxth	r7, r0
		int j = 0;
 8001316:	2300      	movs	r3, #0
		while (buffer[j] != '.') j++;   // same as above
 8001318:	e000      	b.n	800131c <decodeRMC+0x1d4>
 800131a:	3301      	adds	r3, #1
 800131c:	f103 0210 	add.w	r2, r3, #16
 8001320:	446a      	add	r2, sp
 8001322:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8001326:	2a2e      	cmp	r2, #46	; 0x2e
 8001328:	d1f7      	bne.n	800131a <decodeRMC+0x1d2>
		j++;
 800132a:	1c5e      	adds	r6, r3, #1
		int declen = (strlen(buffer))-j;
 800132c:	a801      	add	r0, sp, #4
 800132e:	f7fe ff9f 	bl	8000270 <strlen>
 8001332:	eba0 0806 	sub.w	r8, r0, r6
		int dec = atoi ((char *) buffer+j);
 8001336:	ab01      	add	r3, sp, #4
 8001338:	1998      	adds	r0, r3, r6
 800133a:	f006 fbd5 	bl	8007ae8 <atoi>
 800133e:	4606      	mov	r6, r0
		float lat = num + (dec/pow(10, (declen)));
 8001340:	4640      	mov	r0, r8
 8001342:	f7ff f8ef 	bl	8000524 <__aeabi_i2d>
 8001346:	ec41 0b11 	vmov	d1, r0, r1
 800134a:	ed9f 0b29 	vldr	d0, [pc, #164]	; 80013f0 <decodeRMC+0x2a8>
 800134e:	f009 f96b 	bl	800a628 <pow>
 8001352:	ec59 8b10 	vmov	r8, r9, d0
 8001356:	4630      	mov	r0, r6
 8001358:	f7ff f8e4 	bl	8000524 <__aeabi_i2d>
 800135c:	4642      	mov	r2, r8
 800135e:	464b      	mov	r3, r9
 8001360:	f7ff fa74 	bl	800084c <__aeabi_ddiv>
 8001364:	4680      	mov	r8, r0
 8001366:	4689      	mov	r9, r1
 8001368:	4638      	mov	r0, r7
 800136a:	f7ff f8db 	bl	8000524 <__aeabi_i2d>
 800136e:	4642      	mov	r2, r8
 8001370:	464b      	mov	r3, r9
 8001372:	f7fe ff8b 	bl	800028c <__adddf3>
 8001376:	f7ff fc37 	bl	8000be8 <__aeabi_d2f>
		rmc->course = lat;
 800137a:	6128      	str	r0, [r5, #16]
 800137c:	e7b0      	b.n	80012e0 <decodeRMC+0x198>
	day = atoi(buffer)/10000;  // extract 28
 800137e:	a801      	add	r0, sp, #4
 8001380:	f006 fbb2 	bl	8007ae8 <atoi>
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <decodeRMC+0x2b4>)
 8001386:	fb83 2300 	smull	r2, r3, r3, r0
 800138a:	17c0      	asrs	r0, r0, #31
 800138c:	ebc0 3023 	rsb	r0, r0, r3, asr #12
 8001390:	4c1b      	ldr	r4, [pc, #108]	; (8001400 <decodeRMC+0x2b8>)
 8001392:	6020      	str	r0, [r4, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001394:	a801      	add	r0, sp, #4
 8001396:	f006 fba7 	bl	8007ae8 <atoi>
 800139a:	4e1a      	ldr	r6, [pc, #104]	; (8001404 <decodeRMC+0x2bc>)
 800139c:	fb86 3200 	smull	r3, r2, r6, r0
 80013a0:	17c3      	asrs	r3, r0, #31
 80013a2:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 80013a6:	fb86 2103 	smull	r2, r1, r6, r3
 80013aa:	17da      	asrs	r2, r3, #31
 80013ac:	ebc2 1261 	rsb	r2, r2, r1, asr #5
 80013b0:	2764      	movs	r7, #100	; 0x64
 80013b2:	fb07 3212 	mls	r2, r7, r2, r3
 80013b6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8001410 <decodeRMC+0x2c8>
 80013ba:	f8c8 2000 	str.w	r2, [r8]
	yr = atoi(buffer)%100;  // extract 22
 80013be:	a801      	add	r0, sp, #4
 80013c0:	f006 fb92 	bl	8007ae8 <atoi>
 80013c4:	fb86 3600 	smull	r3, r6, r6, r0
 80013c8:	17c3      	asrs	r3, r0, #31
 80013ca:	ebc3 1366 	rsb	r3, r3, r6, asr #5
 80013ce:	fb07 0313 	mls	r3, r7, r3, r0
 80013d2:	4a0d      	ldr	r2, [pc, #52]	; (8001408 <decodeRMC+0x2c0>)
 80013d4:	6013      	str	r3, [r2, #0]
	day = day+daychange;   // correction due to GMT shift
 80013d6:	6823      	ldr	r3, [r4, #0]
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <decodeRMC+0x2c4>)
 80013da:	6809      	ldr	r1, [r1, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	6023      	str	r3, [r4, #0]
	rmc->date.Day = day;
 80013e0:	602b      	str	r3, [r5, #0]
	rmc->date.Mon = mon;
 80013e2:	f8d8 3000 	ldr.w	r3, [r8]
 80013e6:	606b      	str	r3, [r5, #4]
	rmc->date.Yr = yr;
 80013e8:	6813      	ldr	r3, [r2, #0]
 80013ea:	60ab      	str	r3, [r5, #8]
	return 0;
 80013ec:	2000      	movs	r0, #0
 80013ee:	e6e1      	b.n	80011b4 <decodeRMC+0x6c>
 80013f0:	00000000 	.word	0x00000000
 80013f4:	40240000 	.word	0x40240000
 80013f8:	20000318 	.word	0x20000318
 80013fc:	68db8bad 	.word	0x68db8bad
 8001400:	20000304 	.word	0x20000304
 8001404:	51eb851f 	.word	0x51eb851f
 8001408:	20000324 	.word	0x20000324
 800140c:	20000308 	.word	0x20000308
 8001410:	20000320 	.word	0x20000320

08001414 <getGPS>:




int getGPS (GPSSTRUCT *gpsData)
{
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4604      	mov	r4, r0
	if (Wait_for("GGA") == 1)
 8001418:	4826      	ldr	r0, [pc, #152]	; (80014b4 <getGPS+0xa0>)
 800141a:	f000 f8f3 	bl	8001604 <Wait_for>
 800141e:	2801      	cmp	r0, #1
 8001420:	d012      	beq.n	8001448 <getGPS+0x34>
		Copy_upto("*", GGA);
		if (decodeGGA(GGA, &gpsData->ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
		else flagGGA = 1;  // 1 indicates the data is invalid
	}

	if (Wait_for("RMC") == 1)
 8001422:	4825      	ldr	r0, [pc, #148]	; (80014b8 <getGPS+0xa4>)
 8001424:	f000 f8ee 	bl	8001604 <Wait_for>
 8001428:	2801      	cmp	r0, #1
 800142a:	d022      	beq.n	8001472 <getGPS+0x5e>
		Copy_upto("*", RMC);
		if (decodeRMC(RMC, &gpsData->rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
		else flagRMC = 1;  // 1 indicates the data is invalid
	}

	if (VCCTimeout <= 0)
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <getGPS+0xa8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	dd34      	ble.n	800149e <getGPS+0x8a>

		//reset flags
		flagGGA =flagRMC =0;
	}

	if ((flagGGA == 2) | (flagRMC == 2))
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <getGPS+0xac>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <getGPS+0xb0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b02      	cmp	r3, #2
 800143e:	bf18      	it	ne
 8001440:	2a02      	cmpne	r2, #2
 8001442:	d135      	bne.n	80014b0 <getGPS+0x9c>
	{
		return 0;
 8001444:	2000      	movs	r0, #0
	}
	else
	{
		return 1;
	}
}
 8001446:	bd38      	pop	{r3, r4, r5, pc}
		VCCTimeout = 100;  // Reset the VCC Timeout indicating the GGA is being received
 8001448:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <getGPS+0xa8>)
 800144a:	2264      	movs	r2, #100	; 0x64
 800144c:	601a      	str	r2, [r3, #0]
		Copy_upto("*", GGA);
 800144e:	4d1e      	ldr	r5, [pc, #120]	; (80014c8 <getGPS+0xb4>)
 8001450:	4629      	mov	r1, r5
 8001452:	481e      	ldr	r0, [pc, #120]	; (80014cc <getGPS+0xb8>)
 8001454:	f000 f884 	bl	8001560 <Copy_upto>
		if (decodeGGA(GGA, &gpsData->ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 8001458:	4621      	mov	r1, r4
 800145a:	4628      	mov	r0, r5
 800145c:	f7ff fc14 	bl	8000c88 <decodeGGA>
 8001460:	b918      	cbnz	r0, 800146a <getGPS+0x56>
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <getGPS+0xac>)
 8001464:	2202      	movs	r2, #2
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e7db      	b.n	8001422 <getGPS+0xe>
		else flagGGA = 1;  // 1 indicates the data is invalid
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <getGPS+0xac>)
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e7d7      	b.n	8001422 <getGPS+0xe>
		VCCTimeout = 100;  // Reset the VCC Timeout indicating the RMC is being received
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <getGPS+0xa8>)
 8001474:	2264      	movs	r2, #100	; 0x64
 8001476:	601a      	str	r2, [r3, #0]
		Copy_upto("*", RMC);
 8001478:	4d15      	ldr	r5, [pc, #84]	; (80014d0 <getGPS+0xbc>)
 800147a:	4629      	mov	r1, r5
 800147c:	4813      	ldr	r0, [pc, #76]	; (80014cc <getGPS+0xb8>)
 800147e:	f000 f86f 	bl	8001560 <Copy_upto>
		if (decodeRMC(RMC, &gpsData->rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 8001482:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8001486:	4628      	mov	r0, r5
 8001488:	f7ff fe5e 	bl	8001148 <decodeRMC>
 800148c:	b918      	cbnz	r0, 8001496 <getGPS+0x82>
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <getGPS+0xb0>)
 8001490:	2202      	movs	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	e7ca      	b.n	800142c <getGPS+0x18>
		else flagRMC = 1;  // 1 indicates the data is invalid
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <getGPS+0xb0>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e7c6      	b.n	800142c <getGPS+0x18>
		VCCTimeout = 100;  // Reset the timeout
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <getGPS+0xa8>)
 80014a0:	2264      	movs	r2, #100	; 0x64
 80014a2:	601a      	str	r2, [r3, #0]
		flagGGA =flagRMC =0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <getGPS+0xb0>)
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <getGPS+0xac>)
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e7c1      	b.n	8001434 <getGPS+0x20>
		return 1;
 80014b0:	2001      	movs	r0, #1
 80014b2:	e7c8      	b.n	8001446 <getGPS+0x32>
 80014b4:	0800ce74 	.word	0x0800ce74
 80014b8:	0800ce7c 	.word	0x0800ce7c
 80014bc:	20000004 	.word	0x20000004
 80014c0:	2000030c 	.word	0x2000030c
 80014c4:	20000310 	.word	0x20000310
 80014c8:	2000023c 	.word	0x2000023c
 80014cc:	0800ce78 	.word	0x0800ce78
 80014d0:	200002a0 	.word	0x200002a0

080014d4 <store_char>:
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80014d4:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 80014d8:	3301      	adds	r3, #1
 80014da:	f3c3 0308 	ubfx	r3, r3, #0, #9

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80014de:	f8d1 2204 	ldr.w	r2, [r1, #516]	; 0x204
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d004      	beq.n	80014f0 <store_char+0x1c>
    buffer->buffer[buffer->head] = c;
 80014e6:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
 80014ea:	5488      	strb	r0, [r1, r2]
    buffer->head = i;
 80014ec:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  }
}
 80014f0:	4770      	bx	lr
	...

080014f4 <Uart_read>:
}

int Uart_read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <Uart_read+0x2c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 80014fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001500:	4291      	cmp	r1, r2
 8001502:	d00a      	beq.n	800151a <Uart_read+0x26>
  {
    return -1;
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001504:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001508:	5c98      	ldrb	r0, [r3, r2]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800150a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800150e:	3201      	adds	r2, #1
 8001510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001514:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001518:	4770      	bx	lr
    return -1;
 800151a:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 800151e:	4770      	bx	lr
 8001520:	20000328 	.word	0x20000328

08001524 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001524:	4b04      	ldr	r3, [pc, #16]	; (8001538 <IsDataAvailable+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800152c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001530:	1ac0      	subs	r0, r0, r3
}
 8001532:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001536:	4770      	bx	lr
 8001538:	20000328 	.word	0x20000328

0800153c <Uart_peek>:
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
  if(_rx_buffer->head == _rx_buffer->tail)
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <Uart_peek+0x20>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8001544:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001548:	4291      	cmp	r1, r2
 800154a:	d003      	beq.n	8001554 <Uart_peek+0x18>
  {
    return -1;
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 800154c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001550:	5c98      	ldrb	r0, [r3, r2]
 8001552:	4770      	bx	lr
    return -1;
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000328 	.word	0x20000328

08001560 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001564:	4606      	mov	r6, r0
 8001566:	460f      	mov	r7, r1
	int so_far =0;
	int len = strlen (string);
 8001568:	f7fe fe82 	bl	8000270 <strlen>
 800156c:	4680      	mov	r8, r0
	int indx = 0;
 800156e:	f04f 0900 	mov.w	r9, #0
 8001572:	e014      	b.n	800159e <Copy_upto+0x3e>

again:
	while (Uart_peek() != string[so_far])
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <Copy_upto+0x9c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800157c:	5c52      	ldrb	r2, [r2, r1]
 800157e:	f807 2009 	strb.w	r2, [r7, r9]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001588:	3301      	adds	r3, #1
 800158a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800158e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
			indx++;
 8001592:	f109 0901 	add.w	r9, r9, #1
			while (!IsDataAvailable());
 8001596:	f7ff ffc5 	bl	8001524 <IsDataAvailable>
 800159a:	2800      	cmp	r0, #0
 800159c:	d0fb      	beq.n	8001596 <Copy_upto+0x36>
	while (Uart_peek() != string[so_far])
 800159e:	f7ff ffcd 	bl	800153c <Uart_peek>
 80015a2:	7833      	ldrb	r3, [r6, #0]
 80015a4:	4298      	cmp	r0, r3
 80015a6:	d1e5      	bne.n	8001574 <Copy_upto+0x14>
 80015a8:	2400      	movs	r4, #0
 80015aa:	e003      	b.n	80015b4 <Copy_upto+0x54>
		so_far++;
		buffertocopyinto[indx++] = Uart_read();
		if (so_far == len) return 1;
		timeout = TIMEOUT_DEF;
		while ((!IsDataAvailable())&&timeout);
		if (timeout == 0) return 0;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <Copy_upto+0xa0>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	b313      	cbz	r3, 80015f8 <Copy_upto+0x98>
		buffertocopyinto[indx++] = Uart_read();
 80015b2:	46a9      	mov	r9, r5
	while (Uart_peek() == string [so_far])
 80015b4:	f7ff ffc2 	bl	800153c <Uart_peek>
 80015b8:	5d33      	ldrb	r3, [r6, r4]
 80015ba:	4298      	cmp	r0, r3
 80015bc:	d115      	bne.n	80015ea <Copy_upto+0x8a>
		so_far++;
 80015be:	3401      	adds	r4, #1
		buffertocopyinto[indx++] = Uart_read();
 80015c0:	f7ff ff98 	bl	80014f4 <Uart_read>
 80015c4:	f109 0501 	add.w	r5, r9, #1
 80015c8:	f807 0009 	strb.w	r0, [r7, r9]
		if (so_far == len) return 1;
 80015cc:	45a0      	cmp	r8, r4
 80015ce:	d010      	beq.n	80015f2 <Copy_upto+0x92>
		timeout = TIMEOUT_DEF;
 80015d0:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <Copy_upto+0xa0>)
 80015d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015d6:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 80015d8:	f7ff ffa4 	bl	8001524 <IsDataAvailable>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d1e5      	bne.n	80015ac <Copy_upto+0x4c>
 80015e0:	4b07      	ldr	r3, [pc, #28]	; (8001600 <Copy_upto+0xa0>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f7      	bne.n	80015d8 <Copy_upto+0x78>
 80015e8:	e7e0      	b.n	80015ac <Copy_upto+0x4c>
	}

	if (so_far != len)
 80015ea:	4544      	cmp	r4, r8
 80015ec:	d1d7      	bne.n	800159e <Copy_upto+0x3e>
	{
		so_far = 0;
		goto again;
	}

	if (so_far == len) return 1;
 80015ee:	2001      	movs	r0, #1
 80015f0:	e000      	b.n	80015f4 <Copy_upto+0x94>
		if (so_far == len) return 1;
 80015f2:	2001      	movs	r0, #1
	else return 0;
}
 80015f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (timeout == 0) return 0;
 80015f8:	2000      	movs	r0, #0
 80015fa:	e7fb      	b.n	80015f4 <Copy_upto+0x94>
 80015fc:	20000328 	.word	0x20000328
 8001600:	2000032c 	.word	0x2000032c

08001604 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001604:	b570      	push	{r4, r5, r6, lr}
 8001606:	4604      	mov	r4, r0
	int so_far =0;
	int len = strlen (string);
 8001608:	f7fe fe32 	bl	8000270 <strlen>
 800160c:	4605      	mov	r5, r0

again:
	timeout = TIMEOUT_DEF;
 800160e:	4b29      	ldr	r3, [pc, #164]	; (80016b4 <Wait_for+0xb0>)
 8001610:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001614:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001616:	f7ff ff85 	bl	8001524 <IsDataAvailable>
 800161a:	b918      	cbnz	r0, 8001624 <Wait_for+0x20>
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <Wait_for+0xb0>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f8      	bne.n	8001616 <Wait_for+0x12>
	if (timeout == 0) return 0;
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <Wait_for+0xb0>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d03b      	beq.n	80016a4 <Wait_for+0xa0>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800162c:	f7ff ff86 	bl	800153c <Uart_peek>
 8001630:	7823      	ldrb	r3, [r4, #0]
 8001632:	4298      	cmp	r0, r3
 8001634:	d00f      	beq.n	8001656 <Wait_for+0x52>
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001636:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <Wait_for+0xb4>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 800163e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001642:	4299      	cmp	r1, r3
 8001644:	d030      	beq.n	80016a8 <Wait_for+0xa4>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001646:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001650:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8001654:	e7ea      	b.n	800162c <Wait_for+0x28>
 8001656:	2600      	movs	r6, #0
 8001658:	e002      	b.n	8001660 <Wait_for+0x5c>
		so_far++;
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
		if (so_far == len) return 1;
		timeout = TIMEOUT_DEF;
		while ((!IsDataAvailable())&&timeout);
		if (timeout == 0) return 0;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <Wait_for+0xb0>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	b33b      	cbz	r3, 80016b0 <Wait_for+0xac>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001660:	f7ff ff6c 	bl	800153c <Uart_peek>
 8001664:	5da3      	ldrb	r3, [r4, r6]
 8001666:	4298      	cmp	r0, r3
 8001668:	d118      	bne.n	800169c <Wait_for+0x98>
		so_far++;
 800166a:	3601      	adds	r6, #1
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <Wait_for+0xb4>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001674:	3301      	adds	r3, #1
 8001676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800167a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		if (so_far == len) return 1;
 800167e:	42b5      	cmp	r5, r6
 8001680:	d014      	beq.n	80016ac <Wait_for+0xa8>
		timeout = TIMEOUT_DEF;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <Wait_for+0xb0>)
 8001684:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001688:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800168a:	f7ff ff4b 	bl	8001524 <IsDataAvailable>
 800168e:	2800      	cmp	r0, #0
 8001690:	d1e3      	bne.n	800165a <Wait_for+0x56>
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <Wait_for+0xb0>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f7      	bne.n	800168a <Wait_for+0x86>
 800169a:	e7de      	b.n	800165a <Wait_for+0x56>
	}

	if (so_far != len)
 800169c:	42ae      	cmp	r6, r5
 800169e:	d1b6      	bne.n	800160e <Wait_for+0xa>
	{
		so_far = 0;
		goto again;
	}

	if (so_far == len) return 1;
 80016a0:	2001      	movs	r0, #1
 80016a2:	e002      	b.n	80016aa <Wait_for+0xa6>
	if (timeout == 0) return 0;
 80016a4:	2000      	movs	r0, #0
 80016a6:	e000      	b.n	80016aa <Wait_for+0xa6>
			return 0;
 80016a8:	2000      	movs	r0, #0
	else return 0;
}
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
		if (so_far == len) return 1;
 80016ac:	2001      	movs	r0, #1
 80016ae:	e7fc      	b.n	80016aa <Wait_for+0xa6>
		if (timeout == 0) return 0;
 80016b0:	2000      	movs	r0, #0
 80016b2:	e7fa      	b.n	80016aa <Wait_for+0xa6>
 80016b4:	2000032c 	.word	0x2000032c
 80016b8:	20000328 	.word	0x20000328

080016bc <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80016bc:	b508      	push	{r3, lr}
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80016be:	6803      	ldr	r3, [r0, #0]
 80016c0:	69da      	ldr	r2, [r3, #28]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016c2:	6819      	ldr	r1, [r3, #0]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016c4:	f012 0f20 	tst.w	r2, #32
 80016c8:	d002      	beq.n	80016d0 <Uart_isr+0x14>
 80016ca:	f011 0f20 	tst.w	r1, #32
 80016ce:	d106      	bne.n	80016de <Uart_isr+0x22>
        store_char (c, _rx_buffer);  // store data in buffer
        return;
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80016d0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80016d4:	d002      	beq.n	80016dc <Uart_isr+0x20>
 80016d6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80016da:	d108      	bne.n	80016ee <Uart_isr+0x32>
    	      huart->Instance->RDR = c;

    	    }
    	return;
    }
}
 80016dc:	bd08      	pop	{r3, pc}
		huart->Instance->ISR;                       /* Read status register */
 80016de:	69da      	ldr	r2, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 80016e0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
        store_char (c, _rx_buffer);  // store data in buffer
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <Uart_isr+0x68>)
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	b2c0      	uxtb	r0, r0
 80016e8:	f7ff fef4 	bl	80014d4 <store_char>
        return;
 80016ec:	e7f6      	b.n	80016dc <Uart_isr+0x20>
    	if(tx_buffer.head == tx_buffer.tail)
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <Uart_isr+0x6c>)
 80016f0:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 80016f4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80016f8:	4291      	cmp	r1, r2
 80016fa:	d00e      	beq.n	800171a <Uart_isr+0x5e>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <Uart_isr+0x6c>)
 80016fe:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001702:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8001706:	3301      	adds	r3, #1
 8001708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800170c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->ISR;
 8001710:	6803      	ldr	r3, [r0, #0]
 8001712:	69d8      	ldr	r0, [r3, #28]
    	      huart->Instance->RDR = c;
 8001714:	5c52      	ldrb	r2, [r2, r1]
 8001716:	849a      	strh	r2, [r3, #36]	; 0x24
    	return;
 8001718:	e7e0      	b.n	80016dc <Uart_isr+0x20>
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e7db      	b.n	80016dc <Uart_isr+0x20>
 8001724:	20000328 	.word	0x20000328
 8001728:	20000330 	.word	0x20000330

0800172c <read_calibration_data>:
#define atmPress 101325 //Pa



void read_calibration_data (void) // Чтение калибровочных данных из датчика
{
 800172c:	b500      	push	{lr}
 800172e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t Callib_Data[22] = {0};
 8001730:	2300      	movs	r3, #0
 8001732:	9304      	str	r3, [sp, #16]
 8001734:	9305      	str	r3, [sp, #20]
 8001736:	9306      	str	r3, [sp, #24]
 8001738:	9307      	str	r3, [sp, #28]
 800173a:	9308      	str	r3, [sp, #32]
 800173c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	uint16_t Callib_Start = 0xAA;
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDRESS, Callib_Start, 1, Callib_Data, 22, 100);
 8001740:	2364      	movs	r3, #100	; 0x64
 8001742:	9302      	str	r3, [sp, #8]
 8001744:	2316      	movs	r3, #22
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	ab04      	add	r3, sp, #16
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	22aa      	movs	r2, #170	; 0xaa
 8001750:	21ee      	movs	r1, #238	; 0xee
 8001752:	482f      	ldr	r0, [pc, #188]	; (8001810 <read_calibration_data+0xe4>)
 8001754:	f004 fbd0 	bl	8005ef8 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8001758:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800175c:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8001760:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001764:	4a2b      	ldr	r2, [pc, #172]	; (8001814 <read_calibration_data+0xe8>)
 8001766:	8013      	strh	r3, [r2, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8001768:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800176c:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001770:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001774:	4a28      	ldr	r2, [pc, #160]	; (8001818 <read_calibration_data+0xec>)
 8001776:	8013      	strh	r3, [r2, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8001778:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800177c:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001780:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001784:	4a25      	ldr	r2, [pc, #148]	; (800181c <read_calibration_data+0xf0>)
 8001786:	8013      	strh	r3, [r2, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8001788:	f89d 2016 	ldrb.w	r2, [sp, #22]
 800178c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001790:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001794:	4a22      	ldr	r2, [pc, #136]	; (8001820 <read_calibration_data+0xf4>)
 8001796:	8013      	strh	r3, [r2, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 8001798:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800179c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80017a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017a4:	4a1f      	ldr	r2, [pc, #124]	; (8001824 <read_calibration_data+0xf8>)
 80017a6:	8013      	strh	r3, [r2, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 80017a8:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80017ac:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80017b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017b4:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <read_calibration_data+0xfc>)
 80017b6:	8013      	strh	r3, [r2, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 80017b8:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80017bc:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80017c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017c4:	4a19      	ldr	r2, [pc, #100]	; (800182c <read_calibration_data+0x100>)
 80017c6:	8013      	strh	r3, [r2, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 80017c8:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80017cc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80017d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017d4:	4a16      	ldr	r2, [pc, #88]	; (8001830 <read_calibration_data+0x104>)
 80017d6:	8013      	strh	r3, [r2, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 80017d8:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80017dc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80017e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017e4:	4a13      	ldr	r2, [pc, #76]	; (8001834 <read_calibration_data+0x108>)
 80017e6:	8013      	strh	r3, [r2, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 80017e8:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
 80017ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80017f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80017f4:	4a10      	ldr	r2, [pc, #64]	; (8001838 <read_calibration_data+0x10c>)
 80017f6:	8013      	strh	r3, [r2, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 80017f8:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
 80017fc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8001800:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <read_calibration_data+0x110>)
 8001806:	8013      	strh	r3, [r2, #0]

}
 8001808:	b00b      	add	sp, #44	; 0x2c
 800180a:	f85d fb04 	ldr.w	pc, [sp], #4
 800180e:	bf00      	nop
 8001810:	2000083c 	.word	0x2000083c
 8001814:	20000538 	.word	0x20000538
 8001818:	2000053a 	.word	0x2000053a
 800181c:	2000053c 	.word	0x2000053c
 8001820:	2000053e 	.word	0x2000053e
 8001824:	20000540 	.word	0x20000540
 8001828:	20000542 	.word	0x20000542
 800182c:	20000544 	.word	0x20000544
 8001830:	20000546 	.word	0x20000546
 8001834:	2000055c 	.word	0x2000055c
 8001838:	2000055e 	.word	0x2000055e
 800183c:	20000560 	.word	0x20000560

08001840 <Get_UPress>:
	return Temp/10.0;
}

// Получение неоткорректированного давления
uint32_t Get_UPress (int oss)   // Настрока точности цифрами 0,1,2,3
{
 8001840:	b510      	push	{r4, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	4604      	mov	r4, r0
	uint8_t datatowrite = 0x34+(oss<<6);
 8001846:	0183      	lsls	r3, r0, #6
 8001848:	b2db      	uxtb	r3, r3
 800184a:	3334      	adds	r3, #52	; 0x34
 800184c:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t Press_RAW[3] = {0};
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <Get_UPress+0x98>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001858:	2300      	movs	r3, #0
 800185a:	f88d 3016 	strb.w	r3, [sp, #22]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 100);
 800185e:	2364      	movs	r3, #100	; 0x64
 8001860:	9302      	str	r3, [sp, #8]
 8001862:	2301      	movs	r3, #1
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	f10d 0217 	add.w	r2, sp, #23
 800186a:	9200      	str	r2, [sp, #0]
 800186c:	22f4      	movs	r2, #244	; 0xf4
 800186e:	21ee      	movs	r1, #238	; 0xee
 8001870:	481a      	ldr	r0, [pc, #104]	; (80018dc <Get_UPress+0x9c>)
 8001872:	f004 fa6c 	bl	8005d4e <HAL_I2C_Mem_Write>
	switch (oss)
 8001876:	2c03      	cmp	r4, #3
 8001878:	d806      	bhi.n	8001888 <Get_UPress+0x48>
 800187a:	e8df f004 	tbb	[pc, r4]
 800187e:	2102      	.short	0x2102
 8001880:	2925      	.short	0x2925
	{
		case (0):
			HAL_Delay (5);
 8001882:	2005      	movs	r0, #5
 8001884:	f003 fee8 	bl	8005658 <HAL_Delay>
			break;
		case (3):
			HAL_Delay (26);
			break;
	}
	HAL_I2C_Mem_Read(&hi2c1, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 100);
 8001888:	2364      	movs	r3, #100	; 0x64
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	2303      	movs	r3, #3
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	ab05      	add	r3, sp, #20
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	22f6      	movs	r2, #246	; 0xf6
 8001898:	21ee      	movs	r1, #238	; 0xee
 800189a:	4810      	ldr	r0, [pc, #64]	; (80018dc <Get_UPress+0x9c>)
 800189c:	f004 fb2c 	bl	8005ef8 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 80018a0:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80018a4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80018ae:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80018b2:	4413      	add	r3, r2
 80018b4:	f1c4 0008 	rsb	r0, r4, #8
}
 80018b8:	fa43 f000 	asr.w	r0, r3, r0
 80018bc:	b006      	add	sp, #24
 80018be:	bd10      	pop	{r4, pc}
			HAL_Delay (8);
 80018c0:	2008      	movs	r0, #8
 80018c2:	f003 fec9 	bl	8005658 <HAL_Delay>
			break;
 80018c6:	e7df      	b.n	8001888 <Get_UPress+0x48>
			HAL_Delay (14);
 80018c8:	200e      	movs	r0, #14
 80018ca:	f003 fec5 	bl	8005658 <HAL_Delay>
			break;
 80018ce:	e7db      	b.n	8001888 <Get_UPress+0x48>
			HAL_Delay (26);
 80018d0:	201a      	movs	r0, #26
 80018d2:	f003 fec1 	bl	8005658 <HAL_Delay>
			break;
 80018d6:	e7d7      	b.n	8001888 <Get_UPress+0x48>
 80018d8:	0800ce70 	.word	0x0800ce70
 80018dc:	2000083c 	.word	0x2000083c

080018e0 <bmp180_getpress>:


float bmp180_getpress (int oss)	// Получение значения давления
{
 80018e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e4:	4681      	mov	r9, r0
	UP = Get_UPress(oss);
 80018e6:	f7ff ffab 	bl	8001840 <Get_UPress>
 80018ea:	4605      	mov	r5, r0
 80018ec:	4b90      	ldr	r3, [pc, #576]	; (8001b30 <bmp180_getpress+0x250>)
 80018ee:	6018      	str	r0, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80018f0:	4b90      	ldr	r3, [pc, #576]	; (8001b34 <bmp180_getpress+0x254>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	4a90      	ldr	r2, [pc, #576]	; (8001b38 <bmp180_getpress+0x258>)
 80018f6:	6814      	ldr	r4, [r2, #0]
 80018f8:	1ae4      	subs	r4, r4, r3
 80018fa:	4b90      	ldr	r3, [pc, #576]	; (8001b3c <bmp180_getpress+0x25c>)
 80018fc:	8818      	ldrh	r0, [r3, #0]
 80018fe:	f7fe fe11 	bl	8000524 <__aeabi_i2d>
 8001902:	2200      	movs	r2, #0
 8001904:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001908:	f7fe fe76 	bl	80005f8 <__aeabi_dmul>
 800190c:	4606      	mov	r6, r0
 800190e:	460f      	mov	r7, r1
 8001910:	4620      	mov	r0, r4
 8001912:	f7fe fe07 	bl	8000524 <__aeabi_i2d>
 8001916:	4632      	mov	r2, r6
 8001918:	463b      	mov	r3, r7
 800191a:	f7fe fe6d 	bl	80005f8 <__aeabi_dmul>
 800191e:	f7ff f91b 	bl	8000b58 <__aeabi_d2iz>
 8001922:	4604      	mov	r4, r0
 8001924:	f8df a24c 	ldr.w	sl, [pc, #588]	; 8001b74 <bmp180_getpress+0x294>
 8001928:	f8ca 0000 	str.w	r0, [sl]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 800192c:	4b84      	ldr	r3, [pc, #528]	; (8001b40 <bmp180_getpress+0x260>)
 800192e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001932:	f7fe fdf7 	bl	8000524 <__aeabi_i2d>
 8001936:	2200      	movs	r2, #0
 8001938:	4b82      	ldr	r3, [pc, #520]	; (8001b44 <bmp180_getpress+0x264>)
 800193a:	f7fe fe5d 	bl	80005f8 <__aeabi_dmul>
 800193e:	4606      	mov	r6, r0
 8001940:	460f      	mov	r7, r1
 8001942:	4b81      	ldr	r3, [pc, #516]	; (8001b48 <bmp180_getpress+0x268>)
 8001944:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001948:	4420      	add	r0, r4
 800194a:	f7fe fdeb 	bl	8000524 <__aeabi_i2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4630      	mov	r0, r6
 8001954:	4639      	mov	r1, r7
 8001956:	f7fe ff79 	bl	800084c <__aeabi_ddiv>
 800195a:	f7ff f8fd 	bl	8000b58 <__aeabi_d2iz>
 800195e:	f8df b220 	ldr.w	fp, [pc, #544]	; 8001b80 <bmp180_getpress+0x2a0>
 8001962:	f8cb 0000 	str.w	r0, [fp]
	B5 = X1+X2;
 8001966:	4404      	add	r4, r0
 8001968:	4b78      	ldr	r3, [pc, #480]	; (8001b4c <bmp180_getpress+0x26c>)
 800196a:	601c      	str	r4, [r3, #0]
	B6 = B5-4000;
 800196c:	f5a4 687a 	sub.w	r8, r4, #4000	; 0xfa0
 8001970:	4b77      	ldr	r3, [pc, #476]	; (8001b50 <bmp180_getpress+0x270>)
 8001972:	f8c3 8000 	str.w	r8, [r3]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001976:	fb08 f008 	mul.w	r0, r8, r8
 800197a:	f7fe fdd3 	bl	8000524 <__aeabi_i2d>
 800197e:	2200      	movs	r2, #0
 8001980:	4b74      	ldr	r3, [pc, #464]	; (8001b54 <bmp180_getpress+0x274>)
 8001982:	f7fe fe39 	bl	80005f8 <__aeabi_dmul>
 8001986:	4606      	mov	r6, r0
 8001988:	460f      	mov	r7, r1
 800198a:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <bmp180_getpress+0x278>)
 800198c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001990:	f7fe fdc8 	bl	8000524 <__aeabi_i2d>
 8001994:	4632      	mov	r2, r6
 8001996:	463b      	mov	r3, r7
 8001998:	f7fe fe2e 	bl	80005f8 <__aeabi_dmul>
 800199c:	2200      	movs	r2, #0
 800199e:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80019a2:	f7fe fe29 	bl	80005f8 <__aeabi_dmul>
 80019a6:	f7ff f8d7 	bl	8000b58 <__aeabi_d2iz>
 80019aa:	4604      	mov	r4, r0
 80019ac:	f8ca 0000 	str.w	r0, [sl]
	X2 = AC2*B6/(pow(2,11));
 80019b0:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <bmp180_getpress+0x27c>)
 80019b2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80019b6:	fb08 f000 	mul.w	r0, r8, r0
 80019ba:	f7fe fdb3 	bl	8000524 <__aeabi_i2d>
 80019be:	2200      	movs	r2, #0
 80019c0:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80019c4:	f7fe fe18 	bl	80005f8 <__aeabi_dmul>
 80019c8:	f7ff f8c6 	bl	8000b58 <__aeabi_d2iz>
 80019cc:	f8cb 0000 	str.w	r0, [fp]
	X3 = X1+X2;
 80019d0:	4404      	add	r4, r0
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <bmp180_getpress+0x280>)
 80019d4:	601c      	str	r4, [r3, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80019d6:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <bmp180_getpress+0x284>)
 80019d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019dc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80019e0:	fa04 f409 	lsl.w	r4, r4, r9
 80019e4:	3402      	adds	r4, #2
 80019e6:	f100 809b 	bmi.w	8001b20 <bmp180_getpress+0x240>
 80019ea:	10a4      	asrs	r4, r4, #2
 80019ec:	4b5e      	ldr	r3, [pc, #376]	; (8001b68 <bmp180_getpress+0x288>)
 80019ee:	601c      	str	r4, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80019f0:	4b5e      	ldr	r3, [pc, #376]	; (8001b6c <bmp180_getpress+0x28c>)
 80019f2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80019f6:	fb08 f000 	mul.w	r0, r8, r0
 80019fa:	f7fe fd93 	bl	8000524 <__aeabi_i2d>
 80019fe:	2200      	movs	r2, #0
 8001a00:	4b5b      	ldr	r3, [pc, #364]	; (8001b70 <bmp180_getpress+0x290>)
 8001a02:	f7fe fdf9 	bl	80005f8 <__aeabi_dmul>
 8001a06:	f7ff f8a7 	bl	8000b58 <__aeabi_d2iz>
 8001a0a:	4680      	mov	r8, r0
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <bmp180_getpress+0x294>)
 8001a0e:	6018      	str	r0, [r3, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <bmp180_getpress+0x298>)
 8001a12:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001a16:	f7fe fd85 	bl	8000524 <__aeabi_i2d>
 8001a1a:	4632      	mov	r2, r6
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	f7fe fdeb 	bl	80005f8 <__aeabi_dmul>
 8001a22:	2200      	movs	r2, #0
 8001a24:	4b55      	ldr	r3, [pc, #340]	; (8001b7c <bmp180_getpress+0x29c>)
 8001a26:	f7fe fde7 	bl	80005f8 <__aeabi_dmul>
 8001a2a:	f7ff f895 	bl	8000b58 <__aeabi_d2iz>
 8001a2e:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <bmp180_getpress+0x2a0>)
 8001a30:	6018      	str	r0, [r3, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001a32:	4440      	add	r0, r8
 8001a34:	3002      	adds	r0, #2
 8001a36:	f7fe fd75 	bl	8000524 <__aeabi_i2d>
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <bmp180_getpress+0x2a4>)
 8001a3e:	f7fe fddb 	bl	80005f8 <__aeabi_dmul>
 8001a42:	f7ff f889 	bl	8000b58 <__aeabi_d2iz>
 8001a46:	4b46      	ldr	r3, [pc, #280]	; (8001b60 <bmp180_getpress+0x280>)
 8001a48:	6018      	str	r0, [r3, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001a4a:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <bmp180_getpress+0x2a8>)
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	fb03 f000 	mul.w	r0, r3, r0
 8001a56:	f7fe fd55 	bl	8000504 <__aeabi_ui2d>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001a60:	f7fe fdca 	bl	80005f8 <__aeabi_dmul>
 8001a64:	f7ff f8a0 	bl	8000ba8 <__aeabi_d2uiz>
 8001a68:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <bmp180_getpress+0x2ac>)
 8001a6a:	6018      	str	r0, [r3, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001a6c:	1b2d      	subs	r5, r5, r4
 8001a6e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001a72:	fa43 f309 	asr.w	r3, r3, r9
 8001a76:	fb03 f505 	mul.w	r5, r3, r5
 8001a7a:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <bmp180_getpress+0x2b0>)
 8001a7c:	601d      	str	r5, [r3, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001a7e:	2d00      	cmp	r5, #0
 8001a80:	db50      	blt.n	8001b24 <bmp180_getpress+0x244>
 8001a82:	006d      	lsls	r5, r5, #1
 8001a84:	fbb5 f0f0 	udiv	r0, r5, r0
 8001a88:	4b42      	ldr	r3, [pc, #264]	; (8001b94 <bmp180_getpress+0x2b4>)
 8001a8a:	6018      	str	r0, [r3, #0]
	else Press = (B7/B4)*2;
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 8001a8c:	4d41      	ldr	r5, [pc, #260]	; (8001b94 <bmp180_getpress+0x2b4>)
 8001a8e:	f8d5 8000 	ldr.w	r8, [r5]
 8001a92:	4640      	mov	r0, r8
 8001a94:	f7fe fd46 	bl	8000524 <__aeabi_i2d>
 8001a98:	4606      	mov	r6, r0
 8001a9a:	460f      	mov	r7, r1
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <bmp180_getpress+0x2b8>)
 8001aa0:	f7fe fdaa 	bl	80005f8 <__aeabi_dmul>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	f7fe fda6 	bl	80005f8 <__aeabi_dmul>
 8001aac:	f7ff f854 	bl	8000b58 <__aeabi_d2iz>
 8001ab0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001b74 <bmp180_getpress+0x294>
 8001ab4:	f8c9 0000 	str.w	r0, [r9]
	X1 = (X1*3038)/(pow(2,16));
 8001ab8:	f640 33de 	movw	r3, #3038	; 0xbde
 8001abc:	fb03 f000 	mul.w	r0, r3, r0
 8001ac0:	f7fe fd30 	bl	8000524 <__aeabi_i2d>
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <bmp180_getpress+0x29c>)
 8001ac8:	f7fe fd96 	bl	80005f8 <__aeabi_dmul>
 8001acc:	f7ff f844 	bl	8000b58 <__aeabi_d2iz>
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	f8c9 0000 	str.w	r0, [r9]
	X2 = (-7357*Press)/(pow(2,16));
 8001ad6:	4831      	ldr	r0, [pc, #196]	; (8001b9c <bmp180_getpress+0x2bc>)
 8001ad8:	fb00 f008 	mul.w	r0, r0, r8
 8001adc:	f7fe fd22 	bl	8000524 <__aeabi_i2d>
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <bmp180_getpress+0x29c>)
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	f7ff f836 	bl	8000b58 <__aeabi_d2iz>
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <bmp180_getpress+0x2a0>)
 8001aee:	6018      	str	r0, [r3, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 8001af0:	4420      	add	r0, r4
 8001af2:	f600 60cf 	addw	r0, r0, #3791	; 0xecf
 8001af6:	f7fe fd15 	bl	8000524 <__aeabi_i2d>
 8001afa:	2200      	movs	r2, #0
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <bmp180_getpress+0x2c0>)
 8001afe:	f7fe fd7b 	bl	80005f8 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4630      	mov	r0, r6
 8001b08:	4639      	mov	r1, r7
 8001b0a:	f7fe fbbf 	bl	800028c <__adddf3>
 8001b0e:	f7ff f823 	bl	8000b58 <__aeabi_d2iz>
 8001b12:	6028      	str	r0, [r5, #0]

	return Press;
}
 8001b14:	ee07 0a90 	vmov	s15, r0
 8001b18:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8001b1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001b20:	3403      	adds	r4, #3
 8001b22:	e762      	b.n	80019ea <bmp180_getpress+0x10a>
	else Press = (B7/B4)*2;
 8001b24:	fbb5 f5f0 	udiv	r5, r5, r0
 8001b28:	006d      	lsls	r5, r5, #1
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <bmp180_getpress+0x2b4>)
 8001b2c:	601d      	str	r5, [r3, #0]
 8001b2e:	e7ad      	b.n	8001a8c <bmp180_getpress+0x1ac>
 8001b30:	20000568 	.word	0x20000568
 8001b34:	20000542 	.word	0x20000542
 8001b38:	2000056c 	.word	0x2000056c
 8001b3c:	20000540 	.word	0x20000540
 8001b40:	2000055e 	.word	0x2000055e
 8001b44:	40a00000 	.word	0x40a00000
 8001b48:	20000560 	.word	0x20000560
 8001b4c:	20000550 	.word	0x20000550
 8001b50:	20000554 	.word	0x20000554
 8001b54:	3f300000 	.word	0x3f300000
 8001b58:	20000546 	.word	0x20000546
 8001b5c:	2000053a 	.word	0x2000053a
 8001b60:	20000578 	.word	0x20000578
 8001b64:	20000538 	.word	0x20000538
 8001b68:	20000548 	.word	0x20000548
 8001b6c:	2000053c 	.word	0x2000053c
 8001b70:	3f200000 	.word	0x3f200000
 8001b74:	20000570 	.word	0x20000570
 8001b78:	20000544 	.word	0x20000544
 8001b7c:	3ef00000 	.word	0x3ef00000
 8001b80:	20000574 	.word	0x20000574
 8001b84:	3fd00000 	.word	0x3fd00000
 8001b88:	2000053e 	.word	0x2000053e
 8001b8c:	2000054c 	.word	0x2000054c
 8001b90:	20000558 	.word	0x20000558
 8001b94:	20000564 	.word	0x20000564
 8001b98:	3f700000 	.word	0x3f700000
 8001b9c:	ffffe343 	.word	0xffffe343
 8001ba0:	3fb00000 	.word	0x3fb00000
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <bmp180_getalt>:


float bmp180_getalt (int oss)	// Расчет барометрической высоты
{
 8001ba8:	b508      	push	{r3, lr}
	bmp180_getpress (oss);
 8001baa:	f7ff fe99 	bl	80018e0 <bmp180_getpress>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <bmp180_getalt+0x60>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001c0c <bmp180_getalt+0x64>
 8001bbc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8001bc0:	ee17 0a90 	vmov	r0, s15
 8001bc4:	f7fe fcc0 	bl	8000548 <__aeabi_f2d>
 8001bc8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8001bf8 <bmp180_getalt+0x50>
 8001bcc:	ec41 0b10 	vmov	d0, r0, r1
 8001bd0:	f008 fd2a 	bl	800a628 <pow>
 8001bd4:	ec53 2b10 	vmov	r2, r3, d0
 8001bd8:	2000      	movs	r0, #0
 8001bda:	490d      	ldr	r1, [pc, #52]	; (8001c10 <bmp180_getalt+0x68>)
 8001bdc:	f7fe fb54 	bl	8000288 <__aeabi_dsub>
 8001be0:	a307      	add	r3, pc, #28	; (adr r3, 8001c00 <bmp180_getalt+0x58>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fd07 	bl	80005f8 <__aeabi_dmul>
 8001bea:	f7fe fffd 	bl	8000be8 <__aeabi_d2f>
}
 8001bee:	ee00 0a10 	vmov	s0, r0
 8001bf2:	bd08      	pop	{r3, pc}
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	ccd745e4 	.word	0xccd745e4
 8001bfc:	3fc85b95 	.word	0x3fc85b95
 8001c00:	00000000 	.word	0x00000000
 8001c04:	40e5a540 	.word	0x40e5a540
 8001c08:	20000564 	.word	0x20000564
 8001c0c:	47c5e680 	.word	0x47c5e680
 8001c10:	3ff00000 	.word	0x3ff00000

08001c14 <bmp180_init>:

void bmp180_init (void)			// Инициализация датчика
{
 8001c14:	b508      	push	{r3, lr}
	read_calibration_data();
 8001c16:	f7ff fd89 	bl	800172c <read_calibration_data>
}
 8001c1a:	bd08      	pop	{r3, pc}

08001c1c <hmc5883_init>:
uint8_t connected1=0;
uint8_t configA, configB, configData;
uint8_t data1[6];
int16_t mag;
void hmc5883_init() // Инициализация датчика
{
 8001c1c:	b500      	push	{lr}
 8001c1e:	b085      	sub	sp, #20
  	HAL_StatusTypeDef ret1 = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADRESS1 <<1) + 0, 100, 100);
 8001c20:	2364      	movs	r3, #100	; 0x64
 8001c22:	461a      	mov	r2, r3
 8001c24:	211a      	movs	r1, #26
 8001c26:	4827      	ldr	r0, [pc, #156]	; (8001cc4 <hmc5883_init+0xa8>)
 8001c28:	f004 fa3e 	bl	80060a8 <HAL_I2C_IsDeviceReady>
    if (ret1 == HAL_OK)
 8001c2c:	2800      	cmp	r0, #0
 8001c2e:	d138      	bne.n	8001ca2 <hmc5883_init+0x86>
    {
  	  connected1=1;
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <hmc5883_init+0xac>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	701a      	strb	r2, [r3, #0]
    else
    {
  	  connected1=2;
    }

    temp_data1 = HERNYA_9;
 8001c36:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <hmc5883_init+0xb0>)
 8001c38:	2309      	movs	r3, #9
 8001c3a:	7013      	strb	r3, [r2, #0]
    ret1 = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS1 <<1), HERNYA_Z9, 1, &temp_data1, 1, 100);
 8001c3c:	2364      	movs	r3, #100	; 0x64
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	2301      	movs	r3, #1
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	2259      	movs	r2, #89	; 0x59
 8001c48:	211a      	movs	r1, #26
 8001c4a:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <hmc5883_init+0xa8>)
 8001c4c:	f004 f87f 	bl	8005d4e <HAL_I2C_Mem_Write>
    if (ret1 == HAL_OK)
 8001c50:	bb58      	cbnz	r0, 8001caa <hmc5883_init+0x8e>
    {
  	  configA=1;
 8001c52:	4b1f      	ldr	r3, [pc, #124]	; (8001cd0 <hmc5883_init+0xb4>)
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
    else
    {
  	  configA=2;
    }

    temp_data1 = HERNYA_10;
 8001c58:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <hmc5883_init+0xb0>)
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	7013      	strb	r3, [r2, #0]
    ret1 = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS1 <<1), HERNYA_Z10, 1, &temp_data1, 1, 100);
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	9302      	str	r3, [sp, #8]
 8001c62:	2301      	movs	r3, #1
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	9200      	str	r2, [sp, #0]
 8001c68:	2241      	movs	r2, #65	; 0x41
 8001c6a:	211a      	movs	r1, #26
 8001c6c:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <hmc5883_init+0xa8>)
 8001c6e:	f004 f86e 	bl	8005d4e <HAL_I2C_Mem_Write>
    if (ret1 == HAL_OK)
 8001c72:	b9f0      	cbnz	r0, 8001cb2 <hmc5883_init+0x96>
    {
  	  configB=1;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <hmc5883_init+0xb8>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
    else
    {
  	  configB=2;
    }

    temp_data1 = HERNYA_11;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <hmc5883_init+0xb0>)
 8001c7c:	220b      	movs	r2, #11
 8001c7e:	701a      	strb	r2, [r3, #0]
    ret1 = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS1 <<1), HERNYA_Z11, 1, &temp_data1, 1, 100);
 8001c80:	2264      	movs	r2, #100	; 0x64
 8001c82:	9202      	str	r2, [sp, #8]
 8001c84:	2201      	movs	r2, #1
 8001c86:	9201      	str	r2, [sp, #4]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	211a      	movs	r1, #26
 8001c8e:	480d      	ldr	r0, [pc, #52]	; (8001cc4 <hmc5883_init+0xa8>)
 8001c90:	f004 f85d 	bl	8005d4e <HAL_I2C_Mem_Write>
    if (ret1 == HAL_OK)
 8001c94:	b988      	cbnz	r0, 8001cba <hmc5883_init+0x9e>
    {
  	  configData=1;
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <hmc5883_init+0xbc>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
  	  configData=2;
    }
}
 8001c9c:	b005      	add	sp, #20
 8001c9e:	f85d fb04 	ldr.w	pc, [sp], #4
  	  connected1=2;
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <hmc5883_init+0xac>)
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e7c5      	b.n	8001c36 <hmc5883_init+0x1a>
  	  configA=2;
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <hmc5883_init+0xb4>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	e7d2      	b.n	8001c58 <hmc5883_init+0x3c>
  	  configB=2;
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <hmc5883_init+0xb8>)
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	701a      	strb	r2, [r3, #0]
 8001cb8:	e7df      	b.n	8001c7a <hmc5883_init+0x5e>
  	  configData=2;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <hmc5883_init+0xbc>)
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	701a      	strb	r2, [r3, #0]
}
 8001cc0:	e7ec      	b.n	8001c9c <hmc5883_init+0x80>
 8001cc2:	bf00      	nop
 8001cc4:	2000083c 	.word	0x2000083c
 8001cc8:	2000057f 	.word	0x2000057f
 8001ccc:	20000588 	.word	0x20000588
 8001cd0:	2000057c 	.word	0x2000057c
 8001cd4:	2000057d 	.word	0x2000057d
 8001cd8:	2000057e 	.word	0x2000057e
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <hmc5883_read>:

void hmc5883_read() // Чтение данных с датчика
{
 8001ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ce4:	ed2d 8b02 	vpush	{d8}
 8001ce8:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS1 <<1) + 1, HERNYA_CHITAT, 1, data1, 6, 100);
 8001cea:	2364      	movs	r3, #100	; 0x64
 8001cec:	9302      	str	r3, [sp, #8]
 8001cee:	2306      	movs	r3, #6
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	4c4b      	ldr	r4, [pc, #300]	; (8001e20 <hmc5883_read+0x140>)
 8001cf4:	9400      	str	r4, [sp, #0]
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	211b      	movs	r1, #27
 8001cfc:	4849      	ldr	r0, [pc, #292]	; (8001e24 <hmc5883_read+0x144>)
 8001cfe:	f004 f8fb 	bl	8005ef8 <HAL_I2C_Mem_Read>
	x_magRAW = (((int16_t)data1[0] << 8) + data1[1]);
 8001d02:	7823      	ldrb	r3, [r4, #0]
 8001d04:	7860      	ldrb	r0, [r4, #1]
 8001d06:	eb00 2003 	add.w	r0, r0, r3, lsl #8
 8001d0a:	b200      	sxth	r0, r0
 8001d0c:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <hmc5883_read+0x148>)
 8001d0e:	8018      	strh	r0, [r3, #0]
	y_magRAW = (((int16_t)data1[2] << 8) + data1[3]);
 8001d10:	78a3      	ldrb	r3, [r4, #2]
 8001d12:	78e5      	ldrb	r5, [r4, #3]
 8001d14:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8001d18:	b22d      	sxth	r5, r5
 8001d1a:	4b44      	ldr	r3, [pc, #272]	; (8001e2c <hmc5883_read+0x14c>)
 8001d1c:	801d      	strh	r5, [r3, #0]
	z_magRAW = (((int16_t)data1[4] << 8) + data1[5]);
 8001d1e:	7923      	ldrb	r3, [r4, #4]
 8001d20:	7964      	ldrb	r4, [r4, #5]
 8001d22:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8001d26:	b224      	sxth	r4, r4
 8001d28:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <hmc5883_read+0x150>)
 8001d2a:	801c      	strh	r4, [r3, #0]

	mag = sqrt(pow(x_magRAW,2)+pow(y_magRAW,2)+pow(z_magRAW,2));
 8001d2c:	f7fe fbfa 	bl	8000524 <__aeabi_i2d>
 8001d30:	4682      	mov	sl, r0
 8001d32:	468b      	mov	fp, r1
 8001d34:	ed9f 8b36 	vldr	d8, [pc, #216]	; 8001e10 <hmc5883_read+0x130>
 8001d38:	eeb0 1a48 	vmov.f32	s2, s16
 8001d3c:	eef0 1a68 	vmov.f32	s3, s17
 8001d40:	ec4b ab10 	vmov	d0, sl, fp
 8001d44:	f008 fc70 	bl	800a628 <pow>
 8001d48:	ec57 6b10 	vmov	r6, r7, d0
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	f7fe fbe9 	bl	8000524 <__aeabi_i2d>
 8001d52:	4680      	mov	r8, r0
 8001d54:	4689      	mov	r9, r1
 8001d56:	eeb0 1a48 	vmov.f32	s2, s16
 8001d5a:	eef0 1a68 	vmov.f32	s3, s17
 8001d5e:	ec49 8b10 	vmov	d0, r8, r9
 8001d62:	f008 fc61 	bl	800a628 <pow>
 8001d66:	ec53 2b10 	vmov	r2, r3, d0
 8001d6a:	4630      	mov	r0, r6
 8001d6c:	4639      	mov	r1, r7
 8001d6e:	f7fe fa8d 	bl	800028c <__adddf3>
 8001d72:	4606      	mov	r6, r0
 8001d74:	460f      	mov	r7, r1
 8001d76:	4620      	mov	r0, r4
 8001d78:	f7fe fbd4 	bl	8000524 <__aeabi_i2d>
 8001d7c:	4604      	mov	r4, r0
 8001d7e:	460d      	mov	r5, r1
 8001d80:	eeb0 1a48 	vmov.f32	s2, s16
 8001d84:	eef0 1a68 	vmov.f32	s3, s17
 8001d88:	ec45 4b10 	vmov	d0, r4, r5
 8001d8c:	f008 fc4c 	bl	800a628 <pow>
 8001d90:	ec53 2b10 	vmov	r2, r3, d0
 8001d94:	4630      	mov	r0, r6
 8001d96:	4639      	mov	r1, r7
 8001d98:	f7fe fa78 	bl	800028c <__adddf3>
 8001d9c:	ec41 0b10 	vmov	d0, r0, r1
 8001da0:	f008 fcb2 	bl	800a708 <sqrt>
 8001da4:	ec51 0b10 	vmov	r0, r1, d0
 8001da8:	f7fe fed6 	bl	8000b58 <__aeabi_d2iz>
 8001dac:	b200      	sxth	r0, r0
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <hmc5883_read+0x154>)
 8001db0:	8018      	strh	r0, [r3, #0]
	total_mag = mag/1370.0;
 8001db2:	f7fe fbb7 	bl	8000524 <__aeabi_i2d>
 8001db6:	a318      	add	r3, pc, #96	; (adr r3, 8001e18 <hmc5883_read+0x138>)
 8001db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbc:	f7fe fd46 	bl	800084c <__aeabi_ddiv>
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <hmc5883_read+0x158>)
 8001dc2:	e9c3 0100 	strd	r0, r1, [r3]
	x_mag = x_magRAW/1370.0;
 8001dc6:	a314      	add	r3, pc, #80	; (adr r3, 8001e18 <hmc5883_read+0x138>)
 8001dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dcc:	4650      	mov	r0, sl
 8001dce:	4659      	mov	r1, fp
 8001dd0:	f7fe fd3c 	bl	800084c <__aeabi_ddiv>
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <hmc5883_read+0x15c>)
 8001dd6:	e9c3 0100 	strd	r0, r1, [r3]
	y_mag = y_magRAW/1370.0;
 8001dda:	a30f      	add	r3, pc, #60	; (adr r3, 8001e18 <hmc5883_read+0x138>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	4640      	mov	r0, r8
 8001de2:	4649      	mov	r1, r9
 8001de4:	f7fe fd32 	bl	800084c <__aeabi_ddiv>
 8001de8:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <hmc5883_read+0x160>)
 8001dea:	e9c3 0100 	strd	r0, r1, [r3]
	z_mag = z_magRAW/1370.0;
 8001dee:	a30a      	add	r3, pc, #40	; (adr r3, 8001e18 <hmc5883_read+0x138>)
 8001df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df4:	4620      	mov	r0, r4
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7fe fd28 	bl	800084c <__aeabi_ddiv>
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <hmc5883_read+0x164>)
 8001dfe:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001e02:	b005      	add	sp, #20
 8001e04:	ecbd 8b02 	vpop	{d8}
 8001e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e0c:	f3af 8000 	nop.w
 8001e10:	00000000 	.word	0x00000000
 8001e14:	40000000 	.word	0x40000000
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40956800 	.word	0x40956800
 8001e20:	20000580 	.word	0x20000580
 8001e24:	2000083c 	.word	0x2000083c
 8001e28:	200005a0 	.word	0x200005a0
 8001e2c:	200005b0 	.word	0x200005b0
 8001e30:	200005c0 	.word	0x200005c0
 8001e34:	20000586 	.word	0x20000586
 8001e38:	20000590 	.word	0x20000590
 8001e3c:	20000598 	.word	0x20000598
 8001e40:	200005a8 	.word	0x200005a8
 8001e44:	200005b8 	.word	0x200005b8

08001e48 <hmc5883_getYaw>:

double hmc5883_getYaw(double Pitch, double Roll) // Получение рыскания
{
 8001e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e4c:	ed2d 8b0a 	vpush	{d8-d12}
 8001e50:	b095      	sub	sp, #84	; 0x54
 8001e52:	eeb0 8a40 	vmov.f32	s16, s0
 8001e56:	eef0 8a60 	vmov.f32	s17, s1
 8001e5a:	eeb0 9a41 	vmov.f32	s18, s2
 8001e5e:	eef0 9a61 	vmov.f32	s19, s3
	VECTOR ye, ze;
	double Yaw = 0, sYaw, cYaw, zeM;

	hmc5883_read();
 8001e62:	f7ff ff3d 	bl	8001ce0 <hmc5883_read>

	ye.x = sin(Pitch);
 8001e66:	eeb0 0a48 	vmov.f32	s0, s16
 8001e6a:	eef0 0a68 	vmov.f32	s1, s17
 8001e6e:	f008 fcd7 	bl	800a820 <sin>
 8001e72:	ec55 4b10 	vmov	r4, r5, d0
 8001e76:	ed8d 0b0e 	vstr	d0, [sp, #56]	; 0x38
	ye.y = cos(Pitch) * cos(Roll);
 8001e7a:	eeb0 0a48 	vmov.f32	s0, s16
 8001e7e:	eef0 0a68 	vmov.f32	s1, s17
 8001e82:	f008 fc6d 	bl	800a760 <cos>
 8001e86:	ec5b ab10 	vmov	sl, fp, d0
 8001e8a:	eeb0 0a49 	vmov.f32	s0, s18
 8001e8e:	eef0 0a69 	vmov.f32	s1, s19
 8001e92:	f008 fc65 	bl	800a760 <cos>
 8001e96:	ec53 2b10 	vmov	r2, r3, d0
 8001e9a:	ed8d 0b02 	vstr	d0, [sp, #8]
 8001e9e:	4650      	mov	r0, sl
 8001ea0:	4659      	mov	r1, fp
 8001ea2:	f7fe fba9 	bl	80005f8 <__aeabi_dmul>
 8001ea6:	4606      	mov	r6, r0
 8001ea8:	460f      	mov	r7, r1
 8001eaa:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
	ye.z = -cos(Pitch) * sin(Roll);
 8001eae:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001eb2:	f10b 4900 	add.w	r9, fp, #2147483648	; 0x80000000
 8001eb6:	eeb0 0a49 	vmov.f32	s0, s18
 8001eba:	eef0 0a69 	vmov.f32	s1, s19
 8001ebe:	f008 fcaf 	bl	800a820 <sin>
 8001ec2:	ec53 2b10 	vmov	r2, r3, d0
 8001ec6:	ed8d 0b00 	vstr	d0, [sp]
 8001eca:	4650      	mov	r0, sl
 8001ecc:	4649      	mov	r1, r9
 8001ece:	f7fe fb93 	bl	80005f8 <__aeabi_dmul>
 8001ed2:	4682      	mov	sl, r0
 8001ed4:	468b      	mov	fp, r1
 8001ed6:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48

	ze.x = ye.z * y_mag - ye.y * z_mag;
 8001eda:	4b93      	ldr	r3, [pc, #588]	; (8002128 <hmc5883_getYaw+0x2e0>)
 8001edc:	ed93 7b00 	vldr	d7, [r3]
 8001ee0:	eeb0 ba47 	vmov.f32	s22, s14
 8001ee4:	eef0 ba67 	vmov.f32	s23, s15
 8001ee8:	ec53 2b17 	vmov	r2, r3, d7
 8001eec:	f7fe fb84 	bl	80005f8 <__aeabi_dmul>
 8001ef0:	4680      	mov	r8, r0
 8001ef2:	4689      	mov	r9, r1
 8001ef4:	4b8d      	ldr	r3, [pc, #564]	; (800212c <hmc5883_getYaw+0x2e4>)
 8001ef6:	ed93 6b00 	vldr	d6, [r3]
 8001efa:	eeb0 aa46 	vmov.f32	s20, s12
 8001efe:	eef0 aa66 	vmov.f32	s21, s13
 8001f02:	ec53 2b16 	vmov	r2, r3, d6
 8001f06:	4630      	mov	r0, r6
 8001f08:	4639      	mov	r1, r7
 8001f0a:	f7fe fb75 	bl	80005f8 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4640      	mov	r0, r8
 8001f14:	4649      	mov	r1, r9
 8001f16:	f7fe f9b7 	bl	8000288 <__aeabi_dsub>
 8001f1a:	ec41 0b19 	vmov	d9, r0, r1
 8001f1e:	e9cd 0108 	strd	r0, r1, [sp, #32]
	ze.y = -ye.z * x_mag + ye.x * z_mag;
 8001f22:	4650      	mov	r0, sl
 8001f24:	f10b 4100 	add.w	r1, fp, #2147483648	; 0x80000000
 8001f28:	4b81      	ldr	r3, [pc, #516]	; (8002130 <hmc5883_getYaw+0x2e8>)
 8001f2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001f2e:	4642      	mov	r2, r8
 8001f30:	464b      	mov	r3, r9
 8001f32:	f7fe fb61 	bl	80005f8 <__aeabi_dmul>
 8001f36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001f3a:	ec53 2b1a 	vmov	r2, r3, d10
 8001f3e:	4620      	mov	r0, r4
 8001f40:	4629      	mov	r1, r5
 8001f42:	f7fe fb59 	bl	80005f8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8001f4e:	f7fe f99d 	bl	800028c <__adddf3>
 8001f52:	ec41 0b1a 	vmov	d10, r0, r1
 8001f56:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	ze.z = ye.y * x_mag - ye.x * y_mag;
 8001f5a:	4642      	mov	r2, r8
 8001f5c:	464b      	mov	r3, r9
 8001f5e:	4630      	mov	r0, r6
 8001f60:	4639      	mov	r1, r7
 8001f62:	f7fe fb49 	bl	80005f8 <__aeabi_dmul>
 8001f66:	4680      	mov	r8, r0
 8001f68:	4689      	mov	r9, r1
 8001f6a:	ec53 2b1b 	vmov	r2, r3, d11
 8001f6e:	4620      	mov	r0, r4
 8001f70:	4629      	mov	r1, r5
 8001f72:	f7fe fb41 	bl	80005f8 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4640      	mov	r0, r8
 8001f7c:	4649      	mov	r1, r9
 8001f7e:	f7fe f983 	bl	8000288 <__aeabi_dsub>
 8001f82:	ec41 0b1b 	vmov	d11, r0, r1
 8001f86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30

	zeM = sqrt(pow(ze.x, 2) + pow(ze.y, 2) + pow(ze.z, 2));
 8001f8a:	ed9f cb63 	vldr	d12, [pc, #396]	; 8002118 <hmc5883_getYaw+0x2d0>
 8001f8e:	eeb0 1a4c 	vmov.f32	s2, s24
 8001f92:	eef0 1a6c 	vmov.f32	s3, s25
 8001f96:	eeb0 0a49 	vmov.f32	s0, s18
 8001f9a:	eef0 0a69 	vmov.f32	s1, s19
 8001f9e:	f008 fb43 	bl	800a628 <pow>
 8001fa2:	ec59 8b10 	vmov	r8, r9, d0
 8001fa6:	eeb0 1a4c 	vmov.f32	s2, s24
 8001faa:	eef0 1a6c 	vmov.f32	s3, s25
 8001fae:	eeb0 0a4a 	vmov.f32	s0, s20
 8001fb2:	eef0 0a6a 	vmov.f32	s1, s21
 8001fb6:	f008 fb37 	bl	800a628 <pow>
 8001fba:	ec53 2b10 	vmov	r2, r3, d0
 8001fbe:	4640      	mov	r0, r8
 8001fc0:	4649      	mov	r1, r9
 8001fc2:	f7fe f963 	bl	800028c <__adddf3>
 8001fc6:	4680      	mov	r8, r0
 8001fc8:	4689      	mov	r9, r1
 8001fca:	eeb0 1a4c 	vmov.f32	s2, s24
 8001fce:	eef0 1a6c 	vmov.f32	s3, s25
 8001fd2:	eeb0 0a4b 	vmov.f32	s0, s22
 8001fd6:	eef0 0a6b 	vmov.f32	s1, s23
 8001fda:	f008 fb25 	bl	800a628 <pow>
 8001fde:	ec53 2b10 	vmov	r2, r3, d0
 8001fe2:	4640      	mov	r0, r8
 8001fe4:	4649      	mov	r1, r9
 8001fe6:	f7fe f951 	bl	800028c <__adddf3>
 8001fea:	ec41 0b10 	vmov	d0, r0, r1
 8001fee:	f008 fb8b 	bl	800a708 <sqrt>
 8001ff2:	ec59 8b10 	vmov	r8, r9, d0
	ze.x = ye.x / zeM;
 8001ff6:	ee10 2a10 	vmov	r2, s0
 8001ffa:	464b      	mov	r3, r9
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe fc24 	bl	800084c <__aeabi_ddiv>
 8002004:	ec41 0b19 	vmov	d9, r0, r1
 8002008:	e9cd 0108 	strd	r0, r1, [sp, #32]
	ze.y = -ye.y / zeM;
 800200c:	4630      	mov	r0, r6
 800200e:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8002012:	4642      	mov	r2, r8
 8002014:	464b      	mov	r3, r9
 8002016:	f7fe fc19 	bl	800084c <__aeabi_ddiv>
 800201a:	ec41 0b1a 	vmov	d10, r0, r1
 800201e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	ze.z = ye.z / zeM;
 8002022:	4642      	mov	r2, r8
 8002024:	464b      	mov	r3, r9
 8002026:	4650      	mov	r0, sl
 8002028:	4659      	mov	r1, fp
 800202a:	f7fe fc0f 	bl	800084c <__aeabi_ddiv>
 800202e:	4680      	mov	r8, r0
 8002030:	4689      	mov	r9, r1
 8002032:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30

	(Pitch != 0) ? (sYaw = -ze.x / cos(Pitch)) : (sYaw = 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2300      	movs	r3, #0
 800203a:	ec51 0b18 	vmov	r0, r1, d8
 800203e:	f7fe fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8002042:	2800      	cmp	r0, #0
 8002044:	d13c      	bne.n	80020c0 <hmc5883_getYaw+0x278>
 8002046:	ee19 0a10 	vmov	r0, s18
 800204a:	ee19 3a90 	vmov	r3, s19
 800204e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002052:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002056:	f7fe fbf9 	bl	800084c <__aeabi_ddiv>
 800205a:	4606      	mov	r6, r0
 800205c:	460f      	mov	r7, r1

	(sin(Roll) == 0) ? (cYaw = (ze.z + sin(Roll) * sin(Pitch) * sYaw) / cos(Roll)) : (cYaw = (ze.y - cos(Roll) * sin(Pitch) * sYaw) / sin(Roll));
 800205e:	2200      	movs	r2, #0
 8002060:	2300      	movs	r3, #0
 8002062:	e9dd ab00 	ldrd	sl, fp, [sp]
 8002066:	4650      	mov	r0, sl
 8002068:	4659      	mov	r1, fp
 800206a:	f7fe fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800206e:	b350      	cbz	r0, 80020c6 <hmc5883_getYaw+0x27e>
 8002070:	4652      	mov	r2, sl
 8002072:	465b      	mov	r3, fp
 8002074:	4620      	mov	r0, r4
 8002076:	4629      	mov	r1, r5
 8002078:	f7fe fabe 	bl	80005f8 <__aeabi_dmul>
 800207c:	4632      	mov	r2, r6
 800207e:	463b      	mov	r3, r7
 8002080:	f7fe faba 	bl	80005f8 <__aeabi_dmul>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4640      	mov	r0, r8
 800208a:	4649      	mov	r1, r9
 800208c:	f7fe f8fe 	bl	800028c <__adddf3>
 8002090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002094:	f7fe fbda 	bl	800084c <__aeabi_ddiv>
 8002098:	ec41 0b18 	vmov	d8, r0, r1

	(sYaw >= 0) ? (Yaw = acos(cYaw)) : (Yaw = M_PI + acos(cYaw));
 800209c:	2200      	movs	r2, #0
 800209e:	2300      	movs	r3, #0
 80020a0:	4630      	mov	r0, r6
 80020a2:	4639      	mov	r1, r7
 80020a4:	f7fe fd2e 	bl	8000b04 <__aeabi_dcmpge>
 80020a8:	b320      	cbz	r0, 80020f4 <hmc5883_getYaw+0x2ac>
 80020aa:	eeb0 0a48 	vmov.f32	s0, s16
 80020ae:	eef0 0a68 	vmov.f32	s1, s17
 80020b2:	f008 fa51 	bl	800a558 <acos>

	return Yaw;
}
 80020b6:	b015      	add	sp, #84	; 0x54
 80020b8:	ecbd 8b0a 	vpop	{d8-d12}
 80020bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	(Pitch != 0) ? (sYaw = -ze.x / cos(Pitch)) : (sYaw = 0);
 80020c0:	2600      	movs	r6, #0
 80020c2:	2700      	movs	r7, #0
 80020c4:	e7cb      	b.n	800205e <hmc5883_getYaw+0x216>
	(sin(Roll) == 0) ? (cYaw = (ze.z + sin(Roll) * sin(Pitch) * sYaw) / cos(Roll)) : (cYaw = (ze.y - cos(Roll) * sin(Pitch) * sYaw) / sin(Roll));
 80020c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80020ca:	4620      	mov	r0, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	f7fe fa93 	bl	80005f8 <__aeabi_dmul>
 80020d2:	4632      	mov	r2, r6
 80020d4:	463b      	mov	r3, r7
 80020d6:	f7fe fa8f 	bl	80005f8 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	ec51 0b1a 	vmov	r0, r1, d10
 80020e2:	f7fe f8d1 	bl	8000288 <__aeabi_dsub>
 80020e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80020ea:	f7fe fbaf 	bl	800084c <__aeabi_ddiv>
 80020ee:	ec41 0b18 	vmov	d8, r0, r1
 80020f2:	e7d3      	b.n	800209c <hmc5883_getYaw+0x254>
	(sYaw >= 0) ? (Yaw = acos(cYaw)) : (Yaw = M_PI + acos(cYaw));
 80020f4:	eeb0 0a48 	vmov.f32	s0, s16
 80020f8:	eef0 0a68 	vmov.f32	s1, s17
 80020fc:	f008 fa2c 	bl	800a558 <acos>
 8002100:	ec51 0b10 	vmov	r0, r1, d0
 8002104:	a306      	add	r3, pc, #24	; (adr r3, 8002120 <hmc5883_getYaw+0x2d8>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	f7fe f8bf 	bl	800028c <__adddf3>
 800210e:	ec41 0b10 	vmov	d0, r0, r1
	return Yaw;
 8002112:	e7d0      	b.n	80020b6 <hmc5883_getYaw+0x26e>
 8002114:	f3af 8000 	nop.w
 8002118:	00000000 	.word	0x00000000
 800211c:	40000000 	.word	0x40000000
 8002120:	54442d18 	.word	0x54442d18
 8002124:	400921fb 	.word	0x400921fb
 8002128:	200005a8 	.word	0x200005a8
 800212c:	200005b8 	.word	0x200005b8
 8002130:	20000598 	.word	0x20000598
 8002134:	00000000 	.word	0x00000000

08002138 <simpleKalmanX>:
float kalman_gain10, current_estimate10, last_estimate10, err_estimate10;
float kalman_gain11, current_estimate11, last_estimate11, err_estimate11;
float kalman_gain12, current_estimate12, last_estimate12, err_estimate12;


	  float simpleKalmanX(float newVal) {
 8002138:	b538      	push	{r3, r4, r5, lr}
 800213a:	ed2d 8b02 	vpush	{d8}
		  float err_measure = 346.0;  // примерный шум измерений
		  float q = 1.8;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate = err_measure;
 800213e:	4d1c      	ldr	r5, [pc, #112]	; (80021b0 <simpleKalmanX+0x78>)
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <simpleKalmanX+0x7c>)
 8002142:	602b      	str	r3, [r5, #0]
		  kalman_gain = (float)err_estimate / (err_estimate + err_measure);
 8002144:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <simpleKalmanX+0x80>)
 800214a:	ed83 7a00 	vstr	s14, [r3]
	   	  current_estimate = (float)last_estimate + (float)kalman_gain * (newVal - (float)last_estimate);
 800214e:	4c1b      	ldr	r4, [pc, #108]	; (80021bc <simpleKalmanX+0x84>)
 8002150:	edd4 7a00 	vldr	s15, [r4]
 8002154:	ee30 8a67 	vsub.f32	s16, s0, s15
 8002158:	ee28 8a07 	vmul.f32	s16, s16, s14
 800215c:	ee37 8a88 	vadd.f32	s16, s15, s16
 8002160:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <simpleKalmanX+0x88>)
 8002162:	ed83 8a00 	vstr	s16, [r3]
	   	  err_estimate =  (1.0 - kalman_gain) * err_estimate + fabs(last_estimate - current_estimate) * q;
 8002166:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800216a:	eef0 7ae7 	vabs.f32	s15, s15
 800216e:	ee17 0a90 	vmov	r0, s15
 8002172:	f7fe f9e9 	bl	8000548 <__aeabi_f2d>
 8002176:	a30a      	add	r3, pc, #40	; (adr r3, 80021a0 <simpleKalmanX+0x68>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fa3c 	bl	80005f8 <__aeabi_dmul>
 8002180:	a309      	add	r3, pc, #36	; (adr r3, 80021a8 <simpleKalmanX+0x70>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	f7fe f881 	bl	800028c <__adddf3>
 800218a:	f7fe fd2d 	bl	8000be8 <__aeabi_d2f>
 800218e:	6028      	str	r0, [r5, #0]
	   	  last_estimate = current_estimate;
 8002190:	ed84 8a00 	vstr	s16, [r4]
	   	  return current_estimate;
	  }
 8002194:	eeb0 0a48 	vmov.f32	s0, s16
 8002198:	ecbd 8b02 	vpop	{d8}
 800219c:	bd38      	pop	{r3, r4, r5, pc}
 800219e:	bf00      	nop
 80021a0:	c0000000 	.word	0xc0000000
 80021a4:	3ffccccc 	.word	0x3ffccccc
 80021a8:	00000000 	.word	0x00000000
 80021ac:	4065a000 	.word	0x4065a000
 80021b0:	200005f8 	.word	0x200005f8
 80021b4:	43ad0000 	.word	0x43ad0000
 80021b8:	2000062c 	.word	0x2000062c
 80021bc:	20000660 	.word	0x20000660
 80021c0:	200005c4 	.word	0x200005c4
 80021c4:	00000000 	.word	0x00000000

080021c8 <simpleKalmanY>:

	  float simpleKalmanY(float newVal1) {
 80021c8:	b538      	push	{r3, r4, r5, lr}
 80021ca:	ed2d 8b02 	vpush	{d8}
		  float err_measure1 = 306.0;  // примерный шум измерений
		  float q1 = 1.0;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate1 = err_measure1;
 80021ce:	4d18      	ldr	r5, [pc, #96]	; (8002230 <simpleKalmanY+0x68>)
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <simpleKalmanY+0x6c>)
 80021d2:	602b      	str	r3, [r5, #0]
		  kalman_gain1 = (float)err_estimate1 / (err_estimate1 + err_measure1);
 80021d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <simpleKalmanY+0x70>)
 80021da:	ed83 7a00 	vstr	s14, [r3]
		  current_estimate1 = last_estimate1 + (float)kalman_gain1 * (newVal1 - (float)last_estimate1);
 80021de:	4c17      	ldr	r4, [pc, #92]	; (800223c <simpleKalmanY+0x74>)
 80021e0:	edd4 7a00 	vldr	s15, [r4]
 80021e4:	ee30 8a67 	vsub.f32	s16, s0, s15
 80021e8:	ee28 8a07 	vmul.f32	s16, s16, s14
 80021ec:	ee37 8a88 	vadd.f32	s16, s15, s16
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <simpleKalmanY+0x78>)
 80021f2:	ed83 8a00 	vstr	s16, [r3]
		  err_estimate1 =  (1.0 - kalman_gain1) * err_estimate1 + fabs(last_estimate1 - current_estimate1) * q1;
 80021f6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80021fa:	eef0 7ae7 	vabs.f32	s15, s15
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f7fe f9a1 	bl	8000548 <__aeabi_f2d>
 8002206:	a308      	add	r3, pc, #32	; (adr r3, 8002228 <simpleKalmanY+0x60>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	f7fe f83e 	bl	800028c <__adddf3>
 8002210:	f7fe fcea 	bl	8000be8 <__aeabi_d2f>
 8002214:	6028      	str	r0, [r5, #0]
		  last_estimate1 = current_estimate1;
 8002216:	ed84 8a00 	vstr	s16, [r4]
		  return current_estimate1;
	  }
 800221a:	eeb0 0a48 	vmov.f32	s0, s16
 800221e:	ecbd 8b02 	vpop	{d8}
 8002222:	bd38      	pop	{r3, r4, r5, pc}
 8002224:	f3af 8000 	nop.w
 8002228:	00000000 	.word	0x00000000
 800222c:	40632000 	.word	0x40632000
 8002230:	200005fc 	.word	0x200005fc
 8002234:	43990000 	.word	0x43990000
 8002238:	20000630 	.word	0x20000630
 800223c:	20000664 	.word	0x20000664
 8002240:	200005c8 	.word	0x200005c8
 8002244:	00000000 	.word	0x00000000

08002248 <simpleKalmanZ>:

	  float simpleKalmanZ(float newVal2) {
 8002248:	b538      	push	{r3, r4, r5, lr}
 800224a:	ed2d 8b02 	vpush	{d8}
		  float err_measure2 = 430.0;  // примерный шум измерений
		  float q2 = 0.8;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate2 = err_measure2;
 800224e:	4d1c      	ldr	r5, [pc, #112]	; (80022c0 <simpleKalmanZ+0x78>)
 8002250:	4b1c      	ldr	r3, [pc, #112]	; (80022c4 <simpleKalmanZ+0x7c>)
 8002252:	602b      	str	r3, [r5, #0]
		  kalman_gain2 = (float)err_estimate2 / (err_estimate2 + err_measure2);
 8002254:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <simpleKalmanZ+0x80>)
 800225a:	ed83 7a00 	vstr	s14, [r3]
		  current_estimate2 = last_estimate2 + (float)kalman_gain2 * (newVal2 - last_estimate2);
 800225e:	4c1b      	ldr	r4, [pc, #108]	; (80022cc <simpleKalmanZ+0x84>)
 8002260:	edd4 7a00 	vldr	s15, [r4]
 8002264:	ee30 8a67 	vsub.f32	s16, s0, s15
 8002268:	ee28 8a07 	vmul.f32	s16, s16, s14
 800226c:	ee37 8a88 	vadd.f32	s16, s15, s16
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <simpleKalmanZ+0x88>)
 8002272:	ed83 8a00 	vstr	s16, [r3]
		  err_estimate2 =  (1.0 - kalman_gain2) * err_estimate2 + fabs(last_estimate2 - current_estimate2) * q2;
 8002276:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800227a:	eef0 7ae7 	vabs.f32	s15, s15
 800227e:	ee17 0a90 	vmov	r0, s15
 8002282:	f7fe f961 	bl	8000548 <__aeabi_f2d>
 8002286:	a30a      	add	r3, pc, #40	; (adr r3, 80022b0 <simpleKalmanZ+0x68>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fe f9b4 	bl	80005f8 <__aeabi_dmul>
 8002290:	a309      	add	r3, pc, #36	; (adr r3, 80022b8 <simpleKalmanZ+0x70>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	f7fd fff9 	bl	800028c <__adddf3>
 800229a:	f7fe fca5 	bl	8000be8 <__aeabi_d2f>
 800229e:	6028      	str	r0, [r5, #0]
		  last_estimate2 = current_estimate2;
 80022a0:	ed84 8a00 	vstr	s16, [r4]
		  return current_estimate2;
	  }
 80022a4:	eeb0 0a48 	vmov.f32	s0, s16
 80022a8:	ecbd 8b02 	vpop	{d8}
 80022ac:	bd38      	pop	{r3, r4, r5, pc}
 80022ae:	bf00      	nop
 80022b0:	a0000000 	.word	0xa0000000
 80022b4:	3fe99999 	.word	0x3fe99999
 80022b8:	00000000 	.word	0x00000000
 80022bc:	406ae000 	.word	0x406ae000
 80022c0:	2000060c 	.word	0x2000060c
 80022c4:	43d70000 	.word	0x43d70000
 80022c8:	20000640 	.word	0x20000640
 80022cc:	20000674 	.word	0x20000674
 80022d0:	200005d8 	.word	0x200005d8
 80022d4:	00000000 	.word	0x00000000

080022d8 <simpleKalmanXE>:




	  float simpleKalmanXE(float newVal3) {
 80022d8:	b538      	push	{r3, r4, r5, lr}
 80022da:	ed2d 8b02 	vpush	{d8}
		  float err_measure3 = 346.0;  // примерный шум измерений
		  float q3 = 1.8;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate3 = err_measure3;
 80022de:	4d1c      	ldr	r5, [pc, #112]	; (8002350 <simpleKalmanXE+0x78>)
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <simpleKalmanXE+0x7c>)
 80022e2:	602b      	str	r3, [r5, #0]
		  kalman_gain3 = (float)err_estimate3 / (err_estimate3 + err_measure3);
 80022e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022e8:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <simpleKalmanXE+0x80>)
 80022ea:	ed83 7a00 	vstr	s14, [r3]
	   	  current_estimate3 = (float)last_estimate3 + (float)kalman_gain3 * (newVal3 - (float)last_estimate3);
 80022ee:	4c1b      	ldr	r4, [pc, #108]	; (800235c <simpleKalmanXE+0x84>)
 80022f0:	edd4 7a00 	vldr	s15, [r4]
 80022f4:	ee30 8a67 	vsub.f32	s16, s0, s15
 80022f8:	ee28 8a07 	vmul.f32	s16, s16, s14
 80022fc:	ee37 8a88 	vadd.f32	s16, s15, s16
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <simpleKalmanXE+0x88>)
 8002302:	ed83 8a00 	vstr	s16, [r3]
	   	  err_estimate3 =  (1.0 - kalman_gain3) * err_estimate3 + fabs(last_estimate3 - current_estimate3) * q3;
 8002306:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800230a:	eef0 7ae7 	vabs.f32	s15, s15
 800230e:	ee17 0a90 	vmov	r0, s15
 8002312:	f7fe f919 	bl	8000548 <__aeabi_f2d>
 8002316:	a30a      	add	r3, pc, #40	; (adr r3, 8002340 <simpleKalmanXE+0x68>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fe f96c 	bl	80005f8 <__aeabi_dmul>
 8002320:	a309      	add	r3, pc, #36	; (adr r3, 8002348 <simpleKalmanXE+0x70>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fd ffb1 	bl	800028c <__adddf3>
 800232a:	f7fe fc5d 	bl	8000be8 <__aeabi_d2f>
 800232e:	6028      	str	r0, [r5, #0]
	   	  last_estimate3 = current_estimate3;
 8002330:	ed84 8a00 	vstr	s16, [r4]
	   	  return current_estimate3;
	  }
 8002334:	eeb0 0a48 	vmov.f32	s0, s16
 8002338:	ecbd 8b02 	vpop	{d8}
 800233c:	bd38      	pop	{r3, r4, r5, pc}
 800233e:	bf00      	nop
 8002340:	c0000000 	.word	0xc0000000
 8002344:	3ffccccc 	.word	0x3ffccccc
 8002348:	00000000 	.word	0x00000000
 800234c:	4065a000 	.word	0x4065a000
 8002350:	20000610 	.word	0x20000610
 8002354:	43ad0000 	.word	0x43ad0000
 8002358:	20000644 	.word	0x20000644
 800235c:	20000678 	.word	0x20000678
 8002360:	200005dc 	.word	0x200005dc
 8002364:	00000000 	.word	0x00000000

08002368 <simpleKalmanYE>:

	  float simpleKalmanYE(float newVal4) {
 8002368:	b538      	push	{r3, r4, r5, lr}
 800236a:	ed2d 8b02 	vpush	{d8}
		  float err_measure4 = 306.0;  // примерный шум измерений
		  float q4 = 1.0;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate4 = err_measure4;
 800236e:	4d18      	ldr	r5, [pc, #96]	; (80023d0 <simpleKalmanYE+0x68>)
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <simpleKalmanYE+0x6c>)
 8002372:	602b      	str	r3, [r5, #0]
		  kalman_gain4 = (float)err_estimate4 / (err_estimate4 + err_measure4);
 8002374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002378:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <simpleKalmanYE+0x70>)
 800237a:	ed83 7a00 	vstr	s14, [r3]
		  current_estimate4 = last_estimate4 + (float)kalman_gain4 * (newVal4 - (float)last_estimate4);
 800237e:	4c17      	ldr	r4, [pc, #92]	; (80023dc <simpleKalmanYE+0x74>)
 8002380:	edd4 7a00 	vldr	s15, [r4]
 8002384:	ee30 8a67 	vsub.f32	s16, s0, s15
 8002388:	ee28 8a07 	vmul.f32	s16, s16, s14
 800238c:	ee37 8a88 	vadd.f32	s16, s15, s16
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <simpleKalmanYE+0x78>)
 8002392:	ed83 8a00 	vstr	s16, [r3]
		  err_estimate4 =  (1.0 - kalman_gain4) * err_estimate4 + fabs(last_estimate4 - current_estimate4) * q4;
 8002396:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800239a:	eef0 7ae7 	vabs.f32	s15, s15
 800239e:	ee17 0a90 	vmov	r0, s15
 80023a2:	f7fe f8d1 	bl	8000548 <__aeabi_f2d>
 80023a6:	a308      	add	r3, pc, #32	; (adr r3, 80023c8 <simpleKalmanYE+0x60>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fd ff6e 	bl	800028c <__adddf3>
 80023b0:	f7fe fc1a 	bl	8000be8 <__aeabi_d2f>
 80023b4:	6028      	str	r0, [r5, #0]
		  last_estimate4 = current_estimate4;
 80023b6:	ed84 8a00 	vstr	s16, [r4]
		  return current_estimate4;
	  }
 80023ba:	eeb0 0a48 	vmov.f32	s0, s16
 80023be:	ecbd 8b02 	vpop	{d8}
 80023c2:	bd38      	pop	{r3, r4, r5, pc}
 80023c4:	f3af 8000 	nop.w
 80023c8:	00000000 	.word	0x00000000
 80023cc:	40632000 	.word	0x40632000
 80023d0:	20000614 	.word	0x20000614
 80023d4:	43990000 	.word	0x43990000
 80023d8:	20000648 	.word	0x20000648
 80023dc:	2000067c 	.word	0x2000067c
 80023e0:	200005e0 	.word	0x200005e0
 80023e4:	00000000 	.word	0x00000000

080023e8 <simpleKalmanZE>:

	  float simpleKalmanZE(float newVal5) {
 80023e8:	b538      	push	{r3, r4, r5, lr}
 80023ea:	ed2d 8b02 	vpush	{d8}
		  float err_measure5 = 430.0;  // примерный шум измерений
		  float q5 = 0.8;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate5 = err_measure5;
 80023ee:	4d1c      	ldr	r5, [pc, #112]	; (8002460 <simpleKalmanZE+0x78>)
 80023f0:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <simpleKalmanZE+0x7c>)
 80023f2:	602b      	str	r3, [r5, #0]
		  kalman_gain5 = (float)err_estimate5 / (err_estimate5 + err_measure5);
 80023f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <simpleKalmanZE+0x80>)
 80023fa:	ed83 7a00 	vstr	s14, [r3]
		  current_estimate5 = last_estimate5 + (float)kalman_gain5 * (newVal5 - last_estimate5);
 80023fe:	4c1b      	ldr	r4, [pc, #108]	; (800246c <simpleKalmanZE+0x84>)
 8002400:	edd4 7a00 	vldr	s15, [r4]
 8002404:	ee30 8a67 	vsub.f32	s16, s0, s15
 8002408:	ee28 8a07 	vmul.f32	s16, s16, s14
 800240c:	ee37 8a88 	vadd.f32	s16, s15, s16
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <simpleKalmanZE+0x88>)
 8002412:	ed83 8a00 	vstr	s16, [r3]
		  err_estimate5 =  (1.0 - kalman_gain5) * err_estimate5 + fabs(last_estimate5 - current_estimate5) * q5;
 8002416:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800241a:	eef0 7ae7 	vabs.f32	s15, s15
 800241e:	ee17 0a90 	vmov	r0, s15
 8002422:	f7fe f891 	bl	8000548 <__aeabi_f2d>
 8002426:	a30a      	add	r3, pc, #40	; (adr r3, 8002450 <simpleKalmanZE+0x68>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f7fe f8e4 	bl	80005f8 <__aeabi_dmul>
 8002430:	a309      	add	r3, pc, #36	; (adr r3, 8002458 <simpleKalmanZE+0x70>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fd ff29 	bl	800028c <__adddf3>
 800243a:	f7fe fbd5 	bl	8000be8 <__aeabi_d2f>
 800243e:	6028      	str	r0, [r5, #0]
		  last_estimate5 = current_estimate5;
 8002440:	ed84 8a00 	vstr	s16, [r4]
		  return current_estimate5;
	  }
 8002444:	eeb0 0a48 	vmov.f32	s0, s16
 8002448:	ecbd 8b02 	vpop	{d8}
 800244c:	bd38      	pop	{r3, r4, r5, pc}
 800244e:	bf00      	nop
 8002450:	a0000000 	.word	0xa0000000
 8002454:	3fe99999 	.word	0x3fe99999
 8002458:	00000000 	.word	0x00000000
 800245c:	406ae000 	.word	0x406ae000
 8002460:	20000618 	.word	0x20000618
 8002464:	43d70000 	.word	0x43d70000
 8002468:	2000064c 	.word	0x2000064c
 800246c:	20000680 	.word	0x20000680
 8002470:	200005e4 	.word	0x200005e4
 8002474:	00000000 	.word	0x00000000

08002478 <simpleKalmanOMEGA_X>:




	  float simpleKalmanOMEGA_X(float newVal6) {
 8002478:	b538      	push	{r3, r4, r5, lr}
 800247a:	ed2d 8b02 	vpush	{d8}
		  float err_measure6 = 346.0;  // примерный шум измерений
		  float q6 = 1.8;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate6 = err_measure6;
 800247e:	4d1c      	ldr	r5, [pc, #112]	; (80024f0 <simpleKalmanOMEGA_X+0x78>)
 8002480:	4b1c      	ldr	r3, [pc, #112]	; (80024f4 <simpleKalmanOMEGA_X+0x7c>)
 8002482:	602b      	str	r3, [r5, #0]
		  kalman_gain6 = (float)err_estimate6 / (err_estimate6 + err_measure6);
 8002484:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <simpleKalmanOMEGA_X+0x80>)
 800248a:	ed83 7a00 	vstr	s14, [r3]
	   	  current_estimate6 = (float)last_estimate6 + (float)kalman_gain6 * (newVal6 - (float)last_estimate6);
 800248e:	4c1b      	ldr	r4, [pc, #108]	; (80024fc <simpleKalmanOMEGA_X+0x84>)
 8002490:	edd4 7a00 	vldr	s15, [r4]
 8002494:	ee30 8a67 	vsub.f32	s16, s0, s15
 8002498:	ee28 8a07 	vmul.f32	s16, s16, s14
 800249c:	ee37 8a88 	vadd.f32	s16, s15, s16
 80024a0:	4b17      	ldr	r3, [pc, #92]	; (8002500 <simpleKalmanOMEGA_X+0x88>)
 80024a2:	ed83 8a00 	vstr	s16, [r3]
	   	  err_estimate6 =  (1.0 - kalman_gain6) * err_estimate6 + fabs(last_estimate6 - current_estimate6) * q6;
 80024a6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80024aa:	eef0 7ae7 	vabs.f32	s15, s15
 80024ae:	ee17 0a90 	vmov	r0, s15
 80024b2:	f7fe f849 	bl	8000548 <__aeabi_f2d>
 80024b6:	a30a      	add	r3, pc, #40	; (adr r3, 80024e0 <simpleKalmanOMEGA_X+0x68>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f89c 	bl	80005f8 <__aeabi_dmul>
 80024c0:	a309      	add	r3, pc, #36	; (adr r3, 80024e8 <simpleKalmanOMEGA_X+0x70>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fd fee1 	bl	800028c <__adddf3>
 80024ca:	f7fe fb8d 	bl	8000be8 <__aeabi_d2f>
 80024ce:	6028      	str	r0, [r5, #0]
	   	  last_estimate6 = current_estimate6;
 80024d0:	ed84 8a00 	vstr	s16, [r4]
	   	  return current_estimate6;
	  }
 80024d4:	eeb0 0a48 	vmov.f32	s0, s16
 80024d8:	ecbd 8b02 	vpop	{d8}
 80024dc:	bd38      	pop	{r3, r4, r5, pc}
 80024de:	bf00      	nop
 80024e0:	c0000000 	.word	0xc0000000
 80024e4:	3ffccccc 	.word	0x3ffccccc
 80024e8:	00000000 	.word	0x00000000
 80024ec:	4065a000 	.word	0x4065a000
 80024f0:	2000061c 	.word	0x2000061c
 80024f4:	43ad0000 	.word	0x43ad0000
 80024f8:	20000650 	.word	0x20000650
 80024fc:	20000684 	.word	0x20000684
 8002500:	200005e8 	.word	0x200005e8
 8002504:	00000000 	.word	0x00000000

08002508 <simpleKalmanOMEGA_Y>:

	  float simpleKalmanOMEGA_Y(float newVal7) {
 8002508:	b538      	push	{r3, r4, r5, lr}
 800250a:	ed2d 8b02 	vpush	{d8}
		  float err_measure7 = 306.0;  // примерный шум измерений
		  float q7 = 1.0;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate7 = err_measure7;
 800250e:	4d18      	ldr	r5, [pc, #96]	; (8002570 <simpleKalmanOMEGA_Y+0x68>)
 8002510:	4b18      	ldr	r3, [pc, #96]	; (8002574 <simpleKalmanOMEGA_Y+0x6c>)
 8002512:	602b      	str	r3, [r5, #0]
		  kalman_gain7 = (float)err_estimate7 / (err_estimate7 + err_measure7);
 8002514:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <simpleKalmanOMEGA_Y+0x70>)
 800251a:	ed83 7a00 	vstr	s14, [r3]
		  current_estimate7 = last_estimate7 + (float)kalman_gain7 * (newVal7 - (float)last_estimate7);
 800251e:	4c17      	ldr	r4, [pc, #92]	; (800257c <simpleKalmanOMEGA_Y+0x74>)
 8002520:	edd4 7a00 	vldr	s15, [r4]
 8002524:	ee30 8a67 	vsub.f32	s16, s0, s15
 8002528:	ee28 8a07 	vmul.f32	s16, s16, s14
 800252c:	ee37 8a88 	vadd.f32	s16, s15, s16
 8002530:	4b13      	ldr	r3, [pc, #76]	; (8002580 <simpleKalmanOMEGA_Y+0x78>)
 8002532:	ed83 8a00 	vstr	s16, [r3]
		  err_estimate7 =  (1.0 - kalman_gain7) * err_estimate7 + fabs(last_estimate7 - current_estimate7) * q7;
 8002536:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800253a:	eef0 7ae7 	vabs.f32	s15, s15
 800253e:	ee17 0a90 	vmov	r0, s15
 8002542:	f7fe f801 	bl	8000548 <__aeabi_f2d>
 8002546:	a308      	add	r3, pc, #32	; (adr r3, 8002568 <simpleKalmanOMEGA_Y+0x60>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fd fe9e 	bl	800028c <__adddf3>
 8002550:	f7fe fb4a 	bl	8000be8 <__aeabi_d2f>
 8002554:	6028      	str	r0, [r5, #0]
		  last_estimate7 = current_estimate7;
 8002556:	ed84 8a00 	vstr	s16, [r4]
		  return current_estimate7;
	  }
 800255a:	eeb0 0a48 	vmov.f32	s0, s16
 800255e:	ecbd 8b02 	vpop	{d8}
 8002562:	bd38      	pop	{r3, r4, r5, pc}
 8002564:	f3af 8000 	nop.w
 8002568:	00000000 	.word	0x00000000
 800256c:	40632000 	.word	0x40632000
 8002570:	20000620 	.word	0x20000620
 8002574:	43990000 	.word	0x43990000
 8002578:	20000654 	.word	0x20000654
 800257c:	20000688 	.word	0x20000688
 8002580:	200005ec 	.word	0x200005ec
 8002584:	00000000 	.word	0x00000000

08002588 <simpleKalmanOMEGA_Z>:

	  float simpleKalmanOMEGA_Z(float newVal8) {
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	ed2d 8b02 	vpush	{d8}
		  float err_measure8 = 430.0;  // примерный шум измерений
		  float q8 = 0.8;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate8 = err_measure8;
 800258e:	4d1c      	ldr	r5, [pc, #112]	; (8002600 <simpleKalmanOMEGA_Z+0x78>)
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <simpleKalmanOMEGA_Z+0x7c>)
 8002592:	602b      	str	r3, [r5, #0]
		  kalman_gain8 = (float)err_estimate8 / (err_estimate8 + err_measure8);
 8002594:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <simpleKalmanOMEGA_Z+0x80>)
 800259a:	ed83 7a00 	vstr	s14, [r3]
		  current_estimate8 = last_estimate8 + (float)kalman_gain8 * (newVal8 - last_estimate8);
 800259e:	4c1b      	ldr	r4, [pc, #108]	; (800260c <simpleKalmanOMEGA_Z+0x84>)
 80025a0:	edd4 7a00 	vldr	s15, [r4]
 80025a4:	ee30 8a67 	vsub.f32	s16, s0, s15
 80025a8:	ee28 8a07 	vmul.f32	s16, s16, s14
 80025ac:	ee37 8a88 	vadd.f32	s16, s15, s16
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <simpleKalmanOMEGA_Z+0x88>)
 80025b2:	ed83 8a00 	vstr	s16, [r3]
		  err_estimate8 =  (1.0 - kalman_gain8) * err_estimate8 + fabs(last_estimate8 - current_estimate8) * q8;
 80025b6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80025ba:	eef0 7ae7 	vabs.f32	s15, s15
 80025be:	ee17 0a90 	vmov	r0, s15
 80025c2:	f7fd ffc1 	bl	8000548 <__aeabi_f2d>
 80025c6:	a30a      	add	r3, pc, #40	; (adr r3, 80025f0 <simpleKalmanOMEGA_Z+0x68>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fe f814 	bl	80005f8 <__aeabi_dmul>
 80025d0:	a309      	add	r3, pc, #36	; (adr r3, 80025f8 <simpleKalmanOMEGA_Z+0x70>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fd fe59 	bl	800028c <__adddf3>
 80025da:	f7fe fb05 	bl	8000be8 <__aeabi_d2f>
 80025de:	6028      	str	r0, [r5, #0]
		  last_estimate8 = current_estimate8;
 80025e0:	ed84 8a00 	vstr	s16, [r4]
		  return current_estimate8;
	  }
 80025e4:	eeb0 0a48 	vmov.f32	s0, s16
 80025e8:	ecbd 8b02 	vpop	{d8}
 80025ec:	bd38      	pop	{r3, r4, r5, pc}
 80025ee:	bf00      	nop
 80025f0:	a0000000 	.word	0xa0000000
 80025f4:	3fe99999 	.word	0x3fe99999
 80025f8:	00000000 	.word	0x00000000
 80025fc:	406ae000 	.word	0x406ae000
 8002600:	20000624 	.word	0x20000624
 8002604:	43d70000 	.word	0x43d70000
 8002608:	20000658 	.word	0x20000658
 800260c:	2000068c 	.word	0x2000068c
 8002610:	200005f0 	.word	0x200005f0
 8002614:	00000000 	.word	0x00000000

08002618 <simpleKalmanYAW>:

	  // Функция задействования фильтра для получения рыскания
	  double simpleKalmanYAW(double newVal9) {
 8002618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800261c:	ed2d 8b02 	vpush	{d8}
 8002620:	ec57 6b10 	vmov	r6, r7, d0
		  double err_measure9 = 430.0;  // примерный шум измерений
		  double q9 = 0.8;   // скорость изменения значений 0.001-1, варьировать самому
		  err_estimate9 = err_measure9;
 8002624:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80026e0 <simpleKalmanYAW+0xc8>
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <simpleKalmanYAW+0xb8>)
 800262a:	f8c9 3000 	str.w	r3, [r9]
		  kalman_gain9 = (double)err_estimate9 / (err_estimate9 + err_measure9);
 800262e:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <simpleKalmanYAW+0xbc>)
 8002630:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002634:	601a      	str	r2, [r3, #0]
		  current_estimate9 = last_estimate9 + (double)kalman_gain9 * (newVal9 - last_estimate9);
 8002636:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80026e4 <simpleKalmanYAW+0xcc>
 800263a:	edd8 8a00 	vldr	s17, [r8]
 800263e:	ee18 0a90 	vmov	r0, s17
 8002642:	f7fd ff81 	bl	8000548 <__aeabi_f2d>
 8002646:	4604      	mov	r4, r0
 8002648:	460d      	mov	r5, r1
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4630      	mov	r0, r6
 8002650:	4639      	mov	r1, r7
 8002652:	f7fd fe19 	bl	8000288 <__aeabi_dsub>
 8002656:	2200      	movs	r2, #0
 8002658:	4b1f      	ldr	r3, [pc, #124]	; (80026d8 <simpleKalmanYAW+0xc0>)
 800265a:	f7fd ffcd 	bl	80005f8 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4620      	mov	r0, r4
 8002664:	4629      	mov	r1, r5
 8002666:	f7fd fe11 	bl	800028c <__adddf3>
 800266a:	f7fe fabd 	bl	8000be8 <__aeabi_d2f>
 800266e:	ee08 0a10 	vmov	s16, r0
 8002672:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <simpleKalmanYAW+0xc4>)
 8002674:	6018      	str	r0, [r3, #0]
		  err_estimate9 =  (1.0 - kalman_gain9) * err_estimate9 + fabs(last_estimate9 - current_estimate9) * q9;
 8002676:	ee78 8ac8 	vsub.f32	s17, s17, s16
 800267a:	eef0 7ae8 	vabs.f32	s15, s17
 800267e:	ee17 0a90 	vmov	r0, s15
 8002682:	f7fd ff61 	bl	8000548 <__aeabi_f2d>
 8002686:	a30e      	add	r3, pc, #56	; (adr r3, 80026c0 <simpleKalmanYAW+0xa8>)
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f7fd ffb4 	bl	80005f8 <__aeabi_dmul>
 8002690:	a30d      	add	r3, pc, #52	; (adr r3, 80026c8 <simpleKalmanYAW+0xb0>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f7fd fdf9 	bl	800028c <__adddf3>
 800269a:	f7fe faa5 	bl	8000be8 <__aeabi_d2f>
 800269e:	f8c9 0000 	str.w	r0, [r9]
		  last_estimate9 = current_estimate9;
 80026a2:	ed88 8a00 	vstr	s16, [r8]
		  return current_estimate9;
 80026a6:	ee18 0a10 	vmov	r0, s16
 80026aa:	f7fd ff4d 	bl	8000548 <__aeabi_f2d>
	  }
 80026ae:	ec41 0b10 	vmov	d0, r0, r1
 80026b2:	ecbd 8b02 	vpop	{d8}
 80026b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026ba:	bf00      	nop
 80026bc:	f3af 8000 	nop.w
 80026c0:	9999999a 	.word	0x9999999a
 80026c4:	3fe99999 	.word	0x3fe99999
 80026c8:	00000000 	.word	0x00000000
 80026cc:	406ae000 	.word	0x406ae000
 80026d0:	43d70000 	.word	0x43d70000
 80026d4:	2000065c 	.word	0x2000065c
 80026d8:	3fe00000 	.word	0x3fe00000
 80026dc:	200005f4 	.word	0x200005f4
 80026e0:	20000628 	.word	0x20000628
 80026e4:	20000690 	.word	0x20000690

080026e8 <simpleKalmanVxGPS>:

	  float simpleKalmanVxGPS(float newVal10) {
 80026e8:	b538      	push	{r3, r4, r5, lr}
 80026ea:	ed2d 8b02 	vpush	{d8}
	        float err_measure10 = 430.0;  // примерный шум измерений
	        float q10 = 0.8;   // скорость изменения значений 0.001-1, варьировать самому
	        err_estimate10 = err_measure10;
 80026ee:	4d1c      	ldr	r5, [pc, #112]	; (8002760 <simpleKalmanVxGPS+0x78>)
 80026f0:	4b1c      	ldr	r3, [pc, #112]	; (8002764 <simpleKalmanVxGPS+0x7c>)
 80026f2:	602b      	str	r3, [r5, #0]
	        kalman_gain10 = (float)err_estimate10 / (err_estimate10 + err_measure10);
 80026f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <simpleKalmanVxGPS+0x80>)
 80026fa:	ed83 7a00 	vstr	s14, [r3]
	        current_estimate10 = last_estimate10 + (float)kalman_gain10 * (newVal10 - last_estimate10);
 80026fe:	4c1b      	ldr	r4, [pc, #108]	; (800276c <simpleKalmanVxGPS+0x84>)
 8002700:	edd4 7a00 	vldr	s15, [r4]
 8002704:	ee30 8a67 	vsub.f32	s16, s0, s15
 8002708:	ee28 8a07 	vmul.f32	s16, s16, s14
 800270c:	ee37 8a88 	vadd.f32	s16, s15, s16
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <simpleKalmanVxGPS+0x88>)
 8002712:	ed83 8a00 	vstr	s16, [r3]
	        err_estimate10 =  (1.0 - kalman_gain10) * err_estimate10 + fabs(last_estimate10 - current_estimate10) * q10;
 8002716:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800271a:	eef0 7ae7 	vabs.f32	s15, s15
 800271e:	ee17 0a90 	vmov	r0, s15
 8002722:	f7fd ff11 	bl	8000548 <__aeabi_f2d>
 8002726:	a30a      	add	r3, pc, #40	; (adr r3, 8002750 <simpleKalmanVxGPS+0x68>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff64 	bl	80005f8 <__aeabi_dmul>
 8002730:	a309      	add	r3, pc, #36	; (adr r3, 8002758 <simpleKalmanVxGPS+0x70>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	f7fd fda9 	bl	800028c <__adddf3>
 800273a:	f7fe fa55 	bl	8000be8 <__aeabi_d2f>
 800273e:	6028      	str	r0, [r5, #0]
	        last_estimate10 = current_estimate10;
 8002740:	ed84 8a00 	vstr	s16, [r4]
	        return current_estimate10;
	  }
 8002744:	eeb0 0a48 	vmov.f32	s0, s16
 8002748:	ecbd 8b02 	vpop	{d8}
 800274c:	bd38      	pop	{r3, r4, r5, pc}
 800274e:	bf00      	nop
 8002750:	a0000000 	.word	0xa0000000
 8002754:	3fe99999 	.word	0x3fe99999
 8002758:	00000000 	.word	0x00000000
 800275c:	406ae000 	.word	0x406ae000
 8002760:	20000600 	.word	0x20000600
 8002764:	43d70000 	.word	0x43d70000
 8002768:	20000634 	.word	0x20000634
 800276c:	20000668 	.word	0x20000668
 8002770:	200005cc 	.word	0x200005cc
 8002774:	00000000 	.word	0x00000000

08002778 <simpleKalmanVyGPS>:

	  float simpleKalmanVyGPS(float newVal11) {
 8002778:	b538      	push	{r3, r4, r5, lr}
 800277a:	ed2d 8b02 	vpush	{d8}
	        float err_measure11 = 430.0;  // примерный шум измерений
	        float q11 = 0.8;   // скорость изменения значений 0.001-1, варьировать самому
	        err_estimate11 = err_measure11;
 800277e:	4d1c      	ldr	r5, [pc, #112]	; (80027f0 <simpleKalmanVyGPS+0x78>)
 8002780:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <simpleKalmanVyGPS+0x7c>)
 8002782:	602b      	str	r3, [r5, #0]
	        kalman_gain11 = (float)err_estimate11 / (err_estimate11 + err_measure11);
 8002784:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <simpleKalmanVyGPS+0x80>)
 800278a:	ed83 7a00 	vstr	s14, [r3]
	        current_estimate11 = last_estimate11 + (float)kalman_gain11 * (newVal11 - last_estimate11);
 800278e:	4c1b      	ldr	r4, [pc, #108]	; (80027fc <simpleKalmanVyGPS+0x84>)
 8002790:	edd4 7a00 	vldr	s15, [r4]
 8002794:	ee30 8a67 	vsub.f32	s16, s0, s15
 8002798:	ee28 8a07 	vmul.f32	s16, s16, s14
 800279c:	ee37 8a88 	vadd.f32	s16, s15, s16
 80027a0:	4b17      	ldr	r3, [pc, #92]	; (8002800 <simpleKalmanVyGPS+0x88>)
 80027a2:	ed83 8a00 	vstr	s16, [r3]
	        err_estimate11 =  (1.0 - kalman_gain11) * err_estimate11 + fabs(last_estimate11 - current_estimate11) * q11;
 80027a6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80027aa:	eef0 7ae7 	vabs.f32	s15, s15
 80027ae:	ee17 0a90 	vmov	r0, s15
 80027b2:	f7fd fec9 	bl	8000548 <__aeabi_f2d>
 80027b6:	a30a      	add	r3, pc, #40	; (adr r3, 80027e0 <simpleKalmanVyGPS+0x68>)
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f7fd ff1c 	bl	80005f8 <__aeabi_dmul>
 80027c0:	a309      	add	r3, pc, #36	; (adr r3, 80027e8 <simpleKalmanVyGPS+0x70>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f7fd fd61 	bl	800028c <__adddf3>
 80027ca:	f7fe fa0d 	bl	8000be8 <__aeabi_d2f>
 80027ce:	6028      	str	r0, [r5, #0]
	        last_estimate11 = current_estimate11;
 80027d0:	ed84 8a00 	vstr	s16, [r4]
	        return current_estimate11;
	  }
 80027d4:	eeb0 0a48 	vmov.f32	s0, s16
 80027d8:	ecbd 8b02 	vpop	{d8}
 80027dc:	bd38      	pop	{r3, r4, r5, pc}
 80027de:	bf00      	nop
 80027e0:	a0000000 	.word	0xa0000000
 80027e4:	3fe99999 	.word	0x3fe99999
 80027e8:	00000000 	.word	0x00000000
 80027ec:	406ae000 	.word	0x406ae000
 80027f0:	20000604 	.word	0x20000604
 80027f4:	43d70000 	.word	0x43d70000
 80027f8:	20000638 	.word	0x20000638
 80027fc:	2000066c 	.word	0x2000066c
 8002800:	200005d0 	.word	0x200005d0
 8002804:	00000000 	.word	0x00000000

08002808 <simpleKalmanVzGPS>:

	  float simpleKalmanVzGPS(float newVal12) {
 8002808:	b538      	push	{r3, r4, r5, lr}
 800280a:	ed2d 8b02 	vpush	{d8}
	        float err_measure12 = 430.0;  // примерный шум измерений
	        float q12 = 0.8;   // скорость изменения значений 0.001-1, варьировать самому
	        err_estimate12 = err_measure12;
 800280e:	4d1c      	ldr	r5, [pc, #112]	; (8002880 <simpleKalmanVzGPS+0x78>)
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <simpleKalmanVzGPS+0x7c>)
 8002812:	602b      	str	r3, [r5, #0]
	        kalman_gain12 = (float)err_estimate12 / (err_estimate12 + err_measure12);
 8002814:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <simpleKalmanVzGPS+0x80>)
 800281a:	ed83 7a00 	vstr	s14, [r3]
	        current_estimate12 = last_estimate12 + (float)kalman_gain12 * (newVal12 - last_estimate12);
 800281e:	4c1b      	ldr	r4, [pc, #108]	; (800288c <simpleKalmanVzGPS+0x84>)
 8002820:	edd4 7a00 	vldr	s15, [r4]
 8002824:	ee30 8a67 	vsub.f32	s16, s0, s15
 8002828:	ee28 8a07 	vmul.f32	s16, s16, s14
 800282c:	ee37 8a88 	vadd.f32	s16, s15, s16
 8002830:	4b17      	ldr	r3, [pc, #92]	; (8002890 <simpleKalmanVzGPS+0x88>)
 8002832:	ed83 8a00 	vstr	s16, [r3]
	        err_estimate12 =  (1.0 - kalman_gain12) * err_estimate12 + fabs(last_estimate12 - current_estimate12) * q12;
 8002836:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800283a:	eef0 7ae7 	vabs.f32	s15, s15
 800283e:	ee17 0a90 	vmov	r0, s15
 8002842:	f7fd fe81 	bl	8000548 <__aeabi_f2d>
 8002846:	a30a      	add	r3, pc, #40	; (adr r3, 8002870 <simpleKalmanVzGPS+0x68>)
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f7fd fed4 	bl	80005f8 <__aeabi_dmul>
 8002850:	a309      	add	r3, pc, #36	; (adr r3, 8002878 <simpleKalmanVzGPS+0x70>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fd fd19 	bl	800028c <__adddf3>
 800285a:	f7fe f9c5 	bl	8000be8 <__aeabi_d2f>
 800285e:	6028      	str	r0, [r5, #0]
	        last_estimate12 = current_estimate12;
 8002860:	ed84 8a00 	vstr	s16, [r4]
	        return current_estimate12;
	  }
 8002864:	eeb0 0a48 	vmov.f32	s0, s16
 8002868:	ecbd 8b02 	vpop	{d8}
 800286c:	bd38      	pop	{r3, r4, r5, pc}
 800286e:	bf00      	nop
 8002870:	a0000000 	.word	0xa0000000
 8002874:	3fe99999 	.word	0x3fe99999
 8002878:	00000000 	.word	0x00000000
 800287c:	406ae000 	.word	0x406ae000
 8002880:	20000608 	.word	0x20000608
 8002884:	43d70000 	.word	0x43d70000
 8002888:	2000063c 	.word	0x2000063c
 800288c:	20000670 	.word	0x20000670
 8002890:	200005d4 	.word	0x200005d4

08002894 <getKalmanA>:




void getKalmanA() // Процедура задействования фильтра для получения ускорения по 3-ем осям
{
 8002894:	b510      	push	{r4, lr}
	accV.x = simpleKalmanX(x_G);
 8002896:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <getKalmanA+0x60>)
 8002898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289c:	f7fe f9a4 	bl	8000be8 <__aeabi_d2f>
 80028a0:	ee00 0a10 	vmov	s0, r0
 80028a4:	f7ff fc48 	bl	8002138 <simpleKalmanX>
 80028a8:	ee10 0a10 	vmov	r0, s0
 80028ac:	f7fd fe4c 	bl	8000548 <__aeabi_f2d>
 80028b0:	4c11      	ldr	r4, [pc, #68]	; (80028f8 <getKalmanA+0x64>)
 80028b2:	e9c4 0100 	strd	r0, r1, [r4]
	accV.y = simpleKalmanY(y_G);
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <getKalmanA+0x68>)
 80028b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028bc:	f7fe f994 	bl	8000be8 <__aeabi_d2f>
 80028c0:	ee00 0a10 	vmov	s0, r0
 80028c4:	f7ff fc80 	bl	80021c8 <simpleKalmanY>
 80028c8:	ee10 0a10 	vmov	r0, s0
 80028cc:	f7fd fe3c 	bl	8000548 <__aeabi_f2d>
 80028d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
	accV.z = simpleKalmanZ(z_G);
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <getKalmanA+0x6c>)
 80028d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028da:	f7fe f985 	bl	8000be8 <__aeabi_d2f>
 80028de:	ee00 0a10 	vmov	s0, r0
 80028e2:	f7ff fcb1 	bl	8002248 <simpleKalmanZ>
 80028e6:	ee10 0a10 	vmov	r0, s0
 80028ea:	f7fd fe2d 	bl	8000548 <__aeabi_f2d>
 80028ee:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 80028f2:	bd10      	pop	{r4, pc}
 80028f4:	20000c08 	.word	0x20000c08
 80028f8:	20000788 	.word	0x20000788
 80028fc:	20000c30 	.word	0x20000c30
 8002900:	20000c58 	.word	0x20000c58

08002904 <getKalmanCSE>:

void getKalmanCSE() // Процедура задействования фильтра для получения проекций радиус-вектора в стартовой системе координат на 3 оси
{
 8002904:	b510      	push	{r4, lr}
	RV.x = simpleKalmanXE(RV.x);
 8002906:	4c16      	ldr	r4, [pc, #88]	; (8002960 <getKalmanCSE+0x5c>)
 8002908:	e9d4 0100 	ldrd	r0, r1, [r4]
 800290c:	f7fe f96c 	bl	8000be8 <__aeabi_d2f>
 8002910:	ee00 0a10 	vmov	s0, r0
 8002914:	f7ff fce0 	bl	80022d8 <simpleKalmanXE>
 8002918:	ee10 0a10 	vmov	r0, s0
 800291c:	f7fd fe14 	bl	8000548 <__aeabi_f2d>
 8002920:	e9c4 0100 	strd	r0, r1, [r4]
	RV.y = simpleKalmanYE(RV.y);
 8002924:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002928:	f7fe f95e 	bl	8000be8 <__aeabi_d2f>
 800292c:	ee00 0a10 	vmov	s0, r0
 8002930:	f7ff fd1a 	bl	8002368 <simpleKalmanYE>
 8002934:	ee10 0a10 	vmov	r0, s0
 8002938:	f7fd fe06 	bl	8000548 <__aeabi_f2d>
 800293c:	e9c4 0102 	strd	r0, r1, [r4, #8]
	RV.z = simpleKalmanZE(RV.z);
 8002940:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002944:	f7fe f950 	bl	8000be8 <__aeabi_d2f>
 8002948:	ee00 0a10 	vmov	s0, r0
 800294c:	f7ff fd4c 	bl	80023e8 <simpleKalmanZE>
 8002950:	ee10 0a10 	vmov	r0, s0
 8002954:	f7fd fdf8 	bl	8000548 <__aeabi_f2d>
 8002958:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 800295c:	bd10      	pop	{r4, pc}
 800295e:	bf00      	nop
 8002960:	20000700 	.word	0x20000700

08002964 <getKalmanOMEGA>:

void getKalmanOMEGA() // Процедура задействования фильтра для получения угловых скоростей по 3-ем осях
{
 8002964:	b508      	push	{r3, lr}
	x_gyro_c = simpleKalmanOMEGA_X(x_gyro);
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <getKalmanOMEGA+0x64>)
 8002968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800296c:	f7fe f93c 	bl	8000be8 <__aeabi_d2f>
 8002970:	ee00 0a10 	vmov	s0, r0
 8002974:	f7ff fd80 	bl	8002478 <simpleKalmanOMEGA_X>
 8002978:	ee10 0a10 	vmov	r0, s0
 800297c:	f7fd fde4 	bl	8000548 <__aeabi_f2d>
 8002980:	4b12      	ldr	r3, [pc, #72]	; (80029cc <getKalmanOMEGA+0x68>)
 8002982:	e9c3 0100 	strd	r0, r1, [r3]
	y_gyro_c = simpleKalmanOMEGA_Y(y_gyro);
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <getKalmanOMEGA+0x6c>)
 8002988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800298c:	f7fe f92c 	bl	8000be8 <__aeabi_d2f>
 8002990:	ee00 0a10 	vmov	s0, r0
 8002994:	f7ff fdb8 	bl	8002508 <simpleKalmanOMEGA_Y>
 8002998:	ee10 0a10 	vmov	r0, s0
 800299c:	f7fd fdd4 	bl	8000548 <__aeabi_f2d>
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <getKalmanOMEGA+0x70>)
 80029a2:	e9c3 0100 	strd	r0, r1, [r3]
	z_gyro_c = simpleKalmanOMEGA_Z(z_gyro);
 80029a6:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <getKalmanOMEGA+0x74>)
 80029a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ac:	f7fe f91c 	bl	8000be8 <__aeabi_d2f>
 80029b0:	ee00 0a10 	vmov	s0, r0
 80029b4:	f7ff fde8 	bl	8002588 <simpleKalmanOMEGA_Z>
 80029b8:	ee10 0a10 	vmov	r0, s0
 80029bc:	f7fd fdc4 	bl	8000548 <__aeabi_f2d>
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <getKalmanOMEGA+0x78>)
 80029c2:	e9c3 0100 	strd	r0, r1, [r3]
}
 80029c6:	bd08      	pop	{r3, pc}
 80029c8:	20000c18 	.word	0x20000c18
 80029cc:	20000c28 	.word	0x20000c28
 80029d0:	20000c40 	.word	0x20000c40
 80029d4:	20000c50 	.word	0x20000c50
 80029d8:	20000c68 	.word	0x20000c68
 80029dc:	20000c78 	.word	0x20000c78

080029e0 <getKalmanVGPS>:

void getKalmanVGPS() // Процедура задействования фильтра для получения GNSS скоростей по 3-ем осям
{
 80029e0:	b510      	push	{r4, lr}
	VelV.x = simpleKalmanVxGPS(VelV.x);
 80029e2:	4c16      	ldr	r4, [pc, #88]	; (8002a3c <getKalmanVGPS+0x5c>)
 80029e4:	e9d4 0100 	ldrd	r0, r1, [r4]
 80029e8:	f7fe f8fe 	bl	8000be8 <__aeabi_d2f>
 80029ec:	ee00 0a10 	vmov	s0, r0
 80029f0:	f7ff fe7a 	bl	80026e8 <simpleKalmanVxGPS>
 80029f4:	ee10 0a10 	vmov	r0, s0
 80029f8:	f7fd fda6 	bl	8000548 <__aeabi_f2d>
 80029fc:	e9c4 0100 	strd	r0, r1, [r4]
	VelV.y = simpleKalmanVyGPS(VelV.y);
 8002a00:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8002a04:	f7fe f8f0 	bl	8000be8 <__aeabi_d2f>
 8002a08:	ee00 0a10 	vmov	s0, r0
 8002a0c:	f7ff feb4 	bl	8002778 <simpleKalmanVyGPS>
 8002a10:	ee10 0a10 	vmov	r0, s0
 8002a14:	f7fd fd98 	bl	8000548 <__aeabi_f2d>
 8002a18:	e9c4 0102 	strd	r0, r1, [r4, #8]
	VelV.z = simpleKalmanVzGPS(VelV.z);
 8002a1c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002a20:	f7fe f8e2 	bl	8000be8 <__aeabi_d2f>
 8002a24:	ee00 0a10 	vmov	s0, r0
 8002a28:	f7ff feee 	bl	8002808 <simpleKalmanVzGPS>
 8002a2c:	ee10 0a10 	vmov	r0, s0
 8002a30:	f7fd fd8a 	bl	8000548 <__aeabi_f2d>
 8002a34:	e9c4 0104 	strd	r0, r1, [r4, #16]
}
 8002a38:	bd10      	pop	{r4, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000750 	.word	0x20000750

08002a40 <Set_Servo_RightWing.2>:
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);

  int Set_Servo_RightWing(double Angle) // from 0 to 180 degrees
  {
 8002a40:	b538      	push	{r3, r4, r5, lr}
 8002a42:	4604      	mov	r4, r0
 8002a44:	460d      	mov	r5, r1
    uint16_t Pulse_length = 500;
    if (Angle > 0  &&  Angle <= 180) {
 8002a46:	2200      	movs	r2, #0
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f7fe f865 	bl	8000b18 <__aeabi_dcmpgt>
 8002a4e:	b188      	cbz	r0, 8002a74 <Set_Servo_RightWing.2+0x34>
 8002a50:	2200      	movs	r2, #0
 8002a52:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <Set_Servo_RightWing.2+0x48>)
 8002a54:	4620      	mov	r0, r4
 8002a56:	4629      	mov	r1, r5
 8002a58:	f7fe f84a 	bl	8000af0 <__aeabi_dcmple>
 8002a5c:	b180      	cbz	r0, 8002a80 <Set_Servo_RightWing.2+0x40>
        Pulse_length += (2700-500)/180 * (int)Angle;
 8002a5e:	4620      	mov	r0, r4
 8002a60:	4629      	mov	r1, r5
 8002a62:	f7fe f879 	bl	8000b58 <__aeabi_d2iz>
 8002a66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a6a:	0083      	lsls	r3, r0, #2
 8002a6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	e001      	b.n	8002a78 <Set_Servo_RightWing.2+0x38>
    uint16_t Pulse_length = 500;
 8002a74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    }

    TIM1->CCR1=Pulse_length;
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <Set_Servo_RightWing.2+0x4c>)
 8002a7a:	6353      	str	r3, [r2, #52]	; 0x34
    return 0;
  }
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t Pulse_length = 500;
 8002a80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a84:	e7f8      	b.n	8002a78 <Set_Servo_RightWing.2+0x38>
 8002a86:	bf00      	nop
 8002a88:	40668000 	.word	0x40668000
 8002a8c:	40012c00 	.word	0x40012c00

08002a90 <Set_Servo_LeftWing.3>:

  int Set_Servo_LeftWing(double Angle) // from 0 to 180 degrees
  {
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4604      	mov	r4, r0
 8002a94:	460d      	mov	r5, r1
    uint16_t Pulse_length = 500;
    if (Angle > 0  &&  Angle <= 180) {
 8002a96:	2200      	movs	r2, #0
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f7fe f83d 	bl	8000b18 <__aeabi_dcmpgt>
 8002a9e:	b188      	cbz	r0, 8002ac4 <Set_Servo_LeftWing.3+0x34>
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <Set_Servo_LeftWing.3+0x48>)
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fe f822 	bl	8000af0 <__aeabi_dcmple>
 8002aac:	b180      	cbz	r0, 8002ad0 <Set_Servo_LeftWing.3+0x40>
        Pulse_length += (2700-500)/180 * (int)Angle;
 8002aae:	4620      	mov	r0, r4
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f7fe f851 	bl	8000b58 <__aeabi_d2iz>
 8002ab6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002aba:	0083      	lsls	r3, r0, #2
 8002abc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	e001      	b.n	8002ac8 <Set_Servo_LeftWing.3+0x38>
    uint16_t Pulse_length = 500;
 8002ac4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    }

    TIM1->CCR2=Pulse_length;
 8002ac8:	4a04      	ldr	r2, [pc, #16]	; (8002adc <Set_Servo_LeftWing.3+0x4c>)
 8002aca:	6393      	str	r3, [r2, #56]	; 0x38
    return 0;
  }
 8002acc:	2000      	movs	r0, #0
 8002ace:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t Pulse_length = 500;
 8002ad0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ad4:	e7f8      	b.n	8002ac8 <Set_Servo_LeftWing.3+0x38>
 8002ad6:	bf00      	nop
 8002ad8:	40668000 	.word	0x40668000
 8002adc:	40012c00 	.word	0x40012c00

08002ae0 <Set_Servo_Elevator.4>:

  int Set_Servo_Elevator(double Angle) // from 0 to 180 degrees
  {
 8002ae0:	b538      	push	{r3, r4, r5, lr}
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
    uint16_t Pulse_length = 500;
    if (Angle > 0  &&  Angle <= 180) {
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f7fe f815 	bl	8000b18 <__aeabi_dcmpgt>
 8002aee:	b188      	cbz	r0, 8002b14 <Set_Servo_Elevator.4+0x34>
 8002af0:	2200      	movs	r2, #0
 8002af2:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <Set_Servo_Elevator.4+0x48>)
 8002af4:	4620      	mov	r0, r4
 8002af6:	4629      	mov	r1, r5
 8002af8:	f7fd fffa 	bl	8000af0 <__aeabi_dcmple>
 8002afc:	b180      	cbz	r0, 8002b20 <Set_Servo_Elevator.4+0x40>
        Pulse_length += (2700-500)/180 * (int)Angle;
 8002afe:	4620      	mov	r0, r4
 8002b00:	4629      	mov	r1, r5
 8002b02:	f7fe f829 	bl	8000b58 <__aeabi_d2iz>
 8002b06:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b0a:	0083      	lsls	r3, r0, #2
 8002b0c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	e001      	b.n	8002b18 <Set_Servo_Elevator.4+0x38>
    uint16_t Pulse_length = 500;
 8002b14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    }

    TIM1->CCR3=Pulse_length;
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <Set_Servo_Elevator.4+0x4c>)
 8002b1a:	63d3      	str	r3, [r2, #60]	; 0x3c
    return 0;
  }
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t Pulse_length = 500;
 8002b20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b24:	e7f8      	b.n	8002b18 <Set_Servo_Elevator.4+0x38>
 8002b26:	bf00      	nop
 8002b28:	40668000 	.word	0x40668000
 8002b2c:	40012c00 	.word	0x40012c00

08002b30 <Set_Servo_Rudder.0>:

  int Set_Servo_Rudder(double Angle) // from 0 to 180 degrees
  {
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	4604      	mov	r4, r0
 8002b34:	460d      	mov	r5, r1
    uint16_t Pulse_length = 500;
    if (Angle > 0  &&  Angle <= 180) {
 8002b36:	2200      	movs	r2, #0
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f7fd ffed 	bl	8000b18 <__aeabi_dcmpgt>
 8002b3e:	b188      	cbz	r0, 8002b64 <Set_Servo_Rudder.0+0x34>
 8002b40:	2200      	movs	r2, #0
 8002b42:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <Set_Servo_Rudder.0+0x48>)
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd ffd2 	bl	8000af0 <__aeabi_dcmple>
 8002b4c:	b180      	cbz	r0, 8002b70 <Set_Servo_Rudder.0+0x40>
        Pulse_length += (2700-500)/180 * (int)Angle;
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7fe f801 	bl	8000b58 <__aeabi_d2iz>
 8002b56:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002b5a:	0083      	lsls	r3, r0, #2
 8002b5c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	e001      	b.n	8002b68 <Set_Servo_Rudder.0+0x38>
    uint16_t Pulse_length = 500;
 8002b64:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    }

    TIM1->CCR4=Pulse_length;
 8002b68:	4a04      	ldr	r2, [pc, #16]	; (8002b7c <Set_Servo_Rudder.0+0x4c>)
 8002b6a:	6413      	str	r3, [r2, #64]	; 0x40
    return 0;
  }
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t Pulse_length = 500;
 8002b70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b74:	e7f8      	b.n	8002b68 <Set_Servo_Rudder.0+0x38>
 8002b76:	bf00      	nop
 8002b78:	40668000 	.word	0x40668000
 8002b7c:	40012c00 	.word	0x40012c00

08002b80 <Set_Servo_CargoHatch.5>:

  int Set_Servo_CargoHatch(double Angle) // from 0 to 180 degrees
  {
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	4604      	mov	r4, r0
 8002b84:	460d      	mov	r5, r1
    uint16_t Pulse_length = 500;
    if (Angle > 0  &&  Angle <= 180) {
 8002b86:	2200      	movs	r2, #0
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f7fd ffc5 	bl	8000b18 <__aeabi_dcmpgt>
 8002b8e:	b188      	cbz	r0, 8002bb4 <Set_Servo_CargoHatch.5+0x34>
 8002b90:	2200      	movs	r2, #0
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <Set_Servo_CargoHatch.5+0x48>)
 8002b94:	4620      	mov	r0, r4
 8002b96:	4629      	mov	r1, r5
 8002b98:	f7fd ffaa 	bl	8000af0 <__aeabi_dcmple>
 8002b9c:	b188      	cbz	r0, 8002bc2 <Set_Servo_CargoHatch.5+0x42>
        Pulse_length += (2700-500)/180 * (int)Angle;
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd ffd9 	bl	8000b58 <__aeabi_d2iz>
 8002ba6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002baa:	0083      	lsls	r3, r0, #2
 8002bac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	e001      	b.n	8002bb8 <Set_Servo_CargoHatch.5+0x38>
    uint16_t Pulse_length = 500;
 8002bb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    }

    TIM2->CCR1=Pulse_length;
 8002bb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bbc:	6353      	str	r3, [r2, #52]	; 0x34
    return 0;
  }
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t Pulse_length = 500;
 8002bc2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002bc6:	e7f7      	b.n	8002bb8 <Set_Servo_CargoHatch.5+0x38>
 8002bc8:	40668000 	.word	0x40668000

08002bcc <Set_Engine_Speed.1>:

  int Set_Engine_Speed(double Percentage) // from 0 to 100 percents
  {
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	4604      	mov	r4, r0
 8002bd0:	460d      	mov	r5, r1
    uint16_t Pulse_length = 500;
    if (Percentage > 0  &&  Percentage <= 180) {
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f7fd ff9f 	bl	8000b18 <__aeabi_dcmpgt>
 8002bda:	b198      	cbz	r0, 8002c04 <Set_Engine_Speed.1+0x38>
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <Set_Engine_Speed.1+0x4c>)
 8002be0:	4620      	mov	r0, r4
 8002be2:	4629      	mov	r1, r5
 8002be4:	f7fd ff84 	bl	8000af0 <__aeabi_dcmple>
 8002be8:	b198      	cbz	r0, 8002c12 <Set_Engine_Speed.1+0x46>
        Pulse_length += (2700-500)/100 * (int)Percentage;
 8002bea:	4620      	mov	r0, r4
 8002bec:	4629      	mov	r1, r5
 8002bee:	f7fd ffb3 	bl	8000b58 <__aeabi_d2iz>
 8002bf2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8002bf6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	e001      	b.n	8002c08 <Set_Engine_Speed.1+0x3c>
    uint16_t Pulse_length = 500;
 8002c04:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    }

    TIM2->CCR2=Pulse_length;
 8002c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c0c:	6393      	str	r3, [r2, #56]	; 0x38
    return 0;
  }
 8002c0e:	2000      	movs	r0, #0
 8002c10:	bd38      	pop	{r3, r4, r5, pc}
    uint16_t Pulse_length = 500;
 8002c12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c16:	e7f7      	b.n	8002c08 <Set_Engine_Speed.1+0x3c>
 8002c18:	40668000 	.word	0x40668000

08002c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c1c:	b086      	sub	sp, #24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <MX_GPIO_Init+0x74>)
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002c2e:	9200      	str	r2, [sp, #0]
 8002c30:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c32:	695a      	ldr	r2, [r3, #20]
 8002c34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c38:	615a      	str	r2, [r3, #20]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002c40:	9201      	str	r2, [sp, #4]
 8002c42:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002c4a:	615a      	str	r2, [r3, #20]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002c52:	9202      	str	r2, [sp, #8]
 8002c54:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c56:	695a      	ldr	r2, [r3, #20]
 8002c58:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002c5c:	615a      	str	r2, [r3, #20]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c64:	9203      	str	r2, [sp, #12]
 8002c66:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c6e:	615a      	str	r2, [r3, #20]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002c76:	9204      	str	r2, [sp, #16]
 8002c78:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c80:	615a      	str	r2, [r3, #20]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c88:	9305      	str	r3, [sp, #20]
 8002c8a:	9b05      	ldr	r3, [sp, #20]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c8c:	b006      	add	sp, #24
 8002c8e:	4770      	bx	lr
 8002c90:	40021000 	.word	0x40021000

08002c94 <Turn_Matrix>:
{
 8002c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c98:	ed2d 8b06 	vpush	{d8-d10}
 8002c9c:	b08d      	sub	sp, #52	; 0x34
 8002c9e:	eeb0 9a40 	vmov.f32	s18, s0
 8002ca2:	eef0 9a60 	vmov.f32	s19, s1
 8002ca6:	eeb0 8a41 	vmov.f32	s16, s2
 8002caa:	eef0 8a61 	vmov.f32	s17, s3
 8002cae:	eeb0 aa42 	vmov.f32	s20, s4
 8002cb2:	eef0 aa62 	vmov.f32	s21, s5
 8002cb6:	4682      	mov	sl, r0
 8002cb8:	468b      	mov	fp, r1
	A[0][0] = AT[0][0] = cos(Pitch) * cos(Yaw);
 8002cba:	eeb0 0a41 	vmov.f32	s0, s2
 8002cbe:	eef0 0a61 	vmov.f32	s1, s3
 8002cc2:	f007 fd4d 	bl	800a760 <cos>
 8002cc6:	ec57 6b10 	vmov	r6, r7, d0
 8002cca:	eeb0 0a49 	vmov.f32	s0, s18
 8002cce:	eef0 0a69 	vmov.f32	s1, s19
 8002cd2:	f007 fd45 	bl	800a760 <cos>
 8002cd6:	ec55 4b10 	vmov	r4, r5, d0
 8002cda:	ee10 2a10 	vmov	r2, s0
 8002cde:	462b      	mov	r3, r5
 8002ce0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002ce4:	4630      	mov	r0, r6
 8002ce6:	4639      	mov	r1, r7
 8002ce8:	f7fd fc86 	bl	80005f8 <__aeabi_dmul>
 8002cec:	e9cb 0100 	strd	r0, r1, [fp]
 8002cf0:	e9ca 0100 	strd	r0, r1, [sl]
	A[0][1] = AT[1][0] = - cos(Roll) * cos(Yaw) * sin(Pitch) + sin(Roll) * sin(Yaw);
 8002cf4:	eeb0 0a4a 	vmov.f32	s0, s20
 8002cf8:	eef0 0a6a 	vmov.f32	s1, s21
 8002cfc:	f007 fd30 	bl	800a760 <cos>
 8002d00:	ec51 0b10 	vmov	r0, r1, d0
 8002d04:	ee10 2a10 	vmov	r2, s0
 8002d08:	ed8d 0b00 	vstr	d0, [sp]
 8002d0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002d10:	4620      	mov	r0, r4
 8002d12:	4629      	mov	r1, r5
 8002d14:	f7fd fc70 	bl	80005f8 <__aeabi_dmul>
 8002d18:	4606      	mov	r6, r0
 8002d1a:	460f      	mov	r7, r1
 8002d1c:	eeb0 0a48 	vmov.f32	s0, s16
 8002d20:	eef0 0a68 	vmov.f32	s1, s17
 8002d24:	f007 fd7c 	bl	800a820 <sin>
 8002d28:	ec59 8b10 	vmov	r8, r9, d0
 8002d2c:	ee10 2a10 	vmov	r2, s0
 8002d30:	464b      	mov	r3, r9
 8002d32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8002d36:	4630      	mov	r0, r6
 8002d38:	4639      	mov	r1, r7
 8002d3a:	f7fd fc5d 	bl	80005f8 <__aeabi_dmul>
 8002d3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002d42:	eeb0 0a4a 	vmov.f32	s0, s20
 8002d46:	eef0 0a6a 	vmov.f32	s1, s21
 8002d4a:	f007 fd69 	bl	800a820 <sin>
 8002d4e:	ec57 6b10 	vmov	r6, r7, d0
 8002d52:	eeb0 0a49 	vmov.f32	s0, s18
 8002d56:	eef0 0a69 	vmov.f32	s1, s19
 8002d5a:	f007 fd61 	bl	800a820 <sin>
 8002d5e:	ec53 2b10 	vmov	r2, r3, d0
 8002d62:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002d66:	4630      	mov	r0, r6
 8002d68:	4639      	mov	r1, r7
 8002d6a:	f7fd fc45 	bl	80005f8 <__aeabi_dmul>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002d76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002d7a:	f7fd fa87 	bl	800028c <__adddf3>
 8002d7e:	e9cb 0106 	strd	r0, r1, [fp, #24]
 8002d82:	e9ca 0102 	strd	r0, r1, [sl, #8]
	A[0][2] = AT[2][0] = cos(Yaw) * sin(Roll) * sin(Pitch) + cos(Roll) * sin(Yaw);
 8002d86:	4632      	mov	r2, r6
 8002d88:	463b      	mov	r3, r7
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	f7fd fc33 	bl	80005f8 <__aeabi_dmul>
 8002d92:	460a      	mov	r2, r1
 8002d94:	4601      	mov	r1, r0
 8002d96:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4640      	mov	r0, r8
 8002da0:	4649      	mov	r1, r9
 8002da2:	f7fd fc29 	bl	80005f8 <__aeabi_dmul>
 8002da6:	4604      	mov	r4, r0
 8002da8:	460d      	mov	r5, r1
 8002daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002dae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002db2:	f7fd fc21 	bl	80005f8 <__aeabi_dmul>
 8002db6:	4606      	mov	r6, r0
 8002db8:	460f      	mov	r7, r1
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	f7fd fa63 	bl	800028c <__adddf3>
 8002dc6:	e9cb 010c 	strd	r0, r1, [fp, #48]	; 0x30
 8002dca:	e9ca 0104 	strd	r0, r1, [sl, #16]
	A[1][0] = AT[0][1] = sin(Pitch);
 8002dce:	e9cb 8902 	strd	r8, r9, [fp, #8]
 8002dd2:	e9ca 8906 	strd	r8, r9, [sl, #24]
	A[1][1] = AT[1][1] = cos(Roll) * cos(Pitch);
 8002dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002dda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8002dde:	4620      	mov	r0, r4
 8002de0:	4629      	mov	r1, r5
 8002de2:	f7fd fc09 	bl	80005f8 <__aeabi_dmul>
 8002de6:	e9cb 0108 	strd	r0, r1, [fp, #32]
 8002dea:	e9ca 0108 	strd	r0, r1, [sl, #32]
	A[1][2] = AT[2][1] = - cos(Pitch) * cos(Roll);
 8002dee:	4622      	mov	r2, r4
 8002df0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002df4:	4604      	mov	r4, r0
 8002df6:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8002dfa:	e9cb 450e 	strd	r4, r5, [fp, #56]	; 0x38
 8002dfe:	e9ca 450a 	strd	r4, r5, [sl, #40]	; 0x28
	A[2][0] = AT[2][0] = - cos(Pitch) * sin(Yaw);
 8002e02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e06:	f7fd fbf7 	bl	80005f8 <__aeabi_dmul>
 8002e0a:	e9cb 010c 	strd	r0, r1, [fp, #48]	; 0x30
 8002e0e:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
	A[2][1] = AT[1][2] = cos(Roll) * sin(Yaw) * sin(Pitch) + sin(Roll) * cos(Yaw);
 8002e12:	4632      	mov	r2, r6
 8002e14:	463b      	mov	r3, r7
 8002e16:	4640      	mov	r0, r8
 8002e18:	4649      	mov	r1, r9
 8002e1a:	f7fd fbed 	bl	80005f8 <__aeabi_dmul>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002e26:	f7fd fa31 	bl	800028c <__adddf3>
 8002e2a:	e9cb 010a 	strd	r0, r1, [fp, #40]	; 0x28
 8002e2e:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
	A[2][2] = AT[2][2] = - sin(Yaw) * sin(Roll) * sin(Pitch) + cos(Roll) * cos(Yaw);
 8002e32:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8002e36:	4618      	mov	r0, r3
 8002e38:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8002e3c:	4642      	mov	r2, r8
 8002e3e:	464b      	mov	r3, r9
 8002e40:	f7fd fbda 	bl	80005f8 <__aeabi_dmul>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8002e52:	f7fd fa1b 	bl	800028c <__adddf3>
 8002e56:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
 8002e5a:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
}
 8002e5e:	b00d      	add	sp, #52	; 0x34
 8002e60:	ecbd 8b06 	vpop	{d8-d10}
 8002e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e68 <Matrix_multiply>:
{
 8002e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6c:	4681      	mov	r9, r0
 8002e6e:	4688      	mov	r8, r1
 8002e70:	4692      	mov	sl, r2
	for(int i = 0; i < 3; i++) {
 8002e72:	2700      	movs	r7, #0
 8002e74:	e019      	b.n	8002eaa <Matrix_multiply+0x42>
	   C[i] += A[i][k] * B[k];
 8002e76:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8002e7a:	eb09 0ccc 	add.w	ip, r9, ip, lsl #3
 8002e7e:	eb0c 0cc4 	add.w	ip, ip, r4, lsl #3
 8002e82:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	e9dc 0100 	ldrd	r0, r1, [ip]
 8002e8e:	f7fd fbb3 	bl	80005f8 <__aeabi_dmul>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002e9a:	f7fd f9f7 	bl	800028c <__adddf3>
 8002e9e:	e9c5 0100 	strd	r0, r1, [r5]
	   for(int k = 0; k < 3; k++)
 8002ea2:	3401      	adds	r4, #1
 8002ea4:	2c02      	cmp	r4, #2
 8002ea6:	dde6      	ble.n	8002e76 <Matrix_multiply+0xe>
	for(int i = 0; i < 3; i++) {
 8002ea8:	3701      	adds	r7, #1
 8002eaa:	2f02      	cmp	r7, #2
 8002eac:	dc08      	bgt.n	8002ec0 <Matrix_multiply+0x58>
	   C[i] = 0;
 8002eae:	463e      	mov	r6, r7
 8002eb0:	eb0a 05c7 	add.w	r5, sl, r7, lsl #3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e9c5 2300 	strd	r2, r3, [r5]
	   for(int k = 0; k < 3; k++)
 8002ebc:	2400      	movs	r4, #0
 8002ebe:	e7f1      	b.n	8002ea4 <Matrix_multiply+0x3c>
}
 8002ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ec4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <Error_Handler+0x2>

08002ec8 <MX_I2C1_Init>:
{
 8002ec8:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8002eca:	4811      	ldr	r0, [pc, #68]	; (8002f10 <MX_I2C1_Init+0x48>)
 8002ecc:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <MX_I2C1_Init+0x4c>)
 8002ece:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002ed0:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_I2C1_Init+0x50>)
 8002ed2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002edc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ede:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ee0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ee2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ee4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ee6:	f002 fed4 	bl	8005c92 <HAL_I2C_Init>
 8002eea:	b950      	cbnz	r0, 8002f02 <MX_I2C1_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002eec:	2100      	movs	r1, #0
 8002eee:	4808      	ldr	r0, [pc, #32]	; (8002f10 <MX_I2C1_Init+0x48>)
 8002ef0:	f003 f992 	bl	8006218 <HAL_I2CEx_ConfigAnalogFilter>
 8002ef4:	b938      	cbnz	r0, 8002f06 <MX_I2C1_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4805      	ldr	r0, [pc, #20]	; (8002f10 <MX_I2C1_Init+0x48>)
 8002efa:	f003 f9bb 	bl	8006274 <HAL_I2CEx_ConfigDigitalFilter>
 8002efe:	b920      	cbnz	r0, 8002f0a <MX_I2C1_Init+0x42>
}
 8002f00:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002f02:	f7ff ffdf 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 8002f06:	f7ff ffdd 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 8002f0a:	f7ff ffdb 	bl	8002ec4 <Error_Handler>
 8002f0e:	bf00      	nop
 8002f10:	2000083c 	.word	0x2000083c
 8002f14:	40005400 	.word	0x40005400
 8002f18:	2000090e 	.word	0x2000090e

08002f1c <MX_USART1_UART_Init>:
{
 8002f1c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8002f1e:	480b      	ldr	r0, [pc, #44]	; (8002f4c <MX_USART1_UART_Init+0x30>)
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <MX_USART1_UART_Init+0x34>)
 8002f22:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8002f24:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002f28:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f2e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f30:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f32:	220c      	movs	r2, #12
 8002f34:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f36:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f38:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f3a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f3c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f3e:	f004 fda2 	bl	8007a86 <HAL_UART_Init>
 8002f42:	b900      	cbnz	r0, 8002f46 <MX_USART1_UART_Init+0x2a>
}
 8002f44:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002f46:	f7ff ffbd 	bl	8002ec4 <Error_Handler>
 8002f4a:	bf00      	nop
 8002f4c:	2000097c 	.word	0x2000097c
 8002f50:	40013800 	.word	0x40013800

08002f54 <MX_I2C2_Init>:
{
 8002f54:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8002f56:	4811      	ldr	r0, [pc, #68]	; (8002f9c <MX_I2C2_Init+0x48>)
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <MX_I2C2_Init+0x4c>)
 8002f5a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <MX_I2C2_Init+0x50>)
 8002f5e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f64:	2201      	movs	r2, #1
 8002f66:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f68:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002f6a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f6c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f6e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f70:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f72:	f002 fe8e 	bl	8005c92 <HAL_I2C_Init>
 8002f76:	b950      	cbnz	r0, 8002f8e <MX_I2C2_Init+0x3a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4808      	ldr	r0, [pc, #32]	; (8002f9c <MX_I2C2_Init+0x48>)
 8002f7c:	f003 f94c 	bl	8006218 <HAL_I2CEx_ConfigAnalogFilter>
 8002f80:	b938      	cbnz	r0, 8002f92 <MX_I2C2_Init+0x3e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002f82:	2100      	movs	r1, #0
 8002f84:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_I2C2_Init+0x48>)
 8002f86:	f003 f975 	bl	8006274 <HAL_I2CEx_ConfigDigitalFilter>
 8002f8a:	b920      	cbnz	r0, 8002f96 <MX_I2C2_Init+0x42>
}
 8002f8c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002f8e:	f7ff ff99 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 8002f92:	f7ff ff97 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 8002f96:	f7ff ff95 	bl	8002ec4 <Error_Handler>
 8002f9a:	bf00      	nop
 8002f9c:	20000890 	.word	0x20000890
 8002fa0:	40005800 	.word	0x40005800
 8002fa4:	2000090e 	.word	0x2000090e

08002fa8 <MX_TIM1_Init>:
{
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	b096      	sub	sp, #88	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fac:	2400      	movs	r4, #0
 8002fae:	9413      	str	r4, [sp, #76]	; 0x4c
 8002fb0:	9414      	str	r4, [sp, #80]	; 0x50
 8002fb2:	9415      	str	r4, [sp, #84]	; 0x54
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fb4:	940c      	str	r4, [sp, #48]	; 0x30
 8002fb6:	940d      	str	r4, [sp, #52]	; 0x34
 8002fb8:	940e      	str	r4, [sp, #56]	; 0x38
 8002fba:	940f      	str	r4, [sp, #60]	; 0x3c
 8002fbc:	9410      	str	r4, [sp, #64]	; 0x40
 8002fbe:	9411      	str	r4, [sp, #68]	; 0x44
 8002fc0:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fc2:	222c      	movs	r2, #44	; 0x2c
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	a801      	add	r0, sp, #4
 8002fc8:	f005 fb77 	bl	80086ba <memset>
  htim1.Instance = TIM1;
 8002fcc:	4831      	ldr	r0, [pc, #196]	; (8003094 <MX_TIM1_Init+0xec>)
 8002fce:	4b32      	ldr	r3, [pc, #200]	; (8003098 <MX_TIM1_Init+0xf0>)
 8002fd0:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 23;
 8002fd2:	2317      	movs	r3, #23
 8002fd4:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd6:	6084      	str	r4, [r0, #8]
  htim1.Init.Period = 20000;
 8002fd8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002fdc:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fde:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fe0:	6144      	str	r4, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fe2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fe4:	f004 f888 	bl	80070f8 <HAL_TIM_PWM_Init>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d144      	bne.n	8003076 <MX_TIM1_Init+0xce>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fec:	2300      	movs	r3, #0
 8002fee:	9313      	str	r3, [sp, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ff0:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff2:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ff4:	a913      	add	r1, sp, #76	; 0x4c
 8002ff6:	4827      	ldr	r0, [pc, #156]	; (8003094 <MX_TIM1_Init+0xec>)
 8002ff8:	f004 fa50 	bl	800749c <HAL_TIMEx_MasterConfigSynchronization>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d13c      	bne.n	800307a <MX_TIM1_Init+0xd2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003000:	2360      	movs	r3, #96	; 0x60
 8003002:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003004:	2200      	movs	r2, #0
 8003006:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003008:	920e      	str	r2, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800300a:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800300c:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800300e:	9211      	str	r2, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003010:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003012:	a90c      	add	r1, sp, #48	; 0x30
 8003014:	481f      	ldr	r0, [pc, #124]	; (8003094 <MX_TIM1_Init+0xec>)
 8003016:	f004 f8e5 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 800301a:	2800      	cmp	r0, #0
 800301c:	d12f      	bne.n	800307e <MX_TIM1_Init+0xd6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800301e:	2204      	movs	r2, #4
 8003020:	a90c      	add	r1, sp, #48	; 0x30
 8003022:	481c      	ldr	r0, [pc, #112]	; (8003094 <MX_TIM1_Init+0xec>)
 8003024:	f004 f8de 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 8003028:	bb58      	cbnz	r0, 8003082 <MX_TIM1_Init+0xda>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800302a:	2208      	movs	r2, #8
 800302c:	a90c      	add	r1, sp, #48	; 0x30
 800302e:	4819      	ldr	r0, [pc, #100]	; (8003094 <MX_TIM1_Init+0xec>)
 8003030:	f004 f8d8 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 8003034:	bb38      	cbnz	r0, 8003086 <MX_TIM1_Init+0xde>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003036:	220c      	movs	r2, #12
 8003038:	a90c      	add	r1, sp, #48	; 0x30
 800303a:	4816      	ldr	r0, [pc, #88]	; (8003094 <MX_TIM1_Init+0xec>)
 800303c:	f004 f8d2 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 8003040:	bb18      	cbnz	r0, 800308a <MX_TIM1_Init+0xe2>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	9301      	str	r3, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003046:	9302      	str	r3, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003048:	9303      	str	r3, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800304a:	9304      	str	r3, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800304c:	9305      	str	r3, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800304e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003052:	9206      	str	r2, [sp, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003054:	9307      	str	r3, [sp, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003056:	9308      	str	r3, [sp, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003058:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305c:	9209      	str	r2, [sp, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800305e:	930a      	str	r3, [sp, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003060:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003062:	a901      	add	r1, sp, #4
 8003064:	480b      	ldr	r0, [pc, #44]	; (8003094 <MX_TIM1_Init+0xec>)
 8003066:	f004 fa61 	bl	800752c <HAL_TIMEx_ConfigBreakDeadTime>
 800306a:	b980      	cbnz	r0, 800308e <MX_TIM1_Init+0xe6>
  HAL_TIM_MspPostInit(&htim1);
 800306c:	4809      	ldr	r0, [pc, #36]	; (8003094 <MX_TIM1_Init+0xec>)
 800306e:	f002 f903 	bl	8005278 <HAL_TIM_MspPostInit>
}
 8003072:	b016      	add	sp, #88	; 0x58
 8003074:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003076:	f7ff ff25 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 800307a:	f7ff ff23 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 800307e:	f7ff ff21 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 8003082:	f7ff ff1f 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 8003086:	f7ff ff1d 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 800308a:	f7ff ff1b 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 800308e:	f7ff ff19 	bl	8002ec4 <Error_Handler>
 8003092:	bf00      	nop
 8003094:	200008e4 	.word	0x200008e4
 8003098:	40012c00 	.word	0x40012c00

0800309c <MX_TIM2_Init>:
{
 800309c:	b500      	push	{lr}
 800309e:	b08b      	sub	sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a0:	2300      	movs	r3, #0
 80030a2:	9307      	str	r3, [sp, #28]
 80030a4:	9308      	str	r3, [sp, #32]
 80030a6:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	9302      	str	r3, [sp, #8]
 80030ae:	9303      	str	r3, [sp, #12]
 80030b0:	9304      	str	r3, [sp, #16]
 80030b2:	9305      	str	r3, [sp, #20]
 80030b4:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 80030b6:	481b      	ldr	r0, [pc, #108]	; (8003124 <MX_TIM2_Init+0x88>)
 80030b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80030bc:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 23;
 80030be:	2217      	movs	r2, #23
 80030c0:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c2:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 20000;
 80030c4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80030c8:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ca:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030cc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80030ce:	f004 f813 	bl	80070f8 <HAL_TIM_PWM_Init>
 80030d2:	b9f0      	cbnz	r0, 8003112 <MX_TIM2_Init+0x76>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030da:	a907      	add	r1, sp, #28
 80030dc:	4811      	ldr	r0, [pc, #68]	; (8003124 <MX_TIM2_Init+0x88>)
 80030de:	f004 f9dd 	bl	800749c <HAL_TIMEx_MasterConfigSynchronization>
 80030e2:	b9c0      	cbnz	r0, 8003116 <MX_TIM2_Init+0x7a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030e4:	2360      	movs	r3, #96	; 0x60
 80030e6:	9300      	str	r3, [sp, #0]
  sConfigOC.Pulse = 0;
 80030e8:	2200      	movs	r2, #0
 80030ea:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030ec:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ee:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030f0:	4669      	mov	r1, sp
 80030f2:	480c      	ldr	r0, [pc, #48]	; (8003124 <MX_TIM2_Init+0x88>)
 80030f4:	f004 f876 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 80030f8:	b978      	cbnz	r0, 800311a <MX_TIM2_Init+0x7e>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030fa:	2204      	movs	r2, #4
 80030fc:	4669      	mov	r1, sp
 80030fe:	4809      	ldr	r0, [pc, #36]	; (8003124 <MX_TIM2_Init+0x88>)
 8003100:	f004 f870 	bl	80071e4 <HAL_TIM_PWM_ConfigChannel>
 8003104:	b958      	cbnz	r0, 800311e <MX_TIM2_Init+0x82>
  HAL_TIM_MspPostInit(&htim2);
 8003106:	4807      	ldr	r0, [pc, #28]	; (8003124 <MX_TIM2_Init+0x88>)
 8003108:	f002 f8b6 	bl	8005278 <HAL_TIM_MspPostInit>
}
 800310c:	b00b      	add	sp, #44	; 0x2c
 800310e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003112:	f7ff fed7 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 8003116:	f7ff fed5 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 800311a:	f7ff fed3 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 800311e:	f7ff fed1 	bl	8002ec4 <Error_Handler>
 8003122:	bf00      	nop
 8003124:	20000930 	.word	0x20000930

08003128 <MX_USART2_UART_Init>:
{
 8003128:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800312a:	480b      	ldr	r0, [pc, #44]	; (8003158 <MX_USART2_UART_Init+0x30>)
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <MX_USART2_UART_Init+0x34>)
 800312e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 38400;
 8003130:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8003134:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003136:	2300      	movs	r3, #0
 8003138:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800313a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800313c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800313e:	220c      	movs	r2, #12
 8003140:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003142:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003144:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003146:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003148:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800314a:	f004 fc9c 	bl	8007a86 <HAL_UART_Init>
 800314e:	b900      	cbnz	r0, 8003152 <MX_USART2_UART_Init+0x2a>
}
 8003150:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003152:	f7ff feb7 	bl	8002ec4 <Error_Handler>
 8003156:	bf00      	nop
 8003158:	20000a04 	.word	0x20000a04
 800315c:	40004400 	.word	0x40004400

08003160 <MX_USART3_UART_Init>:
{
 8003160:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8003162:	480b      	ldr	r0, [pc, #44]	; (8003190 <MX_USART3_UART_Init+0x30>)
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <MX_USART3_UART_Init+0x34>)
 8003166:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 38400;
 8003168:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800316c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800316e:	2300      	movs	r3, #0
 8003170:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003172:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003174:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003176:	220c      	movs	r2, #12
 8003178:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800317a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800317c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800317e:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003180:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003182:	f004 fc80 	bl	8007a86 <HAL_UART_Init>
 8003186:	b900      	cbnz	r0, 800318a <MX_USART3_UART_Init+0x2a>
}
 8003188:	bd08      	pop	{r3, pc}
    Error_Handler();
 800318a:	f7ff fe9b 	bl	8002ec4 <Error_Handler>
 800318e:	bf00      	nop
 8003190:	20000a8c 	.word	0x20000a8c
 8003194:	40004800 	.word	0x40004800

08003198 <SystemClock_Config>:
{
 8003198:	b500      	push	{lr}
 800319a:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800319c:	2228      	movs	r2, #40	; 0x28
 800319e:	2100      	movs	r1, #0
 80031a0:	a814      	add	r0, sp, #80	; 0x50
 80031a2:	f005 fa8a 	bl	80086ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031a6:	2100      	movs	r1, #0
 80031a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80031aa:	9110      	str	r1, [sp, #64]	; 0x40
 80031ac:	9111      	str	r1, [sp, #68]	; 0x44
 80031ae:	9112      	str	r1, [sp, #72]	; 0x48
 80031b0:	9113      	str	r1, [sp, #76]	; 0x4c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031b2:	223c      	movs	r2, #60	; 0x3c
 80031b4:	4668      	mov	r0, sp
 80031b6:	f005 fa80 	bl	80086ba <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031ba:	2302      	movs	r3, #2
 80031bc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031be:	2201      	movs	r2, #1
 80031c0:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031c2:	2210      	movs	r2, #16
 80031c4:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031c6:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80031c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031cc:	931d      	str	r3, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ce:	a814      	add	r0, sp, #80	; 0x50
 80031d0:	f003 f87c 	bl	80062cc <HAL_RCC_OscConfig>
 80031d4:	b9e0      	cbnz	r0, 8003210 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031d6:	230f      	movs	r3, #15
 80031d8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031da:	2302      	movs	r3, #2
 80031dc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031de:	2100      	movs	r1, #0
 80031e0:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031e2:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031e4:	9113      	str	r1, [sp, #76]	; 0x4c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031e6:	a80f      	add	r0, sp, #60	; 0x3c
 80031e8:	f003 fbc0 	bl	800696c <HAL_RCC_ClockConfig>
 80031ec:	b990      	cbnz	r0, 8003214 <SystemClock_Config+0x7c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80031ee:	f241 0367 	movw	r3, #4199	; 0x1067
 80031f2:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031f4:	2300      	movs	r3, #0
 80031f6:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031f8:	9303      	str	r3, [sp, #12]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80031fa:	9304      	str	r3, [sp, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80031fc:	9307      	str	r3, [sp, #28]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 80031fe:	9308      	str	r3, [sp, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8003200:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003202:	4668      	mov	r0, sp
 8003204:	f003 fcb8 	bl	8006b78 <HAL_RCCEx_PeriphCLKConfig>
 8003208:	b930      	cbnz	r0, 8003218 <SystemClock_Config+0x80>
}
 800320a:	b01f      	add	sp, #124	; 0x7c
 800320c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003210:	f7ff fe58 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 8003214:	f7ff fe56 	bl	8002ec4 <Error_Handler>
    Error_Handler();
 8003218:	f7ff fe54 	bl	8002ec4 <Error_Handler>
 800321c:	0000      	movs	r0, r0
	...

08003220 <main>:
{
 8003220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003224:	ed2d 8b0e 	vpush	{d8-d14}
 8003228:	b0b7      	sub	sp, #220	; 0xdc
  HAL_Init();
 800322a:	f002 f9f1 	bl	8005610 <HAL_Init>
  SystemClock_Config();
 800322e:	f7ff ffb3 	bl	8003198 <SystemClock_Config>
  MX_GPIO_Init();
 8003232:	f7ff fcf3 	bl	8002c1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003236:	f7ff fe47 	bl	8002ec8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800323a:	f7ff fe6f 	bl	8002f1c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800323e:	f7ff fe89 	bl	8002f54 <MX_I2C2_Init>
  MX_TIM1_Init();
 8003242:	f7ff feb1 	bl	8002fa8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003246:	f7ff ff29 	bl	800309c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800324a:	f7ff ff6d 	bl	8003128 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800324e:	f7ff ff87 	bl	8003160 <MX_USART3_UART_Init>
  mpu6050_init();
 8003252:	f001 fc7d 	bl	8004b50 <mpu6050_init>
  hmc5883_init();
 8003256:	f7fe fce1 	bl	8001c1c <hmc5883_init>
  ms4525_init();
 800325a:	f001 fe7d 	bl	8004f58 <ms4525_init>
  bmp180_init();
 800325e:	f7fe fcd9 	bl	8001c14 <bmp180_init>
  HAL_Delay (500);
 8003262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003266:	f002 f9f7 	bl	8005658 <HAL_Delay>
  AltBarr0 = bmp180_getalt(0);
 800326a:	2000      	movs	r0, #0
 800326c:	f7fe fc9c 	bl	8001ba8 <bmp180_getalt>
 8003270:	ee10 0a10 	vmov	r0, s0
 8003274:	f7fd f968 	bl	8000548 <__aeabi_f2d>
 8003278:	4b9d      	ldr	r3, [pc, #628]	; (80034f0 <main+0x2d0>)
 800327a:	e9c3 0100 	strd	r0, r1, [r3]
  while (getGPS(&gpsData) != 0);
 800327e:	489d      	ldr	r0, [pc, #628]	; (80034f4 <main+0x2d4>)
 8003280:	f7fe f8c8 	bl	8001414 <getGPS>
 8003284:	2800      	cmp	r0, #0
 8003286:	d1fa      	bne.n	800327e <main+0x5e>
  RV0.y = gpsData.ggastruct.alt.altitude;
 8003288:	4b9a      	ldr	r3, [pc, #616]	; (80034f4 <main+0x2d4>)
 800328a:	6a18      	ldr	r0, [r3, #32]
 800328c:	f7fd f95c 	bl	8000548 <__aeabi_f2d>
 8003290:	4b99      	ldr	r3, [pc, #612]	; (80034f8 <main+0x2d8>)
 8003292:	e9c3 0102 	strd	r0, r1, [r3, #8]
  HAL_Delay (500);
 8003296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800329a:	f002 f9dd 	bl	8005658 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800329e:	4c97      	ldr	r4, [pc, #604]	; (80034fc <main+0x2dc>)
 80032a0:	2100      	movs	r1, #0
 80032a2:	4620      	mov	r0, r4
 80032a4:	f004 f84a 	bl	800733c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80032a8:	2104      	movs	r1, #4
 80032aa:	4620      	mov	r0, r4
 80032ac:	f004 f846 	bl	800733c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80032b0:	2108      	movs	r1, #8
 80032b2:	4620      	mov	r0, r4
 80032b4:	f004 f842 	bl	800733c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80032b8:	210c      	movs	r1, #12
 80032ba:	4620      	mov	r0, r4
 80032bc:	f004 f83e 	bl	800733c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80032c0:	4c8f      	ldr	r4, [pc, #572]	; (8003500 <main+0x2e0>)
 80032c2:	2100      	movs	r1, #0
 80032c4:	4620      	mov	r0, r4
 80032c6:	f004 f839 	bl	800733c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80032ca:	2104      	movs	r1, #4
 80032cc:	4620      	mov	r0, r4
 80032ce:	f004 f835 	bl	800733c <HAL_TIM_PWM_Start>
  LdropG = Vpolet * sqrt(2 * Hud / 9.8);
 80032d2:	4b8c      	ldr	r3, [pc, #560]	; (8003504 <main+0x2e4>)
 80032d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	f7fc ffd6 	bl	800028c <__adddf3>
 80032e0:	a379      	add	r3, pc, #484	; (adr r3, 80034c8 <main+0x2a8>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f7fd fab1 	bl	800084c <__aeabi_ddiv>
 80032ea:	ec41 0b10 	vmov	d0, r0, r1
 80032ee:	f007 fa0b 	bl	800a708 <sqrt>
 80032f2:	ec51 0b10 	vmov	r0, r1, d0
 80032f6:	2200      	movs	r2, #0
 80032f8:	4b83      	ldr	r3, [pc, #524]	; (8003508 <main+0x2e8>)
 80032fa:	f7fd f97d 	bl	80005f8 <__aeabi_dmul>
 80032fe:	4b83      	ldr	r3, [pc, #524]	; (800350c <main+0x2ec>)
 8003300:	e9c3 0100 	strd	r0, r1, [r3]
  Set_Servo_RightWing(angle_aileron);
 8003304:	4c82      	ldr	r4, [pc, #520]	; (8003510 <main+0x2f0>)
 8003306:	e9d4 0100 	ldrd	r0, r1, [r4]
 800330a:	f7ff fb99 	bl	8002a40 <Set_Servo_RightWing.2>
  Set_Servo_LeftWing(angle_aileron);
 800330e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003312:	f7ff fbbd 	bl	8002a90 <Set_Servo_LeftWing.3>
  Set_Servo_Elevator(angle_rudder_up);
 8003316:	4b7f      	ldr	r3, [pc, #508]	; (8003514 <main+0x2f4>)
 8003318:	e9d3 0100 	ldrd	r0, r1, [r3]
 800331c:	f7ff fbe0 	bl	8002ae0 <Set_Servo_Elevator.4>
  Set_Servo_Rudder(angle_rudder_course);
 8003320:	4b7d      	ldr	r3, [pc, #500]	; (8003518 <main+0x2f8>)
 8003322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003326:	f7ff fc03 	bl	8002b30 <Set_Servo_Rudder.0>
  Set_Servo_CargoHatch(0);
 800332a:	2000      	movs	r0, #0
 800332c:	2100      	movs	r1, #0
 800332e:	f7ff fc27 	bl	8002b80 <Set_Servo_CargoHatch.5>
  Set_Engine_Speed(throttle);
 8003332:	4b7a      	ldr	r3, [pc, #488]	; (800351c <main+0x2fc>)
 8003334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003338:	f7ff fc48 	bl	8002bcc <Set_Engine_Speed.1>
 800333c:	f001 b98a 	b.w	8004654 <main+0x1434>
			  RV.x = 6378000 * (gpsData.ggastruct.lcation.latitude * M_PI/180 - RV0.x);
 8003340:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <main+0x2d4>)
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	f7fd f900 	bl	8000548 <__aeabi_f2d>
 8003348:	a361      	add	r3, pc, #388	; (adr r3, 80034d0 <main+0x2b0>)
 800334a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334e:	f7fd f953 	bl	80005f8 <__aeabi_dmul>
 8003352:	2200      	movs	r2, #0
 8003354:	4b72      	ldr	r3, [pc, #456]	; (8003520 <main+0x300>)
 8003356:	f7fd fa79 	bl	800084c <__aeabi_ddiv>
 800335a:	4b67      	ldr	r3, [pc, #412]	; (80034f8 <main+0x2d8>)
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f7fc ff92 	bl	8000288 <__aeabi_dsub>
 8003364:	a35c      	add	r3, pc, #368	; (adr r3, 80034d8 <main+0x2b8>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f7fd f945 	bl	80005f8 <__aeabi_dmul>
 800336e:	4b6d      	ldr	r3, [pc, #436]	; (8003524 <main+0x304>)
 8003370:	e9c3 0100 	strd	r0, r1, [r3]
 8003374:	f001 b99a 	b.w	80046ac <main+0x148c>
			  RV.z = 6378000 * cos(gpsData.ggastruct.lcation.latitude * M_PI/180) * (gpsData.ggastruct.lcation.longitude * M_PI/180 - RV0.z);
 8003378:	4e5e      	ldr	r6, [pc, #376]	; (80034f4 <main+0x2d4>)
 800337a:	6830      	ldr	r0, [r6, #0]
 800337c:	f7fd f8e4 	bl	8000548 <__aeabi_f2d>
 8003380:	a353      	add	r3, pc, #332	; (adr r3, 80034d0 <main+0x2b0>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	f7fd f937 	bl	80005f8 <__aeabi_dmul>
 800338a:	2200      	movs	r2, #0
 800338c:	4b64      	ldr	r3, [pc, #400]	; (8003520 <main+0x300>)
 800338e:	f7fd fa5d 	bl	800084c <__aeabi_ddiv>
 8003392:	ec41 0b10 	vmov	d0, r0, r1
 8003396:	f007 f9e3 	bl	800a760 <cos>
 800339a:	ec51 0b10 	vmov	r0, r1, d0
 800339e:	a34e      	add	r3, pc, #312	; (adr r3, 80034d8 <main+0x2b8>)
 80033a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a4:	f7fd f928 	bl	80005f8 <__aeabi_dmul>
 80033a8:	4604      	mov	r4, r0
 80033aa:	460d      	mov	r5, r1
 80033ac:	68b0      	ldr	r0, [r6, #8]
 80033ae:	f7fd f8cb 	bl	8000548 <__aeabi_f2d>
 80033b2:	a347      	add	r3, pc, #284	; (adr r3, 80034d0 <main+0x2b0>)
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f7fd f91e 	bl	80005f8 <__aeabi_dmul>
 80033bc:	2200      	movs	r2, #0
 80033be:	4b58      	ldr	r3, [pc, #352]	; (8003520 <main+0x300>)
 80033c0:	f7fd fa44 	bl	800084c <__aeabi_ddiv>
 80033c4:	4b4c      	ldr	r3, [pc, #304]	; (80034f8 <main+0x2d8>)
 80033c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033ca:	f7fc ff5d 	bl	8000288 <__aeabi_dsub>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	f7fd f90f 	bl	80005f8 <__aeabi_dmul>
 80033da:	4b52      	ldr	r3, [pc, #328]	; (8003524 <main+0x304>)
 80033dc:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80033e0:	f001 b99d 	b.w	800471e <main+0x14fe>
	  beta = VaM > 0 ?  asin(Va[2] / VaM) : 0;
 80033e4:	4622      	mov	r2, r4
 80033e6:	462b      	mov	r3, r5
 80033e8:	ec51 0b18 	vmov	r0, r1, d8
 80033ec:	f7fd fa2e 	bl	800084c <__aeabi_ddiv>
 80033f0:	ec41 0b10 	vmov	d0, r0, r1
 80033f4:	f007 f8e4 	bl	800a5c0 <asin>
 80033f8:	f001 bb1a 	b.w	8004a30 <main+0x1810>
	  a_traj = VelM > 0 ? (VelV.y >= 0 ? asin(VelV.y/VelM) : 2*M_PI - asin(VelV.y/VelM)) : 0;
 80033fc:	ec53 2b18 	vmov	r2, r3, d8
 8003400:	4640      	mov	r0, r8
 8003402:	4649      	mov	r1, r9
 8003404:	f7fd fa22 	bl	800084c <__aeabi_ddiv>
 8003408:	ec41 0b10 	vmov	d0, r0, r1
 800340c:	f007 f8d8 	bl	800a5c0 <asin>
 8003410:	ec53 2b10 	vmov	r2, r3, d0
 8003414:	a132      	add	r1, pc, #200	; (adr r1, 80034e0 <main+0x2c0>)
 8003416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800341a:	f7fc ff35 	bl	8000288 <__aeabi_dsub>
 800341e:	ec41 0b19 	vmov	d9, r0, r1
 8003422:	e001      	b.n	8003428 <main+0x208>
 8003424:	ed9f 9b30 	vldr	d9, [pc, #192]	; 80034e8 <main+0x2c8>
 8003428:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <main+0x308>)
 800342a:	ed83 9b00 	vstr	d9, [r3]
	  phi_traj = VelP > 0 ? (VelV.x >= 0 ? (VelV.z >= 0 ? 2*M_PI - asin(VelV.z/VelP) : asin(VelV.z/VelP)) : M_PI + asin(VelV.z/VelP)) : 0;
 800342e:	2200      	movs	r2, #0
 8003430:	2300      	movs	r3, #0
 8003432:	4620      	mov	r0, r4
 8003434:	4629      	mov	r1, r5
 8003436:	f7fd fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 800343a:	2800      	cmp	r0, #0
 800343c:	d076      	beq.n	800352c <main+0x30c>
 800343e:	2200      	movs	r2, #0
 8003440:	2300      	movs	r3, #0
 8003442:	ec51 0b1b 	vmov	r0, r1, d11
 8003446:	f7fd fb5d 	bl	8000b04 <__aeabi_dcmpge>
 800344a:	b348      	cbz	r0, 80034a0 <main+0x280>
 800344c:	2200      	movs	r2, #0
 800344e:	2300      	movs	r3, #0
 8003450:	ec51 0b1a 	vmov	r0, r1, d10
 8003454:	f7fd fb56 	bl	8000b04 <__aeabi_dcmpge>
 8003458:	b198      	cbz	r0, 8003482 <main+0x262>
 800345a:	4622      	mov	r2, r4
 800345c:	462b      	mov	r3, r5
 800345e:	ec51 0b1a 	vmov	r0, r1, d10
 8003462:	f7fd f9f3 	bl	800084c <__aeabi_ddiv>
 8003466:	ec41 0b10 	vmov	d0, r0, r1
 800346a:	f007 f8a9 	bl	800a5c0 <asin>
 800346e:	ec53 2b10 	vmov	r2, r3, d0
 8003472:	a11b      	add	r1, pc, #108	; (adr r1, 80034e0 <main+0x2c0>)
 8003474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003478:	f7fc ff06 	bl	8000288 <__aeabi_dsub>
 800347c:	ec41 0b11 	vmov	d1, r0, r1
 8003480:	e056      	b.n	8003530 <main+0x310>
 8003482:	4622      	mov	r2, r4
 8003484:	462b      	mov	r3, r5
 8003486:	ec51 0b1a 	vmov	r0, r1, d10
 800348a:	f7fd f9df 	bl	800084c <__aeabi_ddiv>
 800348e:	ec41 0b10 	vmov	d0, r0, r1
 8003492:	f007 f895 	bl	800a5c0 <asin>
 8003496:	eeb0 1a40 	vmov.f32	s2, s0
 800349a:	eef0 1a60 	vmov.f32	s3, s1
 800349e:	e047      	b.n	8003530 <main+0x310>
 80034a0:	4622      	mov	r2, r4
 80034a2:	462b      	mov	r3, r5
 80034a4:	ec51 0b1a 	vmov	r0, r1, d10
 80034a8:	f7fd f9d0 	bl	800084c <__aeabi_ddiv>
 80034ac:	ec41 0b10 	vmov	d0, r0, r1
 80034b0:	f007 f886 	bl	800a5c0 <asin>
 80034b4:	ec51 0b10 	vmov	r0, r1, d0
 80034b8:	a305      	add	r3, pc, #20	; (adr r3, 80034d0 <main+0x2b0>)
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	f7fc fee5 	bl	800028c <__adddf3>
 80034c2:	ec41 0b11 	vmov	d1, r0, r1
 80034c6:	e033      	b.n	8003530 <main+0x310>
 80034c8:	9999999a 	.word	0x9999999a
 80034cc:	40239999 	.word	0x40239999
 80034d0:	54442d18 	.word	0x54442d18
 80034d4:	400921fb 	.word	0x400921fb
 80034d8:	00000000 	.word	0x00000000
 80034dc:	41585484 	.word	0x41585484
 80034e0:	54442d18 	.word	0x54442d18
 80034e4:	401921fb 	.word	0x401921fb
	...
 80034f0:	20000698 	.word	0x20000698
 80034f4:	200007f8 	.word	0x200007f8
 80034f8:	20000718 	.word	0x20000718
 80034fc:	200008e4 	.word	0x200008e4
 8003500:	20000930 	.word	0x20000930
 8003504:	20000030 	.word	0x20000030
 8003508:	40340000 	.word	0x40340000
 800350c:	200006a8 	.word	0x200006a8
 8003510:	20000010 	.word	0x20000010
 8003514:	20000020 	.word	0x20000020
 8003518:	20000018 	.word	0x20000018
 800351c:	20000b78 	.word	0x20000b78
 8003520:	40668000 	.word	0x40668000
 8003524:	20000700 	.word	0x20000700
 8003528:	20000780 	.word	0x20000780
 800352c:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 80037c8 <main+0x5a8>
 8003530:	4bab      	ldr	r3, [pc, #684]	; (80037e0 <main+0x5c0>)
 8003532:	ed83 1b00 	vstr	d1, [r3]
	  if (i == 1) Vslet_Trajectory(a_traj, phi_traj, RV.x, RV.y, RV.z);
 8003536:	4bab      	ldr	r3, [pc, #684]	; (80037e4 <main+0x5c4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d052      	beq.n	80035e4 <main+0x3c4>
	  if (UpT && Npoint == trajUP_Length - 1)
 800353e:	4baa      	ldr	r3, [pc, #680]	; (80037e8 <main+0x5c8>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b133      	cbz	r3, 8003552 <main+0x332>
 8003544:	4ba9      	ldr	r3, [pc, #676]	; (80037ec <main+0x5cc>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3b01      	subs	r3, #1
 800354a:	4aa9      	ldr	r2, [pc, #676]	; (80037f0 <main+0x5d0>)
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	4293      	cmp	r3, r2
 8003550:	d056      	beq.n	8003600 <main+0x3e0>
	  P_current = Get_point_traj(Npoint, UpT);
 8003552:	4ba5      	ldr	r3, [pc, #660]	; (80037e8 <main+0x5c8>)
 8003554:	781a      	ldrb	r2, [r3, #0]
 8003556:	4ba6      	ldr	r3, [pc, #664]	; (80037f0 <main+0x5d0>)
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	a816      	add	r0, sp, #88	; 0x58
 800355c:	f002 f805 	bl	800556a <Get_point_traj>
 8003560:	4da4      	ldr	r5, [pc, #656]	; (80037f4 <main+0x5d4>)
 8003562:	ac16      	add	r4, sp, #88	; 0x58
 8003564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003568:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800356c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	  if (Ltarget < 1 && traj1_Length >= Npoint + 2)
 8003570:	2200      	movs	r2, #0
 8003572:	4ba1      	ldr	r3, [pc, #644]	; (80037f8 <main+0x5d8>)
 8003574:	49a1      	ldr	r1, [pc, #644]	; (80037fc <main+0x5dc>)
 8003576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800357a:	f7fd faaf 	bl	8000adc <__aeabi_dcmplt>
 800357e:	2800      	cmp	r0, #0
 8003580:	d14a      	bne.n	8003618 <main+0x3f8>
	  if (P_current.Ry > 1000)
 8003582:	4b9c      	ldr	r3, [pc, #624]	; (80037f4 <main+0x5d4>)
 8003584:	ed93 ea06 	vldr	s28, [r3, #24]
 8003588:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8003800 <main+0x5e0>
 800358c:	eeb4 eae7 	vcmpe.f32	s28, s15
 8003590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003594:	f340 81cb 	ble.w	800392e <main+0x70e>
		  a_dof = P_current.alpha - a_traj <= -M_PI ? 2*M_PI + P_current.alpha - a_traj : (P_current.alpha - a_traj > M_PI ? -2*M_PI + P_current.alpha - a_traj : P_current.alpha - a_traj);
 8003598:	6958      	ldr	r0, [r3, #20]
 800359a:	f7fc ffd5 	bl	8000548 <__aeabi_f2d>
 800359e:	4604      	mov	r4, r0
 80035a0:	460d      	mov	r5, r1
 80035a2:	4b98      	ldr	r3, [pc, #608]	; (8003804 <main+0x5e4>)
 80035a4:	e9d3 6700 	ldrd	r6, r7, [r3]
 80035a8:	4632      	mov	r2, r6
 80035aa:	463b      	mov	r3, r7
 80035ac:	f7fc fe6c 	bl	8000288 <__aeabi_dsub>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80035b8:	a385      	add	r3, pc, #532	; (adr r3, 80037d0 <main+0x5b0>)
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	f7fd fa97 	bl	8000af0 <__aeabi_dcmple>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	f000 819d 	beq.w	8003902 <main+0x6e2>
 80035c8:	a383      	add	r3, pc, #524	; (adr r3, 80037d8 <main+0x5b8>)
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	4620      	mov	r0, r4
 80035d0:	4629      	mov	r1, r5
 80035d2:	f7fc fe5b 	bl	800028c <__adddf3>
 80035d6:	4632      	mov	r2, r6
 80035d8:	463b      	mov	r3, r7
 80035da:	f7fc fe55 	bl	8000288 <__aeabi_dsub>
 80035de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035e2:	e1a8      	b.n	8003936 <main+0x716>
	  if (i == 1) Vslet_Trajectory(a_traj, phi_traj, RV.x, RV.y, RV.z);
 80035e4:	4b88      	ldr	r3, [pc, #544]	; (8003808 <main+0x5e8>)
 80035e6:	ed93 4b04 	vldr	d4, [r3, #16]
 80035ea:	ed93 3b02 	vldr	d3, [r3, #8]
 80035ee:	ed93 2b00 	vldr	d2, [r3]
 80035f2:	eeb0 0a49 	vmov.f32	s0, s18
 80035f6:	eef0 0a69 	vmov.f32	s1, s19
 80035fa:	f001 ffb5 	bl	8005568 <Vslet_Trajectory>
 80035fe:	e79e      	b.n	800353e <main+0x31e>
		  Npoint = 1;
 8003600:	4b7b      	ldr	r3, [pc, #492]	; (80037f0 <main+0x5d0>)
 8003602:	2201      	movs	r2, #1
 8003604:	601a      	str	r2, [r3, #0]
		  UpT = 0;
 8003606:	4b78      	ldr	r3, [pc, #480]	; (80037e8 <main+0x5c8>)
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
		  Ltarget = 1;
 800360c:	4b7b      	ldr	r3, [pc, #492]	; (80037fc <main+0x5dc>)
 800360e:	2000      	movs	r0, #0
 8003610:	4979      	ldr	r1, [pc, #484]	; (80037f8 <main+0x5d8>)
 8003612:	e9c3 0100 	strd	r0, r1, [r3]
 8003616:	e79c      	b.n	8003552 <main+0x332>
	  if (Ltarget < 1 && traj1_Length >= Npoint + 2)
 8003618:	4b75      	ldr	r3, [pc, #468]	; (80037f0 <main+0x5d0>)
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	3101      	adds	r1, #1
 800361e:	4b7b      	ldr	r3, [pc, #492]	; (800380c <main+0x5ec>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4299      	cmp	r1, r3
 8003624:	daad      	bge.n	8003582 <main+0x362>
		  P_next = Get_point_traj(Npoint + 1, UpT);
 8003626:	4c70      	ldr	r4, [pc, #448]	; (80037e8 <main+0x5c8>)
 8003628:	7822      	ldrb	r2, [r4, #0]
 800362a:	a816      	add	r0, sp, #88	; 0x58
 800362c:	f001 ff9d 	bl	800556a <Get_point_traj>
 8003630:	4e77      	ldr	r6, [pc, #476]	; (8003810 <main+0x5f0>)
 8003632:	ad16      	add	r5, sp, #88	; 0x58
 8003634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003636:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003638:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800363c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		  if ((UpT && P_next.type != 13) || (!UpT && P_next.type < 14)) Npoint++;
 8003640:	7823      	ldrb	r3, [r4, #0]
 8003642:	b14b      	cbz	r3, 8003658 <main+0x438>
 8003644:	f1a6 0210 	sub.w	r2, r6, #16
 8003648:	7f12      	ldrb	r2, [r2, #28]
 800364a:	2a0d      	cmp	r2, #13
 800364c:	d004      	beq.n	8003658 <main+0x438>
 800364e:	4a68      	ldr	r2, [pc, #416]	; (80037f0 <main+0x5d0>)
 8003650:	6813      	ldr	r3, [r2, #0]
 8003652:	3301      	adds	r3, #1
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e794      	b.n	8003582 <main+0x362>
 8003658:	b91b      	cbnz	r3, 8003662 <main+0x442>
 800365a:	4b6d      	ldr	r3, [pc, #436]	; (8003810 <main+0x5f0>)
 800365c:	7f1b      	ldrb	r3, [r3, #28]
 800365e:	2b0d      	cmp	r3, #13
 8003660:	d9f5      	bls.n	800364e <main+0x42e>
			  if (P_next.type == 14)
 8003662:	4b6b      	ldr	r3, [pc, #428]	; (8003810 <main+0x5f0>)
 8003664:	7f1b      	ldrb	r3, [r3, #28]
 8003666:	2b0e      	cmp	r3, #14
 8003668:	d056      	beq.n	8003718 <main+0x4f8>
				  a_current = fabs(P_current.alpha - a_traj <= -M_PI ? 2*M_PI + P_current.alpha - a_traj :
 800366a:	4b62      	ldr	r3, [pc, #392]	; (80037f4 <main+0x5d4>)
 800366c:	6958      	ldr	r0, [r3, #20]
 800366e:	f7fc ff6b 	bl	8000548 <__aeabi_f2d>
 8003672:	4680      	mov	r8, r0
 8003674:	4689      	mov	r9, r1
 8003676:	4b63      	ldr	r3, [pc, #396]	; (8003804 <main+0x5e4>)
 8003678:	e9d3 4500 	ldrd	r4, r5, [r3]
 800367c:	4622      	mov	r2, r4
 800367e:	462b      	mov	r3, r5
 8003680:	f7fc fe02 	bl	8000288 <__aeabi_dsub>
 8003684:	4606      	mov	r6, r0
 8003686:	460f      	mov	r7, r1
 8003688:	a351      	add	r3, pc, #324	; (adr r3, 80037d0 <main+0x5b0>)
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f7fd fa2f 	bl	8000af0 <__aeabi_dcmple>
 8003692:	2800      	cmp	r0, #0
 8003694:	f000 80fa 	beq.w	800388c <main+0x66c>
 8003698:	a34f      	add	r3, pc, #316	; (adr r3, 80037d8 <main+0x5b8>)
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	4640      	mov	r0, r8
 80036a0:	4649      	mov	r1, r9
 80036a2:	f7fc fdf3 	bl	800028c <__adddf3>
 80036a6:	4622      	mov	r2, r4
 80036a8:	462b      	mov	r3, r5
 80036aa:	f7fc fded 	bl	8000288 <__aeabi_dsub>
 80036ae:	900e      	str	r0, [sp, #56]	; 0x38
 80036b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80036b4:	930f      	str	r3, [sp, #60]	; 0x3c
				  a_next = fabs(P_next.alpha - a_traj <= -M_PI ? 2*M_PI + P_next.alpha - a_traj :
 80036b6:	4b56      	ldr	r3, [pc, #344]	; (8003810 <main+0x5f0>)
 80036b8:	6958      	ldr	r0, [r3, #20]
 80036ba:	f7fc ff45 	bl	8000548 <__aeabi_f2d>
 80036be:	4606      	mov	r6, r0
 80036c0:	460f      	mov	r7, r1
 80036c2:	4622      	mov	r2, r4
 80036c4:	462b      	mov	r3, r5
 80036c6:	f7fc fddf 	bl	8000288 <__aeabi_dsub>
 80036ca:	4680      	mov	r8, r0
 80036cc:	4689      	mov	r9, r1
 80036ce:	a340      	add	r3, pc, #256	; (adr r3, 80037d0 <main+0x5b0>)
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f7fd fa0c 	bl	8000af0 <__aeabi_dcmple>
 80036d8:	2800      	cmp	r0, #0
 80036da:	f000 80f4 	beq.w	80038c6 <main+0x6a6>
 80036de:	a33e      	add	r3, pc, #248	; (adr r3, 80037d8 <main+0x5b8>)
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	4630      	mov	r0, r6
 80036e6:	4639      	mov	r1, r7
 80036e8:	f7fc fdd0 	bl	800028c <__adddf3>
 80036ec:	4622      	mov	r2, r4
 80036ee:	462b      	mov	r3, r5
 80036f0:	f7fc fdca 	bl	8000288 <__aeabi_dsub>
 80036f4:	9010      	str	r0, [sp, #64]	; 0x40
 80036f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80036fa:	9311      	str	r3, [sp, #68]	; 0x44
				  if (a_current >= a_next) Npoint++;
 80036fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003700:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003704:	f7fd f9fe 	bl	8000b04 <__aeabi_dcmpge>
 8003708:	2800      	cmp	r0, #0
 800370a:	f43f af3a 	beq.w	8003582 <main+0x362>
 800370e:	4a38      	ldr	r2, [pc, #224]	; (80037f0 <main+0x5d0>)
 8003710:	6813      	ldr	r3, [r2, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	6013      	str	r3, [r2, #0]
 8003716:	e734      	b.n	8003582 <main+0x362>
				  phi_current = fabs(P_current.phi - phi_traj <= -M_PI ? 2*M_PI + P_current.phi - phi_traj :
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <main+0x5d4>)
 800371a:	68d8      	ldr	r0, [r3, #12]
 800371c:	f7fc ff14 	bl	8000548 <__aeabi_f2d>
 8003720:	4606      	mov	r6, r0
 8003722:	460f      	mov	r7, r1
 8003724:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <main+0x5c0>)
 8003726:	e9d3 4500 	ldrd	r4, r5, [r3]
 800372a:	4622      	mov	r2, r4
 800372c:	462b      	mov	r3, r5
 800372e:	f7fc fdab 	bl	8000288 <__aeabi_dsub>
 8003732:	4680      	mov	r8, r0
 8003734:	4689      	mov	r9, r1
 8003736:	a326      	add	r3, pc, #152	; (adr r3, 80037d0 <main+0x5b0>)
 8003738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373c:	f7fd f9d8 	bl	8000af0 <__aeabi_dcmple>
 8003740:	2800      	cmp	r0, #0
 8003742:	d067      	beq.n	8003814 <main+0x5f4>
 8003744:	a324      	add	r3, pc, #144	; (adr r3, 80037d8 <main+0x5b8>)
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	4630      	mov	r0, r6
 800374c:	4639      	mov	r1, r7
 800374e:	f7fc fd9d 	bl	800028c <__adddf3>
 8003752:	4622      	mov	r2, r4
 8003754:	462b      	mov	r3, r5
 8003756:	f7fc fd97 	bl	8000288 <__aeabi_dsub>
 800375a:	9012      	str	r0, [sp, #72]	; 0x48
 800375c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003760:	9313      	str	r3, [sp, #76]	; 0x4c
				  phi_next = fabs(P_next.phi - phi_traj <= -M_PI ? 2*M_PI + P_next.phi - phi_traj :
 8003762:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <main+0x5f0>)
 8003764:	68d8      	ldr	r0, [r3, #12]
 8003766:	f7fc feef 	bl	8000548 <__aeabi_f2d>
 800376a:	4606      	mov	r6, r0
 800376c:	460f      	mov	r7, r1
 800376e:	4622      	mov	r2, r4
 8003770:	462b      	mov	r3, r5
 8003772:	f7fc fd89 	bl	8000288 <__aeabi_dsub>
 8003776:	4680      	mov	r8, r0
 8003778:	4689      	mov	r9, r1
 800377a:	a315      	add	r3, pc, #84	; (adr r3, 80037d0 <main+0x5b0>)
 800377c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003780:	f7fd f9b6 	bl	8000af0 <__aeabi_dcmple>
 8003784:	2800      	cmp	r0, #0
 8003786:	d063      	beq.n	8003850 <main+0x630>
 8003788:	a313      	add	r3, pc, #76	; (adr r3, 80037d8 <main+0x5b8>)
 800378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378e:	4630      	mov	r0, r6
 8003790:	4639      	mov	r1, r7
 8003792:	f7fc fd7b 	bl	800028c <__adddf3>
 8003796:	4622      	mov	r2, r4
 8003798:	462b      	mov	r3, r5
 800379a:	f7fc fd75 	bl	8000288 <__aeabi_dsub>
 800379e:	9014      	str	r0, [sp, #80]	; 0x50
 80037a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80037a4:	9315      	str	r3, [sp, #84]	; 0x54
				  if (phi_current >= phi_next) Npoint++;
 80037a6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80037aa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80037ae:	f7fd f9a9 	bl	8000b04 <__aeabi_dcmpge>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	f43f aee5 	beq.w	8003582 <main+0x362>
 80037b8:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <main+0x5d0>)
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	3301      	adds	r3, #1
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	e6df      	b.n	8003582 <main+0x362>
 80037c2:	bf00      	nop
 80037c4:	f3af 8000 	nop.w
	...
 80037d0:	54442d18 	.word	0x54442d18
 80037d4:	c00921fb 	.word	0xc00921fb
 80037d8:	54442d18 	.word	0x54442d18
 80037dc:	401921fb 	.word	0x401921fb
 80037e0:	20000b60 	.word	0x20000b60
 80037e4:	20000b14 	.word	0x20000b14
 80037e8:	20000008 	.word	0x20000008
 80037ec:	20000cac 	.word	0x20000cac
 80037f0:	200006b8 	.word	0x200006b8
 80037f4:	200006bc 	.word	0x200006bc
 80037f8:	3ff00000 	.word	0x3ff00000
 80037fc:	200006b0 	.word	0x200006b0
 8003800:	447a0000 	.word	0x447a0000
 8003804:	20000780 	.word	0x20000780
 8003808:	20000700 	.word	0x20000700
 800380c:	20000ca8 	.word	0x20000ca8
 8003810:	200006dc 	.word	0x200006dc
				  phi_current = fabs(P_current.phi - phi_traj <= -M_PI ? 2*M_PI + P_current.phi - phi_traj :
 8003814:	a3fc      	add	r3, pc, #1008	; (adr r3, 8003c08 <main+0x9e8>)
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	4640      	mov	r0, r8
 800381c:	4649      	mov	r1, r9
 800381e:	f7fd f97b 	bl	8000b18 <__aeabi_dcmpgt>
 8003822:	b178      	cbz	r0, 8003844 <main+0x624>
						  (P_current.phi - phi_traj > M_PI ? -2*M_PI + P_current.phi - phi_traj : P_current.phi - phi_traj));
 8003824:	a3f6      	add	r3, pc, #984	; (adr r3, 8003c00 <main+0x9e0>)
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	4630      	mov	r0, r6
 800382c:	4639      	mov	r1, r7
 800382e:	f7fc fd2b 	bl	8000288 <__aeabi_dsub>
 8003832:	4622      	mov	r2, r4
 8003834:	462b      	mov	r3, r5
 8003836:	f7fc fd27 	bl	8000288 <__aeabi_dsub>
				  phi_current = fabs(P_current.phi - phi_traj <= -M_PI ? 2*M_PI + P_current.phi - phi_traj :
 800383a:	9012      	str	r0, [sp, #72]	; 0x48
 800383c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003840:	9313      	str	r3, [sp, #76]	; 0x4c
 8003842:	e78e      	b.n	8003762 <main+0x542>
 8003844:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8003848:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800384c:	9313      	str	r3, [sp, #76]	; 0x4c
 800384e:	e788      	b.n	8003762 <main+0x542>
				  phi_next = fabs(P_next.phi - phi_traj <= -M_PI ? 2*M_PI + P_next.phi - phi_traj :
 8003850:	a3ed      	add	r3, pc, #948	; (adr r3, 8003c08 <main+0x9e8>)
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	4640      	mov	r0, r8
 8003858:	4649      	mov	r1, r9
 800385a:	f7fd f95d 	bl	8000b18 <__aeabi_dcmpgt>
 800385e:	b178      	cbz	r0, 8003880 <main+0x660>
						  (P_next.phi - phi_traj > M_PI ? -2*M_PI + P_next.phi - phi_traj : P_next.phi - phi_traj));
 8003860:	a3e7      	add	r3, pc, #924	; (adr r3, 8003c00 <main+0x9e0>)
 8003862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003866:	4630      	mov	r0, r6
 8003868:	4639      	mov	r1, r7
 800386a:	f7fc fd0d 	bl	8000288 <__aeabi_dsub>
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	f7fc fd09 	bl	8000288 <__aeabi_dsub>
				  phi_next = fabs(P_next.phi - phi_traj <= -M_PI ? 2*M_PI + P_next.phi - phi_traj :
 8003876:	9014      	str	r0, [sp, #80]	; 0x50
 8003878:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800387c:	9315      	str	r3, [sp, #84]	; 0x54
 800387e:	e792      	b.n	80037a6 <main+0x586>
 8003880:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8003884:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003888:	9315      	str	r3, [sp, #84]	; 0x54
 800388a:	e78c      	b.n	80037a6 <main+0x586>
				  a_current = fabs(P_current.alpha - a_traj <= -M_PI ? 2*M_PI + P_current.alpha - a_traj :
 800388c:	a3de      	add	r3, pc, #888	; (adr r3, 8003c08 <main+0x9e8>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	4630      	mov	r0, r6
 8003894:	4639      	mov	r1, r7
 8003896:	f7fd f93f 	bl	8000b18 <__aeabi_dcmpgt>
 800389a:	b178      	cbz	r0, 80038bc <main+0x69c>
						  (P_current.alpha - a_traj > M_PI ? -2*M_PI + P_current.alpha - a_traj : P_current.alpha - a_traj));
 800389c:	a3d8      	add	r3, pc, #864	; (adr r3, 8003c00 <main+0x9e0>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	4640      	mov	r0, r8
 80038a4:	4649      	mov	r1, r9
 80038a6:	f7fc fcef 	bl	8000288 <__aeabi_dsub>
 80038aa:	4622      	mov	r2, r4
 80038ac:	462b      	mov	r3, r5
 80038ae:	f7fc fceb 	bl	8000288 <__aeabi_dsub>
				  a_current = fabs(P_current.alpha - a_traj <= -M_PI ? 2*M_PI + P_current.alpha - a_traj :
 80038b2:	900e      	str	r0, [sp, #56]	; 0x38
 80038b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80038b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80038ba:	e6fc      	b.n	80036b6 <main+0x496>
 80038bc:	960e      	str	r6, [sp, #56]	; 0x38
 80038be:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 80038c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80038c4:	e6f7      	b.n	80036b6 <main+0x496>
				  a_next = fabs(P_next.alpha - a_traj <= -M_PI ? 2*M_PI + P_next.alpha - a_traj :
 80038c6:	a3d0      	add	r3, pc, #832	; (adr r3, 8003c08 <main+0x9e8>)
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	4640      	mov	r0, r8
 80038ce:	4649      	mov	r1, r9
 80038d0:	f7fd f922 	bl	8000b18 <__aeabi_dcmpgt>
 80038d4:	b178      	cbz	r0, 80038f6 <main+0x6d6>
						  (P_next.alpha - a_traj > M_PI ? -2*M_PI + P_next.alpha - a_traj : P_next.alpha - a_traj));
 80038d6:	a3ca      	add	r3, pc, #808	; (adr r3, 8003c00 <main+0x9e0>)
 80038d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038dc:	4630      	mov	r0, r6
 80038de:	4639      	mov	r1, r7
 80038e0:	f7fc fcd2 	bl	8000288 <__aeabi_dsub>
 80038e4:	4622      	mov	r2, r4
 80038e6:	462b      	mov	r3, r5
 80038e8:	f7fc fcce 	bl	8000288 <__aeabi_dsub>
				  a_next = fabs(P_next.alpha - a_traj <= -M_PI ? 2*M_PI + P_next.alpha - a_traj :
 80038ec:	9010      	str	r0, [sp, #64]	; 0x40
 80038ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80038f2:	9311      	str	r3, [sp, #68]	; 0x44
 80038f4:	e702      	b.n	80036fc <main+0x4dc>
 80038f6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80038fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80038fe:	9311      	str	r3, [sp, #68]	; 0x44
 8003900:	e6fc      	b.n	80036fc <main+0x4dc>
		  a_dof = P_current.alpha - a_traj <= -M_PI ? 2*M_PI + P_current.alpha - a_traj : (P_current.alpha - a_traj > M_PI ? -2*M_PI + P_current.alpha - a_traj : P_current.alpha - a_traj);
 8003902:	a3c1      	add	r3, pc, #772	; (adr r3, 8003c08 <main+0x9e8>)
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800390c:	f7fd f904 	bl	8000b18 <__aeabi_dcmpgt>
 8003910:	b188      	cbz	r0, 8003936 <main+0x716>
 8003912:	a3bb      	add	r3, pc, #748	; (adr r3, 8003c00 <main+0x9e0>)
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	4620      	mov	r0, r4
 800391a:	4629      	mov	r1, r5
 800391c:	f7fc fcb4 	bl	8000288 <__aeabi_dsub>
 8003920:	4632      	mov	r2, r6
 8003922:	463b      	mov	r3, r7
 8003924:	f7fc fcb0 	bl	8000288 <__aeabi_dsub>
 8003928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800392c:	e003      	b.n	8003936 <main+0x716>
	  double Laim = 0, Laimxz = 0, a_dof = 0, phi_dof = 0, a_adof = 0, phi_adof = 0;
 800392e:	ed9f 7bb0 	vldr	d7, [pc, #704]	; 8003bf0 <main+0x9d0>
 8003932:	ed8d 7b02 	vstr	d7, [sp, #8]
	  if (P_current.Rxz > 1000)
 8003936:	4bb8      	ldr	r3, [pc, #736]	; (8003c18 <main+0x9f8>)
 8003938:	edd3 ea04 	vldr	s29, [r3, #16]
 800393c:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8003c1c <main+0x9fc>
 8003940:	eef4 eae7 	vcmpe.f32	s29, s15
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	dd39      	ble.n	80039be <main+0x79e>
		  phi_dof = P_current.phi - phi_traj <= -M_PI ? 2*M_PI + P_current.phi - phi_traj : (P_current.phi - phi_traj > M_PI ? -2*M_PI + P_current.phi - phi_traj : P_current.phi - phi_traj);
 800394a:	68d8      	ldr	r0, [r3, #12]
 800394c:	f7fc fdfc 	bl	8000548 <__aeabi_f2d>
 8003950:	4604      	mov	r4, r0
 8003952:	460d      	mov	r5, r1
 8003954:	4bb2      	ldr	r3, [pc, #712]	; (8003c20 <main+0xa00>)
 8003956:	e9d3 6700 	ldrd	r6, r7, [r3]
 800395a:	4632      	mov	r2, r6
 800395c:	463b      	mov	r3, r7
 800395e:	f7fc fc93 	bl	8000288 <__aeabi_dsub>
 8003962:	4602      	mov	r2, r0
 8003964:	460b      	mov	r3, r1
 8003966:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800396a:	a3a3      	add	r3, pc, #652	; (adr r3, 8003bf8 <main+0x9d8>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f7fd f8be 	bl	8000af0 <__aeabi_dcmple>
 8003974:	b168      	cbz	r0, 8003992 <main+0x772>
 8003976:	a3a2      	add	r3, pc, #648	; (adr r3, 8003c00 <main+0x9e0>)
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	4620      	mov	r0, r4
 800397e:	4629      	mov	r1, r5
 8003980:	f7fc fc84 	bl	800028c <__adddf3>
 8003984:	4632      	mov	r2, r6
 8003986:	463b      	mov	r3, r7
 8003988:	f7fc fc7e 	bl	8000288 <__aeabi_dsub>
 800398c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003990:	e019      	b.n	80039c6 <main+0x7a6>
 8003992:	a39d      	add	r3, pc, #628	; (adr r3, 8003c08 <main+0x9e8>)
 8003994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800399c:	f7fd f8bc 	bl	8000b18 <__aeabi_dcmpgt>
 80039a0:	b188      	cbz	r0, 80039c6 <main+0x7a6>
 80039a2:	a397      	add	r3, pc, #604	; (adr r3, 8003c00 <main+0x9e0>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	4620      	mov	r0, r4
 80039aa:	4629      	mov	r1, r5
 80039ac:	f7fc fc6c 	bl	8000288 <__aeabi_dsub>
 80039b0:	4632      	mov	r2, r6
 80039b2:	463b      	mov	r3, r7
 80039b4:	f7fc fc68 	bl	8000288 <__aeabi_dsub>
 80039b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80039bc:	e003      	b.n	80039c6 <main+0x7a6>
	  double Laim = 0, Laimxz = 0, a_dof = 0, phi_dof = 0, a_adof = 0, phi_adof = 0;
 80039be:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 8003bf0 <main+0x9d0>
 80039c2:	ed8d 7b04 	vstr	d7, [sp, #16]
	  if ((UpT && P_next.type != 13) || (!UpT && P_next.type < 14))
 80039c6:	4b97      	ldr	r3, [pc, #604]	; (8003c24 <main+0xa04>)
 80039c8:	f893 a000 	ldrb.w	sl, [r3]
 80039cc:	f1ba 0f00 	cmp.w	sl, #0
 80039d0:	f000 8098 	beq.w	8003b04 <main+0x8e4>
 80039d4:	4b94      	ldr	r3, [pc, #592]	; (8003c28 <main+0xa08>)
 80039d6:	7f1b      	ldrb	r3, [r3, #28]
 80039d8:	2b0d      	cmp	r3, #13
 80039da:	f000 8093 	beq.w	8003b04 <main+0x8e4>
		  Laim = sqrt(pow(P_current.x - RV.x, 2) + pow(P_current.y - RV.y, 2) + pow(P_current.z - RV.z, 2));
 80039de:	4f8e      	ldr	r7, [pc, #568]	; (8003c18 <main+0x9f8>)
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	f7fc fdb1 	bl	8000548 <__aeabi_f2d>
 80039e6:	4e91      	ldr	r6, [pc, #580]	; (8003c2c <main+0xa0c>)
 80039e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80039ec:	f7fc fc4c 	bl	8000288 <__aeabi_dsub>
 80039f0:	ec41 0b1c 	vmov	d12, r0, r1
 80039f4:	ed9f bb86 	vldr	d11, [pc, #536]	; 8003c10 <main+0x9f0>
 80039f8:	eeb0 1a4b 	vmov.f32	s2, s22
 80039fc:	eef0 1a6b 	vmov.f32	s3, s23
 8003a00:	ec41 0b10 	vmov	d0, r0, r1
 8003a04:	f006 fe10 	bl	800a628 <pow>
 8003a08:	ec55 4b10 	vmov	r4, r5, d0
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fc fd9b 	bl	8000548 <__aeabi_f2d>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003a1a:	e9d6 8902 	ldrd	r8, r9, [r6, #8]
 8003a1e:	4642      	mov	r2, r8
 8003a20:	464b      	mov	r3, r9
 8003a22:	f7fc fc31 	bl	8000288 <__aeabi_dsub>
 8003a26:	ec41 0b1d 	vmov	d13, r0, r1
 8003a2a:	eeb0 1a4b 	vmov.f32	s2, s22
 8003a2e:	eef0 1a6b 	vmov.f32	s3, s23
 8003a32:	ec41 0b10 	vmov	d0, r0, r1
 8003a36:	f006 fdf7 	bl	800a628 <pow>
 8003a3a:	ec53 2b10 	vmov	r2, r3, d0
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fc fc23 	bl	800028c <__adddf3>
 8003a46:	4604      	mov	r4, r0
 8003a48:	460d      	mov	r5, r1
 8003a4a:	68b8      	ldr	r0, [r7, #8]
 8003a4c:	f7fc fd7c 	bl	8000548 <__aeabi_f2d>
 8003a50:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8003a54:	f7fc fc18 	bl	8000288 <__aeabi_dsub>
 8003a58:	ec41 0b19 	vmov	d9, r0, r1
 8003a5c:	eeb0 1a4b 	vmov.f32	s2, s22
 8003a60:	eef0 1a6b 	vmov.f32	s3, s23
 8003a64:	ec41 0b10 	vmov	d0, r0, r1
 8003a68:	f006 fdde 	bl	800a628 <pow>
 8003a6c:	ec53 2b10 	vmov	r2, r3, d0
 8003a70:	4620      	mov	r0, r4
 8003a72:	4629      	mov	r1, r5
 8003a74:	f7fc fc0a 	bl	800028c <__adddf3>
 8003a78:	ec41 0b10 	vmov	d0, r0, r1
 8003a7c:	f006 fe44 	bl	800a708 <sqrt>
 8003a80:	ec57 6b10 	vmov	r6, r7, d0
 8003a84:	ed8d 0b06 	vstr	d0, [sp, #24]
		  Laimxz = sqrt(pow(P_current.x - RV.x, 2) + pow(P_current.z - RV.z, 2));
 8003a88:	eeb0 1a4b 	vmov.f32	s2, s22
 8003a8c:	eef0 1a6b 	vmov.f32	s3, s23
 8003a90:	eeb0 0a4c 	vmov.f32	s0, s24
 8003a94:	eef0 0a6c 	vmov.f32	s1, s25
 8003a98:	f006 fdc6 	bl	800a628 <pow>
 8003a9c:	ec55 4b10 	vmov	r4, r5, d0
 8003aa0:	eeb0 1a4b 	vmov.f32	s2, s22
 8003aa4:	eef0 1a6b 	vmov.f32	s3, s23
 8003aa8:	eeb0 0a49 	vmov.f32	s0, s18
 8003aac:	eef0 0a69 	vmov.f32	s1, s19
 8003ab0:	f006 fdba 	bl	800a628 <pow>
 8003ab4:	ec53 2b10 	vmov	r2, r3, d0
 8003ab8:	4620      	mov	r0, r4
 8003aba:	4629      	mov	r1, r5
 8003abc:	f7fc fbe6 	bl	800028c <__adddf3>
 8003ac0:	ec41 0b10 	vmov	d0, r0, r1
 8003ac4:	f006 fe20 	bl	800a708 <sqrt>
 8003ac8:	ec55 4b10 	vmov	r4, r5, d0
		  a_aim = Laim > 0 ? (P_current.y >= RV.y ? asin((P_current.y - RV.y)/Laim) : 2*M_PI - asin((P_current.y - RV.y)/Laim)) : 0;
 8003acc:	2200      	movs	r2, #0
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4630      	mov	r0, r6
 8003ad2:	4639      	mov	r1, r7
 8003ad4:	f7fd f820 	bl	8000b18 <__aeabi_dcmpgt>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	d03b      	beq.n	8003b54 <main+0x934>
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003ae4:	f7fd f80e 	bl	8000b04 <__aeabi_dcmpge>
 8003ae8:	b300      	cbz	r0, 8003b2c <main+0x90c>
 8003aea:	4632      	mov	r2, r6
 8003aec:	463b      	mov	r3, r7
 8003aee:	ec51 0b1d 	vmov	r0, r1, d13
 8003af2:	f7fc feab 	bl	800084c <__aeabi_ddiv>
 8003af6:	ec41 0b10 	vmov	d0, r0, r1
 8003afa:	f006 fd61 	bl	800a5c0 <asin>
 8003afe:	ec57 6b10 	vmov	r6, r7, d0
 8003b02:	e029      	b.n	8003b58 <main+0x938>
	  if ((UpT && P_next.type != 13) || (!UpT && P_next.type < 14))
 8003b04:	f1ba 0f00 	cmp.w	sl, #0
 8003b08:	f040 8108 	bne.w	8003d1c <main+0xafc>
 8003b0c:	4b46      	ldr	r3, [pc, #280]	; (8003c28 <main+0xa08>)
 8003b0e:	7f1b      	ldrb	r3, [r3, #28]
 8003b10:	2b0d      	cmp	r3, #13
 8003b12:	f67f af64 	bls.w	80039de <main+0x7be>
	  double Laim = 0, Laimxz = 0, a_dof = 0, phi_dof = 0, a_adof = 0, phi_adof = 0;
 8003b16:	ed9f 9b36 	vldr	d9, [pc, #216]	; 8003bf0 <main+0x9d0>
 8003b1a:	eeb0 aa49 	vmov.f32	s20, s18
 8003b1e:	eef0 aa69 	vmov.f32	s21, s19
 8003b22:	ec55 4b19 	vmov	r4, r5, d9
 8003b26:	ed8d 9b06 	vstr	d9, [sp, #24]
 8003b2a:	e101      	b.n	8003d30 <main+0xb10>
		  a_aim = Laim > 0 ? (P_current.y >= RV.y ? asin((P_current.y - RV.y)/Laim) : 2*M_PI - asin((P_current.y - RV.y)/Laim)) : 0;
 8003b2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003b30:	ec51 0b1d 	vmov	r0, r1, d13
 8003b34:	f7fc fe8a 	bl	800084c <__aeabi_ddiv>
 8003b38:	ec41 0b10 	vmov	d0, r0, r1
 8003b3c:	f006 fd40 	bl	800a5c0 <asin>
 8003b40:	ec53 2b10 	vmov	r2, r3, d0
 8003b44:	a12e      	add	r1, pc, #184	; (adr r1, 8003c00 <main+0x9e0>)
 8003b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b4a:	f7fc fb9d 	bl	8000288 <__aeabi_dsub>
 8003b4e:	4606      	mov	r6, r0
 8003b50:	460f      	mov	r7, r1
 8003b52:	e001      	b.n	8003b58 <main+0x938>
 8003b54:	2600      	movs	r6, #0
 8003b56:	2700      	movs	r7, #0
		  phi_aim = Laimxz > 0 ? (P_current.x - RV.x >= 0 ? (P_current.z - RV.z >= 0 ? 2*M_PI - asin((P_current.z - RV.z)/Laimxz) : asin((P_current.z - RV.z)/Laimxz)) : M_PI + asin((P_current.z - RV.z)/Laimxz)) : 0;
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	4629      	mov	r1, r5
 8003b60:	f7fc ffda 	bl	8000b18 <__aeabi_dcmpgt>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d063      	beq.n	8003c30 <main+0xa10>
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	ec51 0b1c 	vmov	r0, r1, d12
 8003b70:	f7fc ffc8 	bl	8000b04 <__aeabi_dcmpge>
 8003b74:	b338      	cbz	r0, 8003bc6 <main+0x9a6>
 8003b76:	2200      	movs	r2, #0
 8003b78:	2300      	movs	r3, #0
 8003b7a:	ec51 0b19 	vmov	r0, r1, d9
 8003b7e:	f7fc ffc1 	bl	8000b04 <__aeabi_dcmpge>
 8003b82:	b198      	cbz	r0, 8003bac <main+0x98c>
 8003b84:	4622      	mov	r2, r4
 8003b86:	462b      	mov	r3, r5
 8003b88:	ec51 0b19 	vmov	r0, r1, d9
 8003b8c:	f7fc fe5e 	bl	800084c <__aeabi_ddiv>
 8003b90:	ec41 0b10 	vmov	d0, r0, r1
 8003b94:	f006 fd14 	bl	800a5c0 <asin>
 8003b98:	ec53 2b10 	vmov	r2, r3, d0
 8003b9c:	a118      	add	r1, pc, #96	; (adr r1, 8003c00 <main+0x9e0>)
 8003b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ba2:	f7fc fb71 	bl	8000288 <__aeabi_dsub>
 8003ba6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003baa:	e045      	b.n	8003c38 <main+0xa18>
 8003bac:	4622      	mov	r2, r4
 8003bae:	462b      	mov	r3, r5
 8003bb0:	ec51 0b19 	vmov	r0, r1, d9
 8003bb4:	f7fc fe4a 	bl	800084c <__aeabi_ddiv>
 8003bb8:	ec41 0b10 	vmov	d0, r0, r1
 8003bbc:	f006 fd00 	bl	800a5c0 <asin>
 8003bc0:	ed8d 0b08 	vstr	d0, [sp, #32]
 8003bc4:	e038      	b.n	8003c38 <main+0xa18>
 8003bc6:	4622      	mov	r2, r4
 8003bc8:	462b      	mov	r3, r5
 8003bca:	ec51 0b19 	vmov	r0, r1, d9
 8003bce:	f7fc fe3d 	bl	800084c <__aeabi_ddiv>
 8003bd2:	ec41 0b10 	vmov	d0, r0, r1
 8003bd6:	f006 fcf3 	bl	800a5c0 <asin>
 8003bda:	ec51 0b10 	vmov	r0, r1, d0
 8003bde:	a30a      	add	r3, pc, #40	; (adr r3, 8003c08 <main+0x9e8>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc fb52 	bl	800028c <__adddf3>
 8003be8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003bec:	e024      	b.n	8003c38 <main+0xa18>
 8003bee:	bf00      	nop
	...
 8003bf8:	54442d18 	.word	0x54442d18
 8003bfc:	c00921fb 	.word	0xc00921fb
 8003c00:	54442d18 	.word	0x54442d18
 8003c04:	401921fb 	.word	0x401921fb
 8003c08:	54442d18 	.word	0x54442d18
 8003c0c:	400921fb 	.word	0x400921fb
 8003c10:	00000000 	.word	0x00000000
 8003c14:	40000000 	.word	0x40000000
 8003c18:	200006bc 	.word	0x200006bc
 8003c1c:	447a0000 	.word	0x447a0000
 8003c20:	20000b60 	.word	0x20000b60
 8003c24:	20000008 	.word	0x20000008
 8003c28:	200006dc 	.word	0x200006dc
 8003c2c:	20000700 	.word	0x20000700
 8003c30:	ed9f 7b9b 	vldr	d7, [pc, #620]	; 8003ea0 <main+0xc80>
 8003c34:	ed8d 7b08 	vstr	d7, [sp, #32]
		  a_adof = P_current.alpha - a_aim <= -M_PI ? 2*M_PI + P_current.alpha - a_aim : (P_current.alpha - a_aim > M_PI ? -2*M_PI + P_current.alpha - a_aim : P_current.alpha - a_aim);
 8003c38:	4ba3      	ldr	r3, [pc, #652]	; (8003ec8 <main+0xca8>)
 8003c3a:	6958      	ldr	r0, [r3, #20]
 8003c3c:	f7fc fc84 	bl	8000548 <__aeabi_f2d>
 8003c40:	4680      	mov	r8, r0
 8003c42:	4689      	mov	r9, r1
 8003c44:	4632      	mov	r2, r6
 8003c46:	463b      	mov	r3, r7
 8003c48:	f7fc fb1e 	bl	8000288 <__aeabi_dsub>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	ec43 2b1a 	vmov	d10, r2, r3
 8003c54:	a394      	add	r3, pc, #592	; (adr r3, 8003ea8 <main+0xc88>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc ff49 	bl	8000af0 <__aeabi_dcmple>
 8003c5e:	b380      	cbz	r0, 8003cc2 <main+0xaa2>
 8003c60:	a393      	add	r3, pc, #588	; (adr r3, 8003eb0 <main+0xc90>)
 8003c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c66:	4640      	mov	r0, r8
 8003c68:	4649      	mov	r1, r9
 8003c6a:	f7fc fb0f 	bl	800028c <__adddf3>
 8003c6e:	4632      	mov	r2, r6
 8003c70:	463b      	mov	r3, r7
 8003c72:	f7fc fb09 	bl	8000288 <__aeabi_dsub>
 8003c76:	ec41 0b1a 	vmov	d10, r0, r1
		  phi_adof = P_current.phi - phi_aim <= -M_PI ? 2*M_PI + P_current.phi - phi_aim : (P_current.phi - phi_aim > M_PI ? -2*M_PI + P_current.phi - phi_aim : P_current.phi - phi_aim);
 8003c7a:	4b93      	ldr	r3, [pc, #588]	; (8003ec8 <main+0xca8>)
 8003c7c:	68d8      	ldr	r0, [r3, #12]
 8003c7e:	f7fc fc63 	bl	8000548 <__aeabi_f2d>
 8003c82:	4606      	mov	r6, r0
 8003c84:	460f      	mov	r7, r1
 8003c86:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8003c8a:	4642      	mov	r2, r8
 8003c8c:	464b      	mov	r3, r9
 8003c8e:	f7fc fafb 	bl	8000288 <__aeabi_dsub>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	ec43 2b19 	vmov	d9, r2, r3
 8003c9a:	a383      	add	r3, pc, #524	; (adr r3, 8003ea8 <main+0xc88>)
 8003c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca0:	f7fc ff26 	bl	8000af0 <__aeabi_dcmple>
 8003ca4:	b320      	cbz	r0, 8003cf0 <main+0xad0>
 8003ca6:	a382      	add	r3, pc, #520	; (adr r3, 8003eb0 <main+0xc90>)
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	4630      	mov	r0, r6
 8003cae:	4639      	mov	r1, r7
 8003cb0:	f7fc faec 	bl	800028c <__adddf3>
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	f7fc fae6 	bl	8000288 <__aeabi_dsub>
 8003cbc:	ec41 0b19 	vmov	d9, r0, r1
 8003cc0:	e036      	b.n	8003d30 <main+0xb10>
		  a_adof = P_current.alpha - a_aim <= -M_PI ? 2*M_PI + P_current.alpha - a_aim : (P_current.alpha - a_aim > M_PI ? -2*M_PI + P_current.alpha - a_aim : P_current.alpha - a_aim);
 8003cc2:	a37d      	add	r3, pc, #500	; (adr r3, 8003eb8 <main+0xc98>)
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	ec51 0b1a 	vmov	r0, r1, d10
 8003ccc:	f7fc ff24 	bl	8000b18 <__aeabi_dcmpgt>
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	d0d2      	beq.n	8003c7a <main+0xa5a>
 8003cd4:	a376      	add	r3, pc, #472	; (adr r3, 8003eb0 <main+0xc90>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4649      	mov	r1, r9
 8003cde:	f7fc fad3 	bl	8000288 <__aeabi_dsub>
 8003ce2:	4632      	mov	r2, r6
 8003ce4:	463b      	mov	r3, r7
 8003ce6:	f7fc facf 	bl	8000288 <__aeabi_dsub>
 8003cea:	ec41 0b1a 	vmov	d10, r0, r1
 8003cee:	e7c4      	b.n	8003c7a <main+0xa5a>
		  phi_adof = P_current.phi - phi_aim <= -M_PI ? 2*M_PI + P_current.phi - phi_aim : (P_current.phi - phi_aim > M_PI ? -2*M_PI + P_current.phi - phi_aim : P_current.phi - phi_aim);
 8003cf0:	a371      	add	r3, pc, #452	; (adr r3, 8003eb8 <main+0xc98>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	ec51 0b19 	vmov	r0, r1, d9
 8003cfa:	f7fc ff0d 	bl	8000b18 <__aeabi_dcmpgt>
 8003cfe:	b1b8      	cbz	r0, 8003d30 <main+0xb10>
 8003d00:	a36b      	add	r3, pc, #428	; (adr r3, 8003eb0 <main+0xc90>)
 8003d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d06:	4630      	mov	r0, r6
 8003d08:	4639      	mov	r1, r7
 8003d0a:	f7fc fabd 	bl	8000288 <__aeabi_dsub>
 8003d0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003d12:	f7fc fab9 	bl	8000288 <__aeabi_dsub>
 8003d16:	ec41 0b19 	vmov	d9, r0, r1
 8003d1a:	e009      	b.n	8003d30 <main+0xb10>
	  double Laim = 0, Laimxz = 0, a_dof = 0, phi_dof = 0, a_adof = 0, phi_adof = 0;
 8003d1c:	ed9f 9b60 	vldr	d9, [pc, #384]	; 8003ea0 <main+0xc80>
 8003d20:	eeb0 aa49 	vmov.f32	s20, s18
 8003d24:	eef0 aa69 	vmov.f32	s21, s19
 8003d28:	ec55 4b19 	vmov	r4, r5, d9
 8003d2c:	ed8d 9b06 	vstr	d9, [sp, #24]
	  Ltarget = ((UpT && P_next.type != 13) || (!UpT && P_next.type < 14)) ? Laimxz * cos(phi_adof) : 0;
 8003d30:	f1ba 0f00 	cmp.w	sl, #0
 8003d34:	d04a      	beq.n	8003dcc <main+0xbac>
 8003d36:	4b65      	ldr	r3, [pc, #404]	; (8003ecc <main+0xcac>)
 8003d38:	7f1b      	ldrb	r3, [r3, #28]
 8003d3a:	2b0d      	cmp	r3, #13
 8003d3c:	d046      	beq.n	8003dcc <main+0xbac>
 8003d3e:	eeb0 0a49 	vmov.f32	s0, s18
 8003d42:	eef0 0a69 	vmov.f32	s1, s19
 8003d46:	f006 fd0b 	bl	800a760 <cos>
 8003d4a:	ec51 0b10 	vmov	r0, r1, d0
 8003d4e:	4622      	mov	r2, r4
 8003d50:	462b      	mov	r3, r5
 8003d52:	f7fc fc51 	bl	80005f8 <__aeabi_dmul>
 8003d56:	4b5e      	ldr	r3, [pc, #376]	; (8003ed0 <main+0xcb0>)
 8003d58:	e9c3 0100 	strd	r0, r1, [r3]
	  if (P_current.Rxz > 1000)
 8003d5c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8003ed4 <main+0xcb4>
 8003d60:	eef4 eae7 	vcmpe.f32	s29, s15
 8003d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d68:	dd48      	ble.n	8003dfc <main+0xbdc>
		  buf = phi_dof - Laimxz * sin(phi_adof) / 20;
 8003d6a:	eeb0 0a49 	vmov.f32	s0, s18
 8003d6e:	eef0 0a69 	vmov.f32	s1, s19
 8003d72:	f006 fd55 	bl	800a820 <sin>
 8003d76:	ec51 0b10 	vmov	r0, r1, d0
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	462b      	mov	r3, r5
 8003d7e:	f7fc fc3b 	bl	80005f8 <__aeabi_dmul>
 8003d82:	2200      	movs	r2, #0
 8003d84:	4b54      	ldr	r3, [pc, #336]	; (8003ed8 <main+0xcb8>)
 8003d86:	f7fc fd61 	bl	800084c <__aeabi_ddiv>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d92:	f7fc fa79 	bl	8000288 <__aeabi_dsub>
 8003d96:	4604      	mov	r4, r0
 8003d98:	460d      	mov	r5, r1
		  buf = buf > 1 ? 1 : (buf < -1 ? -1 : buf);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4b4f      	ldr	r3, [pc, #316]	; (8003edc <main+0xcbc>)
 8003d9e:	f7fc febb 	bl	8000b18 <__aeabi_dcmpgt>
 8003da2:	b300      	cbz	r0, 8003de6 <main+0xbc6>
 8003da4:	2400      	movs	r4, #0
 8003da6:	4d4d      	ldr	r5, [pc, #308]	; (8003edc <main+0xcbc>)
		  Rxz = buf == 0 ? 9999 : R/buf;
 8003da8:	2200      	movs	r2, #0
 8003daa:	2300      	movs	r3, #0
 8003dac:	4620      	mov	r0, r4
 8003dae:	4629      	mov	r1, r5
 8003db0:	f7fc fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d160      	bne.n	8003e7a <main+0xc5a>
 8003db8:	4622      	mov	r2, r4
 8003dba:	462b      	mov	r3, r5
 8003dbc:	4948      	ldr	r1, [pc, #288]	; (8003ee0 <main+0xcc0>)
 8003dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dc2:	f7fc fd43 	bl	800084c <__aeabi_ddiv>
 8003dc6:	4680      	mov	r8, r0
 8003dc8:	4689      	mov	r9, r1
 8003dca:	e01d      	b.n	8003e08 <main+0xbe8>
	  Ltarget = ((UpT && P_next.type != 13) || (!UpT && P_next.type < 14)) ? Laimxz * cos(phi_adof) : 0;
 8003dcc:	f1ba 0f00 	cmp.w	sl, #0
 8003dd0:	d106      	bne.n	8003de0 <main+0xbc0>
 8003dd2:	4b3e      	ldr	r3, [pc, #248]	; (8003ecc <main+0xcac>)
 8003dd4:	7f1b      	ldrb	r3, [r3, #28]
 8003dd6:	2b0d      	cmp	r3, #13
 8003dd8:	d9b1      	bls.n	8003d3e <main+0xb1e>
 8003dda:	2000      	movs	r0, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	e7ba      	b.n	8003d56 <main+0xb36>
 8003de0:	2000      	movs	r0, #0
 8003de2:	2100      	movs	r1, #0
 8003de4:	e7b7      	b.n	8003d56 <main+0xb36>
		  buf = buf > 1 ? 1 : (buf < -1 ? -1 : buf);
 8003de6:	2200      	movs	r2, #0
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <main+0xcc4>)
 8003dea:	4620      	mov	r0, r4
 8003dec:	4629      	mov	r1, r5
 8003dee:	f7fc fe75 	bl	8000adc <__aeabi_dcmplt>
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d0d8      	beq.n	8003da8 <main+0xb88>
 8003df6:	2400      	movs	r4, #0
 8003df8:	4d3a      	ldr	r5, [pc, #232]	; (8003ee4 <main+0xcc4>)
 8003dfa:	e7d5      	b.n	8003da8 <main+0xb88>
	  else Rxz = P_current.Rxz;
 8003dfc:	ee1e 0a90 	vmov	r0, s29
 8003e00:	f7fc fba2 	bl	8000548 <__aeabi_f2d>
 8003e04:	4680      	mov	r8, r0
 8003e06:	4689      	mov	r9, r1
	  if (P_current.Ry > 1000)
 8003e08:	eddf 7a32 	vldr	s15, [pc, #200]	; 8003ed4 <main+0xcb4>
 8003e0c:	eeb4 eae7 	vcmpe.f32	s28, s15
 8003e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e14:	dd6a      	ble.n	8003eec <main+0xccc>
		  buf = a_dof - Laim * sin(a_adof) / 30;
 8003e16:	eeb0 0a4a 	vmov.f32	s0, s20
 8003e1a:	eef0 0a6a 	vmov.f32	s1, s21
 8003e1e:	f006 fcff 	bl	800a820 <sin>
 8003e22:	ec51 0b10 	vmov	r0, r1, d0
 8003e26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003e2a:	f7fc fbe5 	bl	80005f8 <__aeabi_dmul>
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <main+0xcc8>)
 8003e32:	f7fc fd0b 	bl	800084c <__aeabi_ddiv>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e3e:	f7fc fa23 	bl	8000288 <__aeabi_dsub>
 8003e42:	4604      	mov	r4, r0
 8003e44:	460d      	mov	r5, r1
		  buf = buf > 1 ? 1 : (buf < -1 ? -1 : buf);
 8003e46:	2200      	movs	r2, #0
 8003e48:	4b24      	ldr	r3, [pc, #144]	; (8003edc <main+0xcbc>)
 8003e4a:	f7fc fe65 	bl	8000b18 <__aeabi_dcmpgt>
 8003e4e:	b1c8      	cbz	r0, 8003e84 <main+0xc64>
 8003e50:	2400      	movs	r4, #0
 8003e52:	4d22      	ldr	r5, [pc, #136]	; (8003edc <main+0xcbc>)
		  Ry = buf == 0 ? 9999 : R/buf;
 8003e54:	2200      	movs	r2, #0
 8003e56:	2300      	movs	r3, #0
 8003e58:	4620      	mov	r0, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	f7fc fe34 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	f040 8128 	bne.w	80040b6 <main+0xe96>
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	491d      	ldr	r1, [pc, #116]	; (8003ee0 <main+0xcc0>)
 8003e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e70:	f7fc fcec 	bl	800084c <__aeabi_ddiv>
 8003e74:	4682      	mov	sl, r0
 8003e76:	468b      	mov	fp, r1
 8003e78:	e03e      	b.n	8003ef8 <main+0xcd8>
		  Rxz = buf == 0 ? 9999 : R/buf;
 8003e7a:	f20f 0944 	addw	r9, pc, #68	; 0x44
 8003e7e:	e9d9 8900 	ldrd	r8, r9, [r9]
 8003e82:	e7c1      	b.n	8003e08 <main+0xbe8>
		  buf = buf > 1 ? 1 : (buf < -1 ? -1 : buf);
 8003e84:	2200      	movs	r2, #0
 8003e86:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <main+0xcc4>)
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7fc fe26 	bl	8000adc <__aeabi_dcmplt>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d0df      	beq.n	8003e54 <main+0xc34>
 8003e94:	2400      	movs	r4, #0
 8003e96:	4d13      	ldr	r5, [pc, #76]	; (8003ee4 <main+0xcc4>)
 8003e98:	e7dc      	b.n	8003e54 <main+0xc34>
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w
	...
 8003ea8:	54442d18 	.word	0x54442d18
 8003eac:	c00921fb 	.word	0xc00921fb
 8003eb0:	54442d18 	.word	0x54442d18
 8003eb4:	401921fb 	.word	0x401921fb
 8003eb8:	54442d18 	.word	0x54442d18
 8003ebc:	400921fb 	.word	0x400921fb
 8003ec0:	00000000 	.word	0x00000000
 8003ec4:	40c38780 	.word	0x40c38780
 8003ec8:	200006bc 	.word	0x200006bc
 8003ecc:	200006dc 	.word	0x200006dc
 8003ed0:	200006b0 	.word	0x200006b0
 8003ed4:	447a0000 	.word	0x447a0000
 8003ed8:	40340000 	.word	0x40340000
 8003edc:	3ff00000 	.word	0x3ff00000
 8003ee0:	20000038 	.word	0x20000038
 8003ee4:	bff00000 	.word	0xbff00000
 8003ee8:	403e0000 	.word	0x403e0000
	  else Ry = P_current.Ry;
 8003eec:	ee1e 0a10 	vmov	r0, s28
 8003ef0:	f7fc fb2a 	bl	8000548 <__aeabi_f2d>
 8003ef4:	4682      	mov	sl, r0
 8003ef6:	468b      	mov	fp, r1
	  if (P_current.type == 16)
 8003ef8:	4bd1      	ldr	r3, [pc, #836]	; (8004240 <main+0x1020>)
 8003efa:	7f1b      	ldrb	r3, [r3, #28]
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	f000 80df 	beq.w	80040c0 <main+0xea0>
		  target_accelerateG[0] = pow(VelM,2) / Rxz * sin(phi_traj) - pow(VelM,2) / Ry * sin(a_traj) * cos(phi_traj);
 8003f02:	ed9f 9bc7 	vldr	d9, [pc, #796]	; 8004220 <main+0x1000>
 8003f06:	eeb0 1a49 	vmov.f32	s2, s18
 8003f0a:	eef0 1a69 	vmov.f32	s3, s19
 8003f0e:	eeb0 0a48 	vmov.f32	s0, s16
 8003f12:	eef0 0a68 	vmov.f32	s1, s17
 8003f16:	f006 fb87 	bl	800a628 <pow>
 8003f1a:	ec51 0b10 	vmov	r0, r1, d0
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	f7fc fc93 	bl	800084c <__aeabi_ddiv>
 8003f26:	4604      	mov	r4, r0
 8003f28:	460d      	mov	r5, r1
 8003f2a:	4bc6      	ldr	r3, [pc, #792]	; (8004244 <main+0x1024>)
 8003f2c:	ed93 bb00 	vldr	d11, [r3]
 8003f30:	eeb0 0a4b 	vmov.f32	s0, s22
 8003f34:	eef0 0a6b 	vmov.f32	s1, s23
 8003f38:	f006 fc72 	bl	800a820 <sin>
 8003f3c:	ec53 2b10 	vmov	r2, r3, d0
 8003f40:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003f44:	4620      	mov	r0, r4
 8003f46:	4629      	mov	r1, r5
 8003f48:	f7fc fb56 	bl	80005f8 <__aeabi_dmul>
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	460f      	mov	r7, r1
 8003f50:	eeb0 1a49 	vmov.f32	s2, s18
 8003f54:	eef0 1a69 	vmov.f32	s3, s19
 8003f58:	eeb0 0a48 	vmov.f32	s0, s16
 8003f5c:	eef0 0a68 	vmov.f32	s1, s17
 8003f60:	f006 fb62 	bl	800a628 <pow>
 8003f64:	ec51 0b10 	vmov	r0, r1, d0
 8003f68:	4652      	mov	r2, sl
 8003f6a:	465b      	mov	r3, fp
 8003f6c:	f7fc fc6e 	bl	800084c <__aeabi_ddiv>
 8003f70:	4604      	mov	r4, r0
 8003f72:	460d      	mov	r5, r1
 8003f74:	4bb4      	ldr	r3, [pc, #720]	; (8004248 <main+0x1028>)
 8003f76:	ed93 ab00 	vldr	d10, [r3]
 8003f7a:	eeb0 0a4a 	vmov.f32	s0, s20
 8003f7e:	eef0 0a6a 	vmov.f32	s1, s21
 8003f82:	f006 fc4d 	bl	800a820 <sin>
 8003f86:	ec53 2b10 	vmov	r2, r3, d0
 8003f8a:	ed8d 0b04 	vstr	d0, [sp, #16]
 8003f8e:	4620      	mov	r0, r4
 8003f90:	4629      	mov	r1, r5
 8003f92:	f7fc fb31 	bl	80005f8 <__aeabi_dmul>
 8003f96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f9a:	eeb0 0a4b 	vmov.f32	s0, s22
 8003f9e:	eef0 0a6b 	vmov.f32	s1, s23
 8003fa2:	f006 fbdd 	bl	800a760 <cos>
 8003fa6:	ec55 4b10 	vmov	r4, r5, d0
 8003faa:	ee10 2a10 	vmov	r2, s0
 8003fae:	462b      	mov	r3, r5
 8003fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003fb4:	f7fc fb20 	bl	80005f8 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	4639      	mov	r1, r7
 8003fc0:	f7fc f962 	bl	8000288 <__aeabi_dsub>
 8003fc4:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		  target_accelerateG[1] = 9.8 + pow(VelM,2) / Ry * cos(a_traj);
 8003fc8:	eeb0 1a49 	vmov.f32	s2, s18
 8003fcc:	eef0 1a69 	vmov.f32	s3, s19
 8003fd0:	eeb0 0a48 	vmov.f32	s0, s16
 8003fd4:	eef0 0a68 	vmov.f32	s1, s17
 8003fd8:	f006 fb26 	bl	800a628 <pow>
 8003fdc:	ec51 0b10 	vmov	r0, r1, d0
 8003fe0:	4652      	mov	r2, sl
 8003fe2:	465b      	mov	r3, fp
 8003fe4:	f7fc fc32 	bl	800084c <__aeabi_ddiv>
 8003fe8:	4606      	mov	r6, r0
 8003fea:	460f      	mov	r7, r1
 8003fec:	eeb0 0a4a 	vmov.f32	s0, s20
 8003ff0:	eef0 0a6a 	vmov.f32	s1, s21
 8003ff4:	f006 fbb4 	bl	800a760 <cos>
 8003ff8:	ec53 2b10 	vmov	r2, r3, d0
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	4639      	mov	r1, r7
 8004000:	f7fc fafa 	bl	80005f8 <__aeabi_dmul>
 8004004:	a388      	add	r3, pc, #544	; (adr r3, 8004228 <main+0x1008>)
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	f7fc f93f 	bl	800028c <__adddf3>
 800400e:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		  target_accelerateG[2] = pow(VelM,2) / Rxz * cos(phi_traj) + pow(VelM,2) / Ry * sin(a_traj) * sin(phi_traj);
 8004012:	eeb0 1a49 	vmov.f32	s2, s18
 8004016:	eef0 1a69 	vmov.f32	s3, s19
 800401a:	eeb0 0a48 	vmov.f32	s0, s16
 800401e:	eef0 0a68 	vmov.f32	s1, s17
 8004022:	f006 fb01 	bl	800a628 <pow>
 8004026:	ec51 0b10 	vmov	r0, r1, d0
 800402a:	4642      	mov	r2, r8
 800402c:	464b      	mov	r3, r9
 800402e:	f7fc fc0d 	bl	800084c <__aeabi_ddiv>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4620      	mov	r0, r4
 8004038:	4629      	mov	r1, r5
 800403a:	f7fc fadd 	bl	80005f8 <__aeabi_dmul>
 800403e:	4604      	mov	r4, r0
 8004040:	460d      	mov	r5, r1
 8004042:	eeb0 1a49 	vmov.f32	s2, s18
 8004046:	eef0 1a69 	vmov.f32	s3, s19
 800404a:	eeb0 0a48 	vmov.f32	s0, s16
 800404e:	eef0 0a68 	vmov.f32	s1, s17
 8004052:	f006 fae9 	bl	800a628 <pow>
 8004056:	ec51 0b10 	vmov	r0, r1, d0
 800405a:	4652      	mov	r2, sl
 800405c:	465b      	mov	r3, fp
 800405e:	f7fc fbf5 	bl	800084c <__aeabi_ddiv>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800406a:	f7fc fac5 	bl	80005f8 <__aeabi_dmul>
 800406e:	4602      	mov	r2, r0
 8004070:	460b      	mov	r3, r1
 8004072:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004076:	f7fc fabf 	bl	80005f8 <__aeabi_dmul>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4620      	mov	r0, r4
 8004080:	4629      	mov	r1, r5
 8004082:	f7fc f903 	bl	800028c <__adddf3>
 8004086:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
	  Matrix_multiply(global_to_local, target_accelerateG, target_accelerateL);
 800408a:	aa30      	add	r2, sp, #192	; 0xc0
 800408c:	a92a      	add	r1, sp, #168	; 0xa8
 800408e:	486f      	ldr	r0, [pc, #444]	; (800424c <main+0x102c>)
 8004090:	f7fe feea 	bl	8002e68 <Matrix_multiply>
	  double Vt = P_current.type == 10 || P_current.type == 15 ? Vsv + (Vpolet - Vsv) - VelM * (RV.y / Hud) : Vpolet - VelM;
 8004094:	4b6a      	ldr	r3, [pc, #424]	; (8004240 <main+0x1020>)
 8004096:	7f1b      	ldrb	r3, [r3, #28]
 8004098:	2b0a      	cmp	r3, #10
 800409a:	f000 80e1 	beq.w	8004260 <main+0x1040>
 800409e:	2b0f      	cmp	r3, #15
 80040a0:	f000 80de 	beq.w	8004260 <main+0x1040>
 80040a4:	ec53 2b18 	vmov	r2, r3, d8
 80040a8:	2000      	movs	r0, #0
 80040aa:	4969      	ldr	r1, [pc, #420]	; (8004250 <main+0x1030>)
 80040ac:	f7fc f8ec 	bl	8000288 <__aeabi_dsub>
 80040b0:	4604      	mov	r4, r0
 80040b2:	460d      	mov	r5, r1
 80040b4:	e0e8      	b.n	8004288 <main+0x1068>
		  Ry = buf == 0 ? 9999 : R/buf;
 80040b6:	f20f 1b78 	addw	fp, pc, #376	; 0x178
 80040ba:	e9db ab00 	ldrd	sl, fp, [fp]
 80040be:	e71b      	b.n	8003ef8 <main+0xcd8>
		  target_accelerateG[0] = - pow(VelM,2) / Ry * sin(a_traj) * cos(phi_traj) * (fabs(roll) > M_PI /2 ? -1 : 1);
 80040c0:	ed9f 1b57 	vldr	d1, [pc, #348]	; 8004220 <main+0x1000>
 80040c4:	eeb0 0a48 	vmov.f32	s0, s16
 80040c8:	eef0 0a68 	vmov.f32	s1, s17
 80040cc:	f006 faac 	bl	800a628 <pow>
 80040d0:	ec53 2b10 	vmov	r2, r3, d0
 80040d4:	ed8d 0a0a 	vstr	s0, [sp, #40]	; 0x28
 80040d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80040dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80040de:	4652      	mov	r2, sl
 80040e0:	465b      	mov	r3, fp
 80040e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80040e6:	f7fc fbb1 	bl	800084c <__aeabi_ddiv>
 80040ea:	4604      	mov	r4, r0
 80040ec:	460d      	mov	r5, r1
 80040ee:	4b56      	ldr	r3, [pc, #344]	; (8004248 <main+0x1028>)
 80040f0:	ed93 bb00 	vldr	d11, [r3]
 80040f4:	eeb0 0a4b 	vmov.f32	s0, s22
 80040f8:	eef0 0a6b 	vmov.f32	s1, s23
 80040fc:	f006 fb90 	bl	800a820 <sin>
 8004100:	ec59 8b10 	vmov	r8, r9, d0
 8004104:	ee10 2a10 	vmov	r2, s0
 8004108:	464b      	mov	r3, r9
 800410a:	4620      	mov	r0, r4
 800410c:	4629      	mov	r1, r5
 800410e:	f7fc fa73 	bl	80005f8 <__aeabi_dmul>
 8004112:	4604      	mov	r4, r0
 8004114:	460d      	mov	r5, r1
 8004116:	4b4b      	ldr	r3, [pc, #300]	; (8004244 <main+0x1024>)
 8004118:	ed93 9b00 	vldr	d9, [r3]
 800411c:	eeb0 0a49 	vmov.f32	s0, s18
 8004120:	eef0 0a69 	vmov.f32	s1, s19
 8004124:	f006 fb1c 	bl	800a760 <cos>
 8004128:	ec53 2b10 	vmov	r2, r3, d0
 800412c:	4620      	mov	r0, r4
 800412e:	4629      	mov	r1, r5
 8004130:	f7fc fa62 	bl	80005f8 <__aeabi_dmul>
 8004134:	4606      	mov	r6, r0
 8004136:	460f      	mov	r7, r1
 8004138:	4b46      	ldr	r3, [pc, #280]	; (8004254 <main+0x1034>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	920c      	str	r2, [sp, #48]	; 0x30
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004144:	930d      	str	r3, [sp, #52]	; 0x34
 8004146:	a33c      	add	r3, pc, #240	; (adr r3, 8004238 <main+0x1018>)
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004150:	f7fc fce2 	bl	8000b18 <__aeabi_dcmpgt>
 8004154:	2800      	cmp	r0, #0
 8004156:	d05f      	beq.n	8004218 <main+0xff8>
 8004158:	2400      	movs	r4, #0
 800415a:	4d3f      	ldr	r5, [pc, #252]	; (8004258 <main+0x1038>)
 800415c:	4622      	mov	r2, r4
 800415e:	462b      	mov	r3, r5
 8004160:	4630      	mov	r0, r6
 8004162:	4639      	mov	r1, r7
 8004164:	f7fc fa48 	bl	80005f8 <__aeabi_dmul>
 8004168:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		  target_accelerateG[1] = 9.8 + pow(VelM,2) / Ry * cos(a_traj) * (fabs(roll) > M_PI /2 ? -1 : 1);
 800416c:	ed9f ab2c 	vldr	d10, [pc, #176]	; 8004220 <main+0x1000>
 8004170:	eeb0 1a4a 	vmov.f32	s2, s20
 8004174:	eef0 1a6a 	vmov.f32	s3, s21
 8004178:	eeb0 0a48 	vmov.f32	s0, s16
 800417c:	eef0 0a68 	vmov.f32	s1, s17
 8004180:	f006 fa52 	bl	800a628 <pow>
 8004184:	ec51 0b10 	vmov	r0, r1, d0
 8004188:	4652      	mov	r2, sl
 800418a:	465b      	mov	r3, fp
 800418c:	f7fc fb5e 	bl	800084c <__aeabi_ddiv>
 8004190:	4606      	mov	r6, r0
 8004192:	460f      	mov	r7, r1
 8004194:	eeb0 0a4b 	vmov.f32	s0, s22
 8004198:	eef0 0a6b 	vmov.f32	s1, s23
 800419c:	f006 fae0 	bl	800a760 <cos>
 80041a0:	ec53 2b10 	vmov	r2, r3, d0
 80041a4:	4630      	mov	r0, r6
 80041a6:	4639      	mov	r1, r7
 80041a8:	f7fc fa26 	bl	80005f8 <__aeabi_dmul>
 80041ac:	4622      	mov	r2, r4
 80041ae:	462b      	mov	r3, r5
 80041b0:	f7fc fa22 	bl	80005f8 <__aeabi_dmul>
 80041b4:	a31c      	add	r3, pc, #112	; (adr r3, 8004228 <main+0x1008>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fc f867 	bl	800028c <__adddf3>
 80041be:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		  target_accelerateG[2] = pow(VelM,2) / Ry * sin(a_traj) * sin(phi_traj) * (fabs(roll) > M_PI /2 ? -1 : 1);
 80041c2:	eeb0 1a4a 	vmov.f32	s2, s20
 80041c6:	eef0 1a6a 	vmov.f32	s3, s21
 80041ca:	eeb0 0a48 	vmov.f32	s0, s16
 80041ce:	eef0 0a68 	vmov.f32	s1, s17
 80041d2:	f006 fa29 	bl	800a628 <pow>
 80041d6:	ec51 0b10 	vmov	r0, r1, d0
 80041da:	4652      	mov	r2, sl
 80041dc:	465b      	mov	r3, fp
 80041de:	f7fc fb35 	bl	800084c <__aeabi_ddiv>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4640      	mov	r0, r8
 80041e8:	4649      	mov	r1, r9
 80041ea:	f7fc fa05 	bl	80005f8 <__aeabi_dmul>
 80041ee:	4606      	mov	r6, r0
 80041f0:	460f      	mov	r7, r1
 80041f2:	eeb0 0a49 	vmov.f32	s0, s18
 80041f6:	eef0 0a69 	vmov.f32	s1, s19
 80041fa:	f006 fb11 	bl	800a820 <sin>
 80041fe:	ec53 2b10 	vmov	r2, r3, d0
 8004202:	4630      	mov	r0, r6
 8004204:	4639      	mov	r1, r7
 8004206:	f7fc f9f7 	bl	80005f8 <__aeabi_dmul>
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	f7fc f9f3 	bl	80005f8 <__aeabi_dmul>
 8004212:	e9cd 012e 	strd	r0, r1, [sp, #184]	; 0xb8
 8004216:	e738      	b.n	800408a <main+0xe6a>
		  target_accelerateG[0] = - pow(VelM,2) / Ry * sin(a_traj) * cos(phi_traj) * (fabs(roll) > M_PI /2 ? -1 : 1);
 8004218:	2400      	movs	r4, #0
 800421a:	4d10      	ldr	r5, [pc, #64]	; (800425c <main+0x103c>)
 800421c:	e79e      	b.n	800415c <main+0xf3c>
 800421e:	bf00      	nop
 8004220:	00000000 	.word	0x00000000
 8004224:	40000000 	.word	0x40000000
 8004228:	9999999a 	.word	0x9999999a
 800422c:	40239999 	.word	0x40239999
 8004230:	00000000 	.word	0x00000000
 8004234:	40c38780 	.word	0x40c38780
 8004238:	54442d18 	.word	0x54442d18
 800423c:	3ff921fb 	.word	0x3ff921fb
 8004240:	200006bc 	.word	0x200006bc
 8004244:	20000b60 	.word	0x20000b60
 8004248:	20000780 	.word	0x20000780
 800424c:	200007b0 	.word	0x200007b0
 8004250:	40340000 	.word	0x40340000
 8004254:	20000b70 	.word	0x20000b70
 8004258:	bff00000 	.word	0xbff00000
 800425c:	3ff00000 	.word	0x3ff00000
	  double Vt = P_current.type == 10 || P_current.type == 15 ? Vsv + (Vpolet - Vsv) - VelM * (RV.y / Hud) : Vpolet - VelM;
 8004260:	4bc7      	ldr	r3, [pc, #796]	; (8004580 <main+0x1360>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	49c7      	ldr	r1, [pc, #796]	; (8004584 <main+0x1364>)
 8004268:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800426c:	f7fc faee 	bl	800084c <__aeabi_ddiv>
 8004270:	ec53 2b18 	vmov	r2, r3, d8
 8004274:	f7fc f9c0 	bl	80005f8 <__aeabi_dmul>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	2000      	movs	r0, #0
 800427e:	49c2      	ldr	r1, [pc, #776]	; (8004588 <main+0x1368>)
 8004280:	f7fc f802 	bl	8000288 <__aeabi_dsub>
 8004284:	4604      	mov	r4, r0
 8004286:	460d      	mov	r5, r1
	  Vt_sum = Vt_sum + Vt;
 8004288:	4ec0      	ldr	r6, [pc, #768]	; (800458c <main+0x136c>)
 800428a:	6830      	ldr	r0, [r6, #0]
 800428c:	f7fc f95c 	bl	8000548 <__aeabi_f2d>
 8004290:	4622      	mov	r2, r4
 8004292:	462b      	mov	r3, r5
 8004294:	f7fb fffa 	bl	800028c <__adddf3>
 8004298:	f7fc fca6 	bl	8000be8 <__aeabi_d2f>
 800429c:	6030      	str	r0, [r6, #0]
	  throttle = P_current.type = 12 ? 0 : 100 *(Pe * Vt + Ie * Vt_sum + De * (Vt - Vt_past) / deltaT);
 800429e:	4bbc      	ldr	r3, [pc, #752]	; (8004590 <main+0x1370>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
 80042a4:	f04f 0a00 	mov.w	sl, #0
 80042a8:	f04f 0b00 	mov.w	fp, #0
 80042ac:	4bb9      	ldr	r3, [pc, #740]	; (8004594 <main+0x1374>)
 80042ae:	e9c3 ab00 	strd	sl, fp, [r3]
	  Vt_past = Vt;
 80042b2:	4620      	mov	r0, r4
 80042b4:	4629      	mov	r1, r5
 80042b6:	f7fc fc97 	bl	8000be8 <__aeabi_d2f>
 80042ba:	4bb7      	ldr	r3, [pc, #732]	; (8004598 <main+0x1378>)
 80042bc:	6018      	str	r0, [r3, #0]
	  Set_Engine_Speed(throttle);
 80042be:	4650      	mov	r0, sl
 80042c0:	4659      	mov	r1, fp
 80042c2:	f7fe fc83 	bl	8002bcc <Set_Engine_Speed.1>
	  Zt_sum = Zt_sum + target_accelerateL[2];
 80042c6:	e9dd 4534 	ldrd	r4, r5, [sp, #208]	; 0xd0
 80042ca:	4eb4      	ldr	r6, [pc, #720]	; (800459c <main+0x137c>)
 80042cc:	6830      	ldr	r0, [r6, #0]
 80042ce:	f7fc f93b 	bl	8000548 <__aeabi_f2d>
 80042d2:	4622      	mov	r2, r4
 80042d4:	462b      	mov	r3, r5
 80042d6:	f7fb ffd9 	bl	800028c <__adddf3>
 80042da:	f7fc fc85 	bl	8000be8 <__aeabi_d2f>
 80042de:	ee08 0a10 	vmov	s16, r0
 80042e2:	6030      	str	r0, [r6, #0]
	  angle_aileron = 90 * (Pr * target_accelerateL[2] + Ir * Zt_sum + Dr * (target_accelerateL[2] - Zt_past) / deltaT);
 80042e4:	a39e      	add	r3, pc, #632	; (adr r3, 8004560 <main+0x1340>)
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	4620      	mov	r0, r4
 80042ec:	4629      	mov	r1, r5
 80042ee:	f7fc f983 	bl	80005f8 <__aeabi_dmul>
 80042f2:	4606      	mov	r6, r0
 80042f4:	460f      	mov	r7, r1
 80042f6:	eddf 7aaa 	vldr	s15, [pc, #680]	; 80045a0 <main+0x1380>
 80042fa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80042fe:	ee17 0a90 	vmov	r0, s15
 8004302:	f7fc f921 	bl	8000548 <__aeabi_f2d>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4630      	mov	r0, r6
 800430c:	4639      	mov	r1, r7
 800430e:	f7fb ffbd 	bl	800028c <__adddf3>
 8004312:	4606      	mov	r6, r0
 8004314:	460f      	mov	r7, r1
 8004316:	4ba3      	ldr	r3, [pc, #652]	; (80045a4 <main+0x1384>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	f7fc f915 	bl	8000548 <__aeabi_f2d>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4620      	mov	r0, r4
 8004324:	4629      	mov	r1, r5
 8004326:	f7fb ffaf 	bl	8000288 <__aeabi_dsub>
 800432a:	2200      	movs	r2, #0
 800432c:	4b9e      	ldr	r3, [pc, #632]	; (80045a8 <main+0x1388>)
 800432e:	f7fc f963 	bl	80005f8 <__aeabi_dmul>
 8004332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004336:	f7fc fa89 	bl	800084c <__aeabi_ddiv>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4630      	mov	r0, r6
 8004340:	4639      	mov	r1, r7
 8004342:	f7fb ffa3 	bl	800028c <__adddf3>
 8004346:	2200      	movs	r2, #0
 8004348:	4b98      	ldr	r3, [pc, #608]	; (80045ac <main+0x138c>)
 800434a:	f7fc f955 	bl	80005f8 <__aeabi_dmul>
 800434e:	4680      	mov	r8, r0
 8004350:	4689      	mov	r9, r1
 8004352:	4b97      	ldr	r3, [pc, #604]	; (80045b0 <main+0x1390>)
 8004354:	e9c3 8900 	strd	r8, r9, [r3]
	  angle_aileron = angle_aileron < 0 ? 0 : (angle_aileron > 180 ? 180 : angle_aileron);
 8004358:	4652      	mov	r2, sl
 800435a:	465b      	mov	r3, fp
 800435c:	f7fc fbbe 	bl	8000adc <__aeabi_dcmplt>
 8004360:	b958      	cbnz	r0, 800437a <main+0x115a>
 8004362:	2200      	movs	r2, #0
 8004364:	4b93      	ldr	r3, [pc, #588]	; (80045b4 <main+0x1394>)
 8004366:	4640      	mov	r0, r8
 8004368:	4649      	mov	r1, r9
 800436a:	f7fc fbd5 	bl	8000b18 <__aeabi_dcmpgt>
 800436e:	b140      	cbz	r0, 8004382 <main+0x1162>
 8004370:	f04f 0800 	mov.w	r8, #0
 8004374:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80045b4 <main+0x1394>
 8004378:	e003      	b.n	8004382 <main+0x1162>
 800437a:	f04f 0800 	mov.w	r8, #0
 800437e:	f04f 0900 	mov.w	r9, #0
 8004382:	4e8b      	ldr	r6, [pc, #556]	; (80045b0 <main+0x1390>)
 8004384:	e9c6 8900 	strd	r8, r9, [r6]
	  Zt_past = target_accelerateL[2];
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	f7fc fc2c 	bl	8000be8 <__aeabi_d2f>
 8004390:	4b84      	ldr	r3, [pc, #528]	; (80045a4 <main+0x1384>)
 8004392:	6018      	str	r0, [r3, #0]
	  Set_Servo_RightWing(90 - angle_aileron);
 8004394:	4642      	mov	r2, r8
 8004396:	464b      	mov	r3, r9
 8004398:	2000      	movs	r0, #0
 800439a:	4984      	ldr	r1, [pc, #528]	; (80045ac <main+0x138c>)
 800439c:	f7fb ff74 	bl	8000288 <__aeabi_dsub>
 80043a0:	f7fe fb4e 	bl	8002a40 <Set_Servo_RightWing.2>
	  Set_Servo_LeftWing(90 + angle_aileron);
 80043a4:	2200      	movs	r2, #0
 80043a6:	4b81      	ldr	r3, [pc, #516]	; (80045ac <main+0x138c>)
 80043a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80043ac:	f7fb ff6e 	bl	800028c <__adddf3>
 80043b0:	f7fe fb6e 	bl	8002a90 <Set_Servo_LeftWing.3>
	  double Yt = target_accelerateL[1] - accV.y;
 80043b4:	4b80      	ldr	r3, [pc, #512]	; (80045b8 <main+0x1398>)
 80043b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043ba:	e9dd 0132 	ldrd	r0, r1, [sp, #200]	; 0xc8
 80043be:	f7fb ff63 	bl	8000288 <__aeabi_dsub>
 80043c2:	4604      	mov	r4, r0
 80043c4:	460d      	mov	r5, r1
	  Yt_sum = Yt_sum + Yt;
 80043c6:	4e7d      	ldr	r6, [pc, #500]	; (80045bc <main+0x139c>)
 80043c8:	6830      	ldr	r0, [r6, #0]
 80043ca:	f7fc f8bd 	bl	8000548 <__aeabi_f2d>
 80043ce:	4622      	mov	r2, r4
 80043d0:	462b      	mov	r3, r5
 80043d2:	f7fb ff5b 	bl	800028c <__adddf3>
 80043d6:	f7fc fc07 	bl	8000be8 <__aeabi_d2f>
 80043da:	ee08 0a10 	vmov	s16, r0
 80043de:	6030      	str	r0, [r6, #0]
	  angle_rudder_up = 90 + 90 * (Pp * Yt + Ip * Yt_sum + Dp * (Yt - Yt_past) / deltaT);
 80043e0:	a361      	add	r3, pc, #388	; (adr r3, 8004568 <main+0x1348>)
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f7fc f905 	bl	80005f8 <__aeabi_dmul>
 80043ee:	4606      	mov	r6, r0
 80043f0:	460f      	mov	r7, r1
 80043f2:	eddf 7a73 	vldr	s15, [pc, #460]	; 80045c0 <main+0x13a0>
 80043f6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80043fa:	ee17 0a90 	vmov	r0, s15
 80043fe:	f7fc f8a3 	bl	8000548 <__aeabi_f2d>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4630      	mov	r0, r6
 8004408:	4639      	mov	r1, r7
 800440a:	f7fb ff3f 	bl	800028c <__adddf3>
 800440e:	4606      	mov	r6, r0
 8004410:	460f      	mov	r7, r1
 8004412:	4b6c      	ldr	r3, [pc, #432]	; (80045c4 <main+0x13a4>)
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	f7fc f897 	bl	8000548 <__aeabi_f2d>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4620      	mov	r0, r4
 8004420:	4629      	mov	r1, r5
 8004422:	f7fb ff31 	bl	8000288 <__aeabi_dsub>
 8004426:	a352      	add	r3, pc, #328	; (adr r3, 8004570 <main+0x1350>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f7fc f8e4 	bl	80005f8 <__aeabi_dmul>
 8004430:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004434:	f7fc fa0a 	bl	800084c <__aeabi_ddiv>
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4630      	mov	r0, r6
 800443e:	4639      	mov	r1, r7
 8004440:	f7fb ff24 	bl	800028c <__adddf3>
 8004444:	2200      	movs	r2, #0
 8004446:	4b59      	ldr	r3, [pc, #356]	; (80045ac <main+0x138c>)
 8004448:	f7fc f8d6 	bl	80005f8 <__aeabi_dmul>
 800444c:	2200      	movs	r2, #0
 800444e:	4b57      	ldr	r3, [pc, #348]	; (80045ac <main+0x138c>)
 8004450:	f7fb ff1c 	bl	800028c <__adddf3>
 8004454:	4606      	mov	r6, r0
 8004456:	460f      	mov	r7, r1
 8004458:	4b5b      	ldr	r3, [pc, #364]	; (80045c8 <main+0x13a8>)
 800445a:	e9c3 6700 	strd	r6, r7, [r3]
	  angle_rudder_up = angle_rudder_up < 0 ? 0 : (angle_rudder_up > 180 ? 180 : angle_rudder_up);
 800445e:	2200      	movs	r2, #0
 8004460:	2300      	movs	r3, #0
 8004462:	f7fc fb3b 	bl	8000adc <__aeabi_dcmplt>
 8004466:	b948      	cbnz	r0, 800447c <main+0x125c>
 8004468:	2200      	movs	r2, #0
 800446a:	4b52      	ldr	r3, [pc, #328]	; (80045b4 <main+0x1394>)
 800446c:	4630      	mov	r0, r6
 800446e:	4639      	mov	r1, r7
 8004470:	f7fc fb52 	bl	8000b18 <__aeabi_dcmpgt>
 8004474:	b120      	cbz	r0, 8004480 <main+0x1260>
 8004476:	2600      	movs	r6, #0
 8004478:	4f4e      	ldr	r7, [pc, #312]	; (80045b4 <main+0x1394>)
 800447a:	e001      	b.n	8004480 <main+0x1260>
 800447c:	2600      	movs	r6, #0
 800447e:	2700      	movs	r7, #0
 8004480:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <main+0x13a8>)
 8004482:	e9c3 6700 	strd	r6, r7, [r3]
	  Yt_past = Yt;
 8004486:	4620      	mov	r0, r4
 8004488:	4629      	mov	r1, r5
 800448a:	f7fc fbad 	bl	8000be8 <__aeabi_d2f>
 800448e:	4b4d      	ldr	r3, [pc, #308]	; (80045c4 <main+0x13a4>)
 8004490:	6018      	str	r0, [r3, #0]
	  Set_Servo_Elevator(angle_rudder_up);
 8004492:	4630      	mov	r0, r6
 8004494:	4639      	mov	r1, r7
 8004496:	f7fe fb23 	bl	8002ae0 <Set_Servo_Elevator.4>
	  beta_sum = beta_sum + beta;
 800449a:	4b4c      	ldr	r3, [pc, #304]	; (80045cc <main+0x13ac>)
 800449c:	e9d3 6700 	ldrd	r6, r7, [r3]
 80044a0:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80045d8 <main+0x13b8>
 80044a4:	f8d8 0000 	ldr.w	r0, [r8]
 80044a8:	f7fc f84e 	bl	8000548 <__aeabi_f2d>
 80044ac:	4632      	mov	r2, r6
 80044ae:	463b      	mov	r3, r7
 80044b0:	f7fb feec 	bl	800028c <__adddf3>
 80044b4:	f7fc fb98 	bl	8000be8 <__aeabi_d2f>
 80044b8:	ee08 0a10 	vmov	s16, r0
 80044bc:	f8c8 0000 	str.w	r0, [r8]
	  angle_rudder_course = 90 + 90 * (Py * beta + Iy * beta_sum + Dy * (Yt - beta_past) / deltaT);
 80044c0:	2200      	movs	r2, #0
 80044c2:	4b39      	ldr	r3, [pc, #228]	; (80045a8 <main+0x1388>)
 80044c4:	4630      	mov	r0, r6
 80044c6:	4639      	mov	r1, r7
 80044c8:	f7fc f896 	bl	80005f8 <__aeabi_dmul>
 80044cc:	4680      	mov	r8, r0
 80044ce:	4689      	mov	r9, r1
 80044d0:	eddf 7a33 	vldr	s15, [pc, #204]	; 80045a0 <main+0x1380>
 80044d4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80044d8:	ee17 0a90 	vmov	r0, s15
 80044dc:	f7fc f834 	bl	8000548 <__aeabi_f2d>
 80044e0:	4602      	mov	r2, r0
 80044e2:	460b      	mov	r3, r1
 80044e4:	4640      	mov	r0, r8
 80044e6:	4649      	mov	r1, r9
 80044e8:	f7fb fed0 	bl	800028c <__adddf3>
 80044ec:	4680      	mov	r8, r0
 80044ee:	4689      	mov	r9, r1
 80044f0:	4b37      	ldr	r3, [pc, #220]	; (80045d0 <main+0x13b0>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	f7fc f828 	bl	8000548 <__aeabi_f2d>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4620      	mov	r0, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	f7fb fec2 	bl	8000288 <__aeabi_dsub>
 8004504:	a31c      	add	r3, pc, #112	; (adr r3, 8004578 <main+0x1358>)
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f7fc f875 	bl	80005f8 <__aeabi_dmul>
 800450e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004512:	f7fc f99b 	bl	800084c <__aeabi_ddiv>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	4640      	mov	r0, r8
 800451c:	4649      	mov	r1, r9
 800451e:	f7fb feb5 	bl	800028c <__adddf3>
 8004522:	2200      	movs	r2, #0
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <main+0x138c>)
 8004526:	f7fc f867 	bl	80005f8 <__aeabi_dmul>
 800452a:	2200      	movs	r2, #0
 800452c:	4b1f      	ldr	r3, [pc, #124]	; (80045ac <main+0x138c>)
 800452e:	f7fb fead 	bl	800028c <__adddf3>
 8004532:	4604      	mov	r4, r0
 8004534:	460d      	mov	r5, r1
 8004536:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <main+0x13b4>)
 8004538:	e9c3 4500 	strd	r4, r5, [r3]
	  angle_rudder_course = angle_rudder_course < 0 ? 0 : (angle_rudder_course > 180 ? 180 : angle_rudder_course);
 800453c:	2200      	movs	r2, #0
 800453e:	2300      	movs	r3, #0
 8004540:	f7fc facc 	bl	8000adc <__aeabi_dcmplt>
 8004544:	2800      	cmp	r0, #0
 8004546:	d149      	bne.n	80045dc <main+0x13bc>
 8004548:	2200      	movs	r2, #0
 800454a:	4b1a      	ldr	r3, [pc, #104]	; (80045b4 <main+0x1394>)
 800454c:	4620      	mov	r0, r4
 800454e:	4629      	mov	r1, r5
 8004550:	f7fc fae2 	bl	8000b18 <__aeabi_dcmpgt>
 8004554:	2800      	cmp	r0, #0
 8004556:	d043      	beq.n	80045e0 <main+0x13c0>
 8004558:	2400      	movs	r4, #0
 800455a:	4d16      	ldr	r5, [pc, #88]	; (80045b4 <main+0x1394>)
 800455c:	e040      	b.n	80045e0 <main+0x13c0>
 800455e:	bf00      	nop
 8004560:	40000000 	.word	0x40000000
 8004564:	3fe33333 	.word	0x3fe33333
 8004568:	a0000000 	.word	0xa0000000
 800456c:	3fd99999 	.word	0x3fd99999
 8004570:	40000000 	.word	0x40000000
 8004574:	3f947ae1 	.word	0x3f947ae1
 8004578:	40000000 	.word	0x40000000
 800457c:	3fa47ae1 	.word	0x3fa47ae1
 8004580:	20000030 	.word	0x20000030
 8004584:	20000700 	.word	0x20000700
 8004588:	40340000 	.word	0x40340000
 800458c:	2000076c 	.word	0x2000076c
 8004590:	200006bc 	.word	0x200006bc
 8004594:	20000b78 	.word	0x20000b78
 8004598:	20000768 	.word	0x20000768
 800459c:	2000077c 	.word	0x2000077c
 80045a0:	3c23d70a 	.word	0x3c23d70a
 80045a4:	20000778 	.word	0x20000778
 80045a8:	3fe00000 	.word	0x3fe00000
 80045ac:	40568000 	.word	0x40568000
 80045b0:	20000010 	.word	0x20000010
 80045b4:	40668000 	.word	0x40668000
 80045b8:	20000788 	.word	0x20000788
 80045bc:	20000774 	.word	0x20000774
 80045c0:	3ca3d70a 	.word	0x3ca3d70a
 80045c4:	20000770 	.word	0x20000770
 80045c8:	20000020 	.word	0x20000020
 80045cc:	200007a0 	.word	0x200007a0
 80045d0:	200007a8 	.word	0x200007a8
 80045d4:	20000018 	.word	0x20000018
 80045d8:	200007ac 	.word	0x200007ac
 80045dc:	2400      	movs	r4, #0
 80045de:	2500      	movs	r5, #0
 80045e0:	4b11      	ldr	r3, [pc, #68]	; (8004628 <main+0x1408>)
 80045e2:	e9c3 4500 	strd	r4, r5, [r3]
	  beta_past = beta;
 80045e6:	4630      	mov	r0, r6
 80045e8:	4639      	mov	r1, r7
 80045ea:	f7fc fafd 	bl	8000be8 <__aeabi_d2f>
 80045ee:	4b0f      	ldr	r3, [pc, #60]	; (800462c <main+0x140c>)
 80045f0:	6018      	str	r0, [r3, #0]
	  Set_Servo_Elevator(angle_rudder_course);
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f7fe fa73 	bl	8002ae0 <Set_Servo_Elevator.4>
	  if (P_current.type == 7 && Ltarget < LdropG + 1.5) Set_Servo_CargoHatch(180);
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <main+0x1410>)
 80045fc:	7f1b      	ldrb	r3, [r3, #28]
 80045fe:	2b07      	cmp	r3, #7
 8004600:	d120      	bne.n	8004644 <main+0x1424>
 8004602:	2200      	movs	r2, #0
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <main+0x1414>)
 8004606:	490c      	ldr	r1, [pc, #48]	; (8004638 <main+0x1418>)
 8004608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800460c:	f7fb fe3e 	bl	800028c <__adddf3>
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <main+0x141c>)
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f7fc fa7f 	bl	8000b18 <__aeabi_dcmpgt>
 800461a:	b198      	cbz	r0, 8004644 <main+0x1424>
 800461c:	2000      	movs	r0, #0
 800461e:	4908      	ldr	r1, [pc, #32]	; (8004640 <main+0x1420>)
 8004620:	f7fe faae 	bl	8002b80 <Set_Servo_CargoHatch.5>
 8004624:	e012      	b.n	800464c <main+0x142c>
 8004626:	bf00      	nop
 8004628:	20000018 	.word	0x20000018
 800462c:	200007a8 	.word	0x200007a8
 8004630:	200006bc 	.word	0x200006bc
 8004634:	3ff80000 	.word	0x3ff80000
 8004638:	200006a8 	.word	0x200006a8
 800463c:	200006b0 	.word	0x200006b0
 8004640:	40668000 	.word	0x40668000
	  else Set_Servo_CargoHatch(0);
 8004644:	2000      	movs	r0, #0
 8004646:	2100      	movs	r1, #0
 8004648:	f7fe fa9a 	bl	8002b80 <Set_Servo_CargoHatch.5>
	  HAL_Delay(1000);
 800464c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004650:	f001 f802 	bl	8005658 <HAL_Delay>
	  mpu6050_read();
 8004654:	f000 faf8 	bl	8004c48 <mpu6050_read>
	  hmc5883_read();
 8004658:	f7fd fb42 	bl	8001ce0 <hmc5883_read>
	  i++;
 800465c:	4abc      	ldr	r2, [pc, #752]	; (8004950 <main+0x1730>)
 800465e:	6813      	ldr	r3, [r2, #0]
 8004660:	3301      	adds	r3, #1
 8004662:	6013      	str	r3, [r2, #0]
	  if (getGPS(&gpsData) == 0)
 8004664:	48bb      	ldr	r0, [pc, #748]	; (8004954 <main+0x1734>)
 8004666:	f7fc fed5 	bl	8001414 <getGPS>
 800466a:	2800      	cmp	r0, #0
 800466c:	d17f      	bne.n	800476e <main+0x154e>
		  if (gpsData.ggastruct.lcation.NS == 'N')
 800466e:	4bb9      	ldr	r3, [pc, #740]	; (8004954 <main+0x1734>)
 8004670:	791b      	ldrb	r3, [r3, #4]
 8004672:	2b4e      	cmp	r3, #78	; 0x4e
 8004674:	f43e ae64 	beq.w	8003340 <main+0x120>
			  RV.x = -6378000 * (gpsData.ggastruct.lcation.latitude * M_PI/180 + RV0.x);
 8004678:	4bb6      	ldr	r3, [pc, #728]	; (8004954 <main+0x1734>)
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	f7fb ff64 	bl	8000548 <__aeabi_f2d>
 8004680:	a3ab      	add	r3, pc, #684	; (adr r3, 8004930 <main+0x1710>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f7fb ffb7 	bl	80005f8 <__aeabi_dmul>
 800468a:	2200      	movs	r2, #0
 800468c:	4bb2      	ldr	r3, [pc, #712]	; (8004958 <main+0x1738>)
 800468e:	f7fc f8dd 	bl	800084c <__aeabi_ddiv>
 8004692:	4bb2      	ldr	r3, [pc, #712]	; (800495c <main+0x173c>)
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f7fb fdf8 	bl	800028c <__adddf3>
 800469c:	a3a6      	add	r3, pc, #664	; (adr r3, 8004938 <main+0x1718>)
 800469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a2:	f7fb ffa9 	bl	80005f8 <__aeabi_dmul>
 80046a6:	4bae      	ldr	r3, [pc, #696]	; (8004960 <main+0x1740>)
 80046a8:	e9c3 0100 	strd	r0, r1, [r3]
		  if (gpsData.ggastruct.lcation.EW == 'E')
 80046ac:	4ba9      	ldr	r3, [pc, #676]	; (8004954 <main+0x1734>)
 80046ae:	7b1b      	ldrb	r3, [r3, #12]
 80046b0:	2b45      	cmp	r3, #69	; 0x45
 80046b2:	f43e ae61 	beq.w	8003378 <main+0x158>
			  RV.z = -6378000 * cos(gpsData.ggastruct.lcation.latitude * M_PI/180) * (gpsData.ggastruct.lcation.longitude * M_PI/180 + RV0.z);
 80046b6:	4ea7      	ldr	r6, [pc, #668]	; (8004954 <main+0x1734>)
 80046b8:	6830      	ldr	r0, [r6, #0]
 80046ba:	f7fb ff45 	bl	8000548 <__aeabi_f2d>
 80046be:	a39c      	add	r3, pc, #624	; (adr r3, 8004930 <main+0x1710>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fb ff98 	bl	80005f8 <__aeabi_dmul>
 80046c8:	2200      	movs	r2, #0
 80046ca:	4ba3      	ldr	r3, [pc, #652]	; (8004958 <main+0x1738>)
 80046cc:	f7fc f8be 	bl	800084c <__aeabi_ddiv>
 80046d0:	ec41 0b10 	vmov	d0, r0, r1
 80046d4:	f006 f844 	bl	800a760 <cos>
 80046d8:	ec51 0b10 	vmov	r0, r1, d0
 80046dc:	a396      	add	r3, pc, #600	; (adr r3, 8004938 <main+0x1718>)
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f7fb ff89 	bl	80005f8 <__aeabi_dmul>
 80046e6:	4604      	mov	r4, r0
 80046e8:	460d      	mov	r5, r1
 80046ea:	68b0      	ldr	r0, [r6, #8]
 80046ec:	f7fb ff2c 	bl	8000548 <__aeabi_f2d>
 80046f0:	a38f      	add	r3, pc, #572	; (adr r3, 8004930 <main+0x1710>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb ff7f 	bl	80005f8 <__aeabi_dmul>
 80046fa:	2200      	movs	r2, #0
 80046fc:	4b96      	ldr	r3, [pc, #600]	; (8004958 <main+0x1738>)
 80046fe:	f7fc f8a5 	bl	800084c <__aeabi_ddiv>
 8004702:	4b96      	ldr	r3, [pc, #600]	; (800495c <main+0x173c>)
 8004704:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004708:	f7fb fdc0 	bl	800028c <__adddf3>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4620      	mov	r0, r4
 8004712:	4629      	mov	r1, r5
 8004714:	f7fb ff70 	bl	80005f8 <__aeabi_dmul>
 8004718:	4b91      	ldr	r3, [pc, #580]	; (8004960 <main+0x1740>)
 800471a:	e9c3 0104 	strd	r0, r1, [r3, #16]
		  RV.y = 0.5 * (bmp180_getalt(0) - AltBarr0) + 0.5 * (gpsData.ggastruct.alt.altitude - RV0.y);
 800471e:	2000      	movs	r0, #0
 8004720:	f7fd fa42 	bl	8001ba8 <bmp180_getalt>
 8004724:	ee10 0a10 	vmov	r0, s0
 8004728:	f7fb ff0e 	bl	8000548 <__aeabi_f2d>
 800472c:	4b8d      	ldr	r3, [pc, #564]	; (8004964 <main+0x1744>)
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	f7fb fda9 	bl	8000288 <__aeabi_dsub>
 8004736:	2200      	movs	r2, #0
 8004738:	4b8b      	ldr	r3, [pc, #556]	; (8004968 <main+0x1748>)
 800473a:	f7fb ff5d 	bl	80005f8 <__aeabi_dmul>
 800473e:	4604      	mov	r4, r0
 8004740:	460d      	mov	r5, r1
 8004742:	4b84      	ldr	r3, [pc, #528]	; (8004954 <main+0x1734>)
 8004744:	6a18      	ldr	r0, [r3, #32]
 8004746:	f7fb feff 	bl	8000548 <__aeabi_f2d>
 800474a:	4b84      	ldr	r3, [pc, #528]	; (800495c <main+0x173c>)
 800474c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004750:	f7fb fd9a 	bl	8000288 <__aeabi_dsub>
 8004754:	2200      	movs	r2, #0
 8004756:	4b84      	ldr	r3, [pc, #528]	; (8004968 <main+0x1748>)
 8004758:	f7fb ff4e 	bl	80005f8 <__aeabi_dmul>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4620      	mov	r0, r4
 8004762:	4629      	mov	r1, r5
 8004764:	f7fb fd92 	bl	800028c <__adddf3>
 8004768:	4b7d      	ldr	r3, [pc, #500]	; (8004960 <main+0x1740>)
 800476a:	e9c3 0102 	strd	r0, r1, [r3, #8]
	  getKalmanCSE();
 800476e:	f7fe f8c9 	bl	8002904 <getKalmanCSE>
	  yaw = hmc5883_getYaw(pitch, roll);
 8004772:	f8df a21c 	ldr.w	sl, [pc, #540]	; 8004990 <main+0x1770>
 8004776:	f8df 821c 	ldr.w	r8, [pc, #540]	; 8004994 <main+0x1774>
 800477a:	ed9a 1b00 	vldr	d1, [sl]
 800477e:	ed98 0b00 	vldr	d0, [r8]
 8004782:	f7fd fb61 	bl	8001e48 <hmc5883_getYaw>
 8004786:	4d79      	ldr	r5, [pc, #484]	; (800496c <main+0x174c>)
 8004788:	ed85 0b00 	vstr	d0, [r5]
	  yaw = simpleKalmanYAW(yaw);
 800478c:	f7fd ff44 	bl	8002618 <simpleKalmanYAW>
 8004790:	ed85 0b00 	vstr	d0, [r5]
	  float SOG = (gpsData.rmcstruct.speed)*0.514;
 8004794:	4c6f      	ldr	r4, [pc, #444]	; (8004954 <main+0x1734>)
 8004796:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004798:	f7fb fed6 	bl	8000548 <__aeabi_f2d>
 800479c:	a368      	add	r3, pc, #416	; (adr r3, 8004940 <main+0x1720>)
 800479e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a2:	f7fb ff29 	bl	80005f8 <__aeabi_dmul>
 80047a6:	f7fc fa1f 	bl	8000be8 <__aeabi_d2f>
 80047aa:	4606      	mov	r6, r0
	  float course = ((gpsData.rmcstruct.course)*M_PI/180) - (2*M_PI);
 80047ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80047ae:	f7fb fecb 	bl	8000548 <__aeabi_f2d>
 80047b2:	a35f      	add	r3, pc, #380	; (adr r3, 8004930 <main+0x1710>)
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f7fb ff1e 	bl	80005f8 <__aeabi_dmul>
 80047bc:	2200      	movs	r2, #0
 80047be:	4b66      	ldr	r3, [pc, #408]	; (8004958 <main+0x1738>)
 80047c0:	f7fc f844 	bl	800084c <__aeabi_ddiv>
 80047c4:	a360      	add	r3, pc, #384	; (adr r3, 8004948 <main+0x1728>)
 80047c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ca:	f7fb fd5d 	bl	8000288 <__aeabi_dsub>
 80047ce:	f7fc fa0b 	bl	8000be8 <__aeabi_d2f>
 80047d2:	4604      	mov	r4, r0
	  float deltaT = (HAL_GetTick()-GPSLastCalcTick)/1000;
 80047d4:	f000 ff3a 	bl	800564c <HAL_GetTick>
 80047d8:	f7fb fe94 	bl	8000504 <__aeabi_ui2d>
 80047dc:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8004998 <main+0x1778>
 80047e0:	e9d9 2300 	ldrd	r2, r3, [r9]
 80047e4:	f7fb fd50 	bl	8000288 <__aeabi_dsub>
 80047e8:	2200      	movs	r2, #0
 80047ea:	4b61      	ldr	r3, [pc, #388]	; (8004970 <main+0x1750>)
 80047ec:	f7fc f82e 	bl	800084c <__aeabi_ddiv>
 80047f0:	f7fc f9fa 	bl	8000be8 <__aeabi_d2f>
 80047f4:	9000      	str	r0, [sp, #0]
	  VelV.x = SOG * cos(course);
 80047f6:	4630      	mov	r0, r6
 80047f8:	f7fb fea6 	bl	8000548 <__aeabi_f2d>
 80047fc:	4606      	mov	r6, r0
 80047fe:	460f      	mov	r7, r1
 8004800:	4620      	mov	r0, r4
 8004802:	f7fb fea1 	bl	8000548 <__aeabi_f2d>
 8004806:	ec41 0b18 	vmov	d8, r0, r1
 800480a:	ec41 0b10 	vmov	d0, r0, r1
 800480e:	f005 ffa7 	bl	800a760 <cos>
 8004812:	ec53 2b10 	vmov	r2, r3, d0
 8004816:	4630      	mov	r0, r6
 8004818:	4639      	mov	r1, r7
 800481a:	f7fb feed 	bl	80005f8 <__aeabi_dmul>
 800481e:	4c55      	ldr	r4, [pc, #340]	; (8004974 <main+0x1754>)
 8004820:	e9c4 0100 	strd	r0, r1, [r4]
	  VelV.y = SOG * sin(course);
 8004824:	eeb0 0a48 	vmov.f32	s0, s16
 8004828:	eef0 0a68 	vmov.f32	s1, s17
 800482c:	f005 fff8 	bl	800a820 <sin>
 8004830:	ec53 2b10 	vmov	r2, r3, d0
 8004834:	4630      	mov	r0, r6
 8004836:	4639      	mov	r1, r7
 8004838:	f7fb fede 	bl	80005f8 <__aeabi_dmul>
 800483c:	e9c4 0102 	strd	r0, r1, [r4, #8]
	  VelV.z = (RV.y - yelast)/deltaT;
 8004840:	4b47      	ldr	r3, [pc, #284]	; (8004960 <main+0x1740>)
 8004842:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
 8004846:	f8df b154 	ldr.w	fp, [pc, #340]	; 800499c <main+0x177c>
 800484a:	e9db 2300 	ldrd	r2, r3, [fp]
 800484e:	4630      	mov	r0, r6
 8004850:	4639      	mov	r1, r7
 8004852:	f7fb fd19 	bl	8000288 <__aeabi_dsub>
 8004856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800485a:	9800      	ldr	r0, [sp, #0]
 800485c:	f7fb fe74 	bl	8000548 <__aeabi_f2d>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	e9cd 2300 	strd	r2, r3, [sp]
 8004868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800486c:	f7fb ffee 	bl	800084c <__aeabi_ddiv>
 8004870:	e9c4 0104 	strd	r0, r1, [r4, #16]
	  yelast = RV.y;
 8004874:	e9cb 6700 	strd	r6, r7, [fp]
	  GPSLastCalcTick = HAL_GetTick();
 8004878:	f000 fee8 	bl	800564c <HAL_GetTick>
 800487c:	f7fb fe42 	bl	8000504 <__aeabi_ui2d>
 8004880:	e9c9 0100 	strd	r0, r1, [r9]
	  getKalmanVGPS();
 8004884:	f7fe f8ac 	bl	80029e0 <getKalmanVGPS>
	  ms4525_read();
 8004888:	f000 fb7a 	bl	8004f80 <ms4525_read>
	  Turn_Matrix(yaw, pitch, roll, local_to_global, global_to_local);
 800488c:	4e3a      	ldr	r6, [pc, #232]	; (8004978 <main+0x1758>)
 800488e:	4f3b      	ldr	r7, [pc, #236]	; (800497c <main+0x175c>)
 8004890:	4631      	mov	r1, r6
 8004892:	4638      	mov	r0, r7
 8004894:	ed9a 2b00 	vldr	d2, [sl]
 8004898:	ed98 1b00 	vldr	d1, [r8]
 800489c:	ed95 0b00 	vldr	d0, [r5]
 80048a0:	f7fe f9f8 	bl	8002c94 <Turn_Matrix>
	  double VGPS[3] = {VelV.x, VelV.y, VelV.z}, Vlocal[3];
 80048a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80048a8:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 80048ac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80048b0:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80048b4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80048b8:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
	  Matrix_multiply(global_to_local, VGPS, Vlocal);
 80048bc:	aa24      	add	r2, sp, #144	; 0x90
 80048be:	a91e      	add	r1, sp, #120	; 0x78
 80048c0:	4630      	mov	r0, r6
 80048c2:	f7fe fad1 	bl	8002e68 <Matrix_multiply>
	  double wair = Vlocal[0] - Vair;
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <main+0x1760>)
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	f7fb fe3d 	bl	8000548 <__aeabi_f2d>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 80048d6:	f7fb fcd7 	bl	8000288 <__aeabi_dsub>
 80048da:	4680      	mov	r8, r0
 80048dc:	4689      	mov	r9, r1
	  Matrix_multiply(global_to_local, wairg, wairl);
 80048de:	4c29      	ldr	r4, [pc, #164]	; (8004984 <main+0x1764>)
 80048e0:	4d29      	ldr	r5, [pc, #164]	; (8004988 <main+0x1768>)
 80048e2:	4622      	mov	r2, r4
 80048e4:	4629      	mov	r1, r5
 80048e6:	4630      	mov	r0, r6
 80048e8:	f7fe fabe 	bl	8002e68 <Matrix_multiply>
	  wairl[0] = wair;
 80048ec:	e9c4 8900 	strd	r8, r9, [r4]
	  Matrix_multiply(local_to_global, wairl, wairg);
 80048f0:	462a      	mov	r2, r5
 80048f2:	4621      	mov	r1, r4
 80048f4:	4638      	mov	r0, r7
 80048f6:	f7fe fab7 	bl	8002e68 <Matrix_multiply>
	  Va[0] = Vlocal[0] - wairl[0];
 80048fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80048fe:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8004902:	f7fb fcc1 	bl	8000288 <__aeabi_dsub>
 8004906:	ec41 0b1a 	vmov	d10, r0, r1
 800490a:	4d20      	ldr	r5, [pc, #128]	; (800498c <main+0x176c>)
 800490c:	e9c5 0100 	strd	r0, r1, [r5]
	  Va[1] = Vlocal[1] - wairl[1];
 8004910:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8004914:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 8004918:	f7fb fcb6 	bl	8000288 <__aeabi_dsub>
 800491c:	ec41 0b19 	vmov	d9, r0, r1
 8004920:	e9c5 0102 	strd	r0, r1, [r5, #8]
	  Va[2] = Vlocal[2] - wairl[2];
 8004924:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8004928:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800492c:	e038      	b.n	80049a0 <main+0x1780>
 800492e:	bf00      	nop
 8004930:	54442d18 	.word	0x54442d18
 8004934:	400921fb 	.word	0x400921fb
 8004938:	00000000 	.word	0x00000000
 800493c:	c1585484 	.word	0xc1585484
 8004940:	20c49ba6 	.word	0x20c49ba6
 8004944:	3fe072b0 	.word	0x3fe072b0
 8004948:	54442d18 	.word	0x54442d18
 800494c:	401921fb 	.word	0x401921fb
 8004950:	20000b14 	.word	0x20000b14
 8004954:	200007f8 	.word	0x200007f8
 8004958:	40668000 	.word	0x40668000
 800495c:	20000718 	.word	0x20000718
 8004960:	20000700 	.word	0x20000700
 8004964:	20000698 	.word	0x20000698
 8004968:	3fe00000 	.word	0x3fe00000
 800496c:	20000bb8 	.word	0x20000bb8
 8004970:	408f4000 	.word	0x408f4000
 8004974:	20000750 	.word	0x20000750
 8004978:	200007b0 	.word	0x200007b0
 800497c:	20000b18 	.word	0x20000b18
 8004980:	20000748 	.word	0x20000748
 8004984:	20000ba0 	.word	0x20000ba0
 8004988:	20000b88 	.word	0x20000b88
 800498c:	20000730 	.word	0x20000730
 8004990:	20000b70 	.word	0x20000b70
 8004994:	20000b68 	.word	0x20000b68
 8004998:	200006a0 	.word	0x200006a0
 800499c:	20000bc0 	.word	0x20000bc0
 80049a0:	f7fb fc72 	bl	8000288 <__aeabi_dsub>
 80049a4:	ec41 0b18 	vmov	d8, r0, r1
 80049a8:	e9c5 0104 	strd	r0, r1, [r5, #16]
	  double VaM = sqrt(pow(Va[0], 2) + pow(Va[1], 2) + pow(Va[2], 2));
 80049ac:	ed9f bb62 	vldr	d11, [pc, #392]	; 8004b38 <main+0x1918>
 80049b0:	eeb0 1a4b 	vmov.f32	s2, s22
 80049b4:	eef0 1a6b 	vmov.f32	s3, s23
 80049b8:	eeb0 0a4a 	vmov.f32	s0, s20
 80049bc:	eef0 0a6a 	vmov.f32	s1, s21
 80049c0:	f005 fe32 	bl	800a628 <pow>
 80049c4:	ec55 4b10 	vmov	r4, r5, d0
 80049c8:	eeb0 1a4b 	vmov.f32	s2, s22
 80049cc:	eef0 1a6b 	vmov.f32	s3, s23
 80049d0:	eeb0 0a49 	vmov.f32	s0, s18
 80049d4:	eef0 0a69 	vmov.f32	s1, s19
 80049d8:	f005 fe26 	bl	800a628 <pow>
 80049dc:	ec53 2b10 	vmov	r2, r3, d0
 80049e0:	4620      	mov	r0, r4
 80049e2:	4629      	mov	r1, r5
 80049e4:	f7fb fc52 	bl	800028c <__adddf3>
 80049e8:	4604      	mov	r4, r0
 80049ea:	460d      	mov	r5, r1
 80049ec:	eeb0 1a4b 	vmov.f32	s2, s22
 80049f0:	eef0 1a6b 	vmov.f32	s3, s23
 80049f4:	eeb0 0a48 	vmov.f32	s0, s16
 80049f8:	eef0 0a68 	vmov.f32	s1, s17
 80049fc:	f005 fe14 	bl	800a628 <pow>
 8004a00:	ec53 2b10 	vmov	r2, r3, d0
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb fc40 	bl	800028c <__adddf3>
 8004a0c:	ec41 0b10 	vmov	d0, r0, r1
 8004a10:	f005 fe7a 	bl	800a708 <sqrt>
 8004a14:	ec55 4b10 	vmov	r4, r5, d0
	  beta = VaM > 0 ?  asin(Va[2] / VaM) : 0;
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	ee10 0a10 	vmov	r0, s0
 8004a20:	4629      	mov	r1, r5
 8004a22:	f7fc f879 	bl	8000b18 <__aeabi_dcmpgt>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	f47e acdc 	bne.w	80033e4 <main+0x1c4>
 8004a2c:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8004b40 <main+0x1920>
 8004a30:	4b45      	ldr	r3, [pc, #276]	; (8004b48 <main+0x1928>)
 8004a32:	ed83 0b00 	vstr	d0, [r3]
	  double VelM = sqrt(pow(VelV.x, 2) + pow(VelV.y, 2) + pow(VelV.z, 2));
 8004a36:	4e45      	ldr	r6, [pc, #276]	; (8004b4c <main+0x192c>)
 8004a38:	ed96 bb00 	vldr	d11, [r6]
 8004a3c:	ed9f 9b3e 	vldr	d9, [pc, #248]	; 8004b38 <main+0x1918>
 8004a40:	eeb0 1a49 	vmov.f32	s2, s18
 8004a44:	eef0 1a69 	vmov.f32	s3, s19
 8004a48:	eeb0 0a4b 	vmov.f32	s0, s22
 8004a4c:	eef0 0a6b 	vmov.f32	s1, s23
 8004a50:	f005 fdea 	bl	800a628 <pow>
 8004a54:	ec55 4b10 	vmov	r4, r5, d0
 8004a58:	e9d6 8902 	ldrd	r8, r9, [r6, #8]
 8004a5c:	eeb0 1a49 	vmov.f32	s2, s18
 8004a60:	eef0 1a69 	vmov.f32	s3, s19
 8004a64:	ec49 8b10 	vmov	d0, r8, r9
 8004a68:	f005 fdde 	bl	800a628 <pow>
 8004a6c:	ec53 2b10 	vmov	r2, r3, d0
 8004a70:	4620      	mov	r0, r4
 8004a72:	4629      	mov	r1, r5
 8004a74:	f7fb fc0a 	bl	800028c <__adddf3>
 8004a78:	4604      	mov	r4, r0
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	ed96 ab04 	vldr	d10, [r6, #16]
 8004a80:	eeb0 1a49 	vmov.f32	s2, s18
 8004a84:	eef0 1a69 	vmov.f32	s3, s19
 8004a88:	eeb0 0a4a 	vmov.f32	s0, s20
 8004a8c:	eef0 0a6a 	vmov.f32	s1, s21
 8004a90:	f005 fdca 	bl	800a628 <pow>
 8004a94:	ec53 2b10 	vmov	r2, r3, d0
 8004a98:	4620      	mov	r0, r4
 8004a9a:	4629      	mov	r1, r5
 8004a9c:	f7fb fbf6 	bl	800028c <__adddf3>
 8004aa0:	ec41 0b10 	vmov	d0, r0, r1
 8004aa4:	f005 fe30 	bl	800a708 <sqrt>
 8004aa8:	eeb0 8a40 	vmov.f32	s16, s0
 8004aac:	eef0 8a60 	vmov.f32	s17, s1
	  double VelP = sqrt(pow(VelV.x, 2) + pow(VelV.z, 2));
 8004ab0:	eeb0 1a49 	vmov.f32	s2, s18
 8004ab4:	eef0 1a69 	vmov.f32	s3, s19
 8004ab8:	eeb0 0a4b 	vmov.f32	s0, s22
 8004abc:	eef0 0a6b 	vmov.f32	s1, s23
 8004ac0:	f005 fdb2 	bl	800a628 <pow>
 8004ac4:	ec55 4b10 	vmov	r4, r5, d0
 8004ac8:	eeb0 1a49 	vmov.f32	s2, s18
 8004acc:	eef0 1a69 	vmov.f32	s3, s19
 8004ad0:	eeb0 0a4a 	vmov.f32	s0, s20
 8004ad4:	eef0 0a6a 	vmov.f32	s1, s21
 8004ad8:	f005 fda6 	bl	800a628 <pow>
 8004adc:	ec53 2b10 	vmov	r2, r3, d0
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	4629      	mov	r1, r5
 8004ae4:	f7fb fbd2 	bl	800028c <__adddf3>
 8004ae8:	ec41 0b10 	vmov	d0, r0, r1
 8004aec:	f005 fe0c 	bl	800a708 <sqrt>
 8004af0:	ec55 4b10 	vmov	r4, r5, d0
	  a_traj = VelM > 0 ? (VelV.y >= 0 ? asin(VelV.y/VelM) : 2*M_PI - asin(VelV.y/VelM)) : 0;
 8004af4:	2200      	movs	r2, #0
 8004af6:	2300      	movs	r3, #0
 8004af8:	ec51 0b18 	vmov	r0, r1, d8
 8004afc:	f7fc f80c 	bl	8000b18 <__aeabi_dcmpgt>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	f43e ac8f 	beq.w	8003424 <main+0x204>
 8004b06:	2200      	movs	r2, #0
 8004b08:	2300      	movs	r3, #0
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	f7fb fff9 	bl	8000b04 <__aeabi_dcmpge>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	f43e ac72 	beq.w	80033fc <main+0x1dc>
 8004b18:	ec53 2b18 	vmov	r2, r3, d8
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	4649      	mov	r1, r9
 8004b20:	f7fb fe94 	bl	800084c <__aeabi_ddiv>
 8004b24:	ec41 0b10 	vmov	d0, r0, r1
 8004b28:	f005 fd4a 	bl	800a5c0 <asin>
 8004b2c:	eeb0 9a40 	vmov.f32	s18, s0
 8004b30:	eef0 9a60 	vmov.f32	s19, s1
 8004b34:	f7fe bc78 	b.w	8003428 <main+0x208>
 8004b38:	00000000 	.word	0x00000000
 8004b3c:	40000000 	.word	0x40000000
	...
 8004b48:	200007a0 	.word	0x200007a0
 8004b4c:	20000750 	.word	0x20000750

08004b50 <mpu6050_init>:
double z_G;
double roll0;
double pitch0;

void mpu6050_init() 	// Инициализация датчика
{
 8004b50:	b500      	push	{lr}
 8004b52:	b085      	sub	sp, #20
  	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADRESS <<1) + 0, 1, 100);
 8004b54:	2364      	movs	r3, #100	; 0x64
 8004b56:	2201      	movs	r2, #1
 8004b58:	21d0      	movs	r1, #208	; 0xd0
 8004b5a:	4830      	ldr	r0, [pc, #192]	; (8004c1c <mpu6050_init+0xcc>)
 8004b5c:	f001 faa4 	bl	80060a8 <HAL_I2C_IsDeviceReady>
    if (ret == HAL_OK)
 8004b60:	2800      	cmp	r0, #0
 8004b62:	d148      	bne.n	8004bf6 <mpu6050_init+0xa6>
    {
  	  connected=1;
 8004b64:	4b2e      	ldr	r3, [pc, #184]	; (8004c20 <mpu6050_init+0xd0>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	701a      	strb	r2, [r3, #0]
    else
    {
  	  connected=2;
    }

    temp_data = 0;
 8004b6a:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <mpu6050_init+0xd4>)
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	7013      	strb	r3, [r2, #0]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS <<1), REG_PWR_MGMT, 1, &temp_data, 1, 100);
 8004b70:	2364      	movs	r3, #100	; 0x64
 8004b72:	9302      	str	r3, [sp, #8]
 8004b74:	2301      	movs	r3, #1
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	9200      	str	r2, [sp, #0]
 8004b7a:	226b      	movs	r2, #107	; 0x6b
 8004b7c:	21d0      	movs	r1, #208	; 0xd0
 8004b7e:	4827      	ldr	r0, [pc, #156]	; (8004c1c <mpu6050_init+0xcc>)
 8004b80:	f001 f8e5 	bl	8005d4e <HAL_I2C_Mem_Write>
    if (ret == HAL_OK)
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d13a      	bne.n	8004bfe <mpu6050_init+0xae>
    {
  	  pwrmgmt=1;
 8004b88:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <mpu6050_init+0xd8>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	701a      	strb	r2, [r3, #0]
    else
    {
  	  pwrmgmt=2;
    }

    temp_data = FS_GYRO_250;
 8004b8e:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <mpu6050_init+0xd4>)
 8004b90:	2300      	movs	r3, #0
 8004b92:	7013      	strb	r3, [r2, #0]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS <<1), REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 8004b94:	2364      	movs	r3, #100	; 0x64
 8004b96:	9302      	str	r3, [sp, #8]
 8004b98:	2301      	movs	r3, #1
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	9200      	str	r2, [sp, #0]
 8004b9e:	221b      	movs	r2, #27
 8004ba0:	21d0      	movs	r1, #208	; 0xd0
 8004ba2:	481e      	ldr	r0, [pc, #120]	; (8004c1c <mpu6050_init+0xcc>)
 8004ba4:	f001 f8d3 	bl	8005d4e <HAL_I2C_Mem_Write>
    if (ret == HAL_OK)
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d12c      	bne.n	8004c06 <mpu6050_init+0xb6>
    {
  	  gyro=1;
 8004bac:	4b1f      	ldr	r3, [pc, #124]	; (8004c2c <mpu6050_init+0xdc>)
 8004bae:	2000      	movs	r0, #0
 8004bb0:	491f      	ldr	r1, [pc, #124]	; (8004c30 <mpu6050_init+0xe0>)
 8004bb2:	e9c3 0100 	strd	r0, r1, [r3]
    else
    {
  	  gyro=2;
    }

    temp_data = FS_ACC_2G;
 8004bb6:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <mpu6050_init+0xd4>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	7013      	strb	r3, [r2, #0]
    ret = HAL_I2C_Mem_Write(&hi2c1, (DEVICE_ADRESS <<1), REG_CONGIG_ACC, 1, &temp_data, 1, 100);
 8004bbc:	2364      	movs	r3, #100	; 0x64
 8004bbe:	9302      	str	r3, [sp, #8]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	9301      	str	r3, [sp, #4]
 8004bc4:	9200      	str	r2, [sp, #0]
 8004bc6:	221c      	movs	r2, #28
 8004bc8:	21d0      	movs	r1, #208	; 0xd0
 8004bca:	4814      	ldr	r0, [pc, #80]	; (8004c1c <mpu6050_init+0xcc>)
 8004bcc:	f001 f8bf 	bl	8005d4e <HAL_I2C_Mem_Write>
    if (ret == HAL_OK)
 8004bd0:	bb00      	cbnz	r0, 8004c14 <mpu6050_init+0xc4>
    {
  	  accel=1;
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <mpu6050_init+0xe4>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	701a      	strb	r2, [r3, #0]
    else
    {
  	  accel=2;
    }

    pitch = pitch0;
 8004bd8:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <mpu6050_init+0xe8>)
 8004bda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <mpu6050_init+0xec>)
 8004be0:	e9c3 0100 	strd	r0, r1, [r3]
    roll = roll0;
 8004be4:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <mpu6050_init+0xf0>)
 8004be6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bea:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <mpu6050_init+0xf4>)
 8004bec:	e9c3 0100 	strd	r0, r1, [r3]
}
 8004bf0:	b005      	add	sp, #20
 8004bf2:	f85d fb04 	ldr.w	pc, [sp], #4
  	  connected=2;
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <mpu6050_init+0xd0>)
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e7b5      	b.n	8004b6a <mpu6050_init+0x1a>
  	  pwrmgmt=2;
 8004bfe:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <mpu6050_init+0xd8>)
 8004c00:	2202      	movs	r2, #2
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	e7c3      	b.n	8004b8e <mpu6050_init+0x3e>
  	  gyro=2;
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <mpu6050_init+0xdc>)
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004c0e:	e9c3 0100 	strd	r0, r1, [r3]
 8004c12:	e7d0      	b.n	8004bb6 <mpu6050_init+0x66>
  	  accel=2;
 8004c14:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <mpu6050_init+0xe4>)
 8004c16:	2202      	movs	r2, #2
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e7dd      	b.n	8004bd8 <mpu6050_init+0x88>
 8004c1c:	2000083c 	.word	0x2000083c
 8004c20:	20000bcb 	.word	0x20000bcb
 8004c24:	20000c00 	.word	0x20000c00
 8004c28:	20000be8 	.word	0x20000be8
 8004c2c:	20000bd8 	.word	0x20000bd8
 8004c30:	3ff00000 	.word	0x3ff00000
 8004c34:	20000bca 	.word	0x20000bca
 8004c38:	20000be0 	.word	0x20000be0
 8004c3c:	20000b68 	.word	0x20000b68
 8004c40:	20000bf0 	.word	0x20000bf0
 8004c44:	20000b70 	.word	0x20000b70

08004c48 <mpu6050_read>:

void mpu6050_read() // Чтение сырых данных из датчика
{
 8004c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	ed2d 8b0a 	vpush	{d8-d12}
 8004c50:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS <<1) + 1, REG_ACC_DATA, 1, data, 6, 100);
 8004c52:	4dad      	ldr	r5, [pc, #692]	; (8004f08 <mpu6050_read+0x2c0>)
 8004c54:	f04f 0964 	mov.w	r9, #100	; 0x64
 8004c58:	f8cd 9008 	str.w	r9, [sp, #8]
 8004c5c:	2606      	movs	r6, #6
 8004c5e:	9601      	str	r6, [sp, #4]
 8004c60:	4caa      	ldr	r4, [pc, #680]	; (8004f0c <mpu6050_read+0x2c4>)
 8004c62:	9400      	str	r4, [sp, #0]
 8004c64:	2301      	movs	r3, #1
 8004c66:	223b      	movs	r2, #59	; 0x3b
 8004c68:	21d1      	movs	r1, #209	; 0xd1
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f001 f944 	bl	8005ef8 <HAL_I2C_Mem_Read>
	x_accRAW = (((int16_t)data[0] << 8) + data[1])-325;
 8004c70:	7822      	ldrb	r2, [r4, #0]
 8004c72:	7863      	ldrb	r3, [r4, #1]
 8004c74:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	f2a3 1345 	subw	r3, r3, #325	; 0x145
 8004c7e:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8004f50 <mpu6050_read+0x308>
 8004c82:	f8a8 3000 	strh.w	r3, [r8]
	y_accRAW = (((int16_t)data[2] << 8) + data[3])-104;
 8004c86:	78a2      	ldrb	r2, [r4, #2]
 8004c88:	78e3      	ldrb	r3, [r4, #3]
 8004c8a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	3b68      	subs	r3, #104	; 0x68
 8004c92:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8004f54 <mpu6050_read+0x30c>
 8004c96:	f8aa 3000 	strh.w	r3, [sl]
	z_accRAW = (((int16_t)data[4] << 8) + data[5])+1881;
 8004c9a:	7922      	ldrb	r2, [r4, #4]
 8004c9c:	7963      	ldrb	r3, [r4, #5]
 8004c9e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f203 7359 	addw	r3, r3, #1881	; 0x759
 8004ca8:	4f99      	ldr	r7, [pc, #612]	; (8004f10 <mpu6050_read+0x2c8>)
 8004caa:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS <<1) + 1, REG_GYRO_DATA, 1, data, 6, 100);
 8004cac:	f8cd 9008 	str.w	r9, [sp, #8]
 8004cb0:	9601      	str	r6, [sp, #4]
 8004cb2:	9400      	str	r4, [sp, #0]
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	2243      	movs	r2, #67	; 0x43
 8004cb8:	21d1      	movs	r1, #209	; 0xd1
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f001 f91c 	bl	8005ef8 <HAL_I2C_Mem_Read>
	x_gyroRAW = (((int16_t)data[0] << 8) + data[1])-53;
 8004cc0:	7823      	ldrb	r3, [r4, #0]
 8004cc2:	7866      	ldrb	r6, [r4, #1]
 8004cc4:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8004cc8:	b2b6      	uxth	r6, r6
 8004cca:	3e35      	subs	r6, #53	; 0x35
 8004ccc:	b236      	sxth	r6, r6
 8004cce:	4b91      	ldr	r3, [pc, #580]	; (8004f14 <mpu6050_read+0x2cc>)
 8004cd0:	801e      	strh	r6, [r3, #0]
	y_gyroRAW = (((int16_t)data[2] << 8) + data[3])+93;
 8004cd2:	78a3      	ldrb	r3, [r4, #2]
 8004cd4:	78e5      	ldrb	r5, [r4, #3]
 8004cd6:	eb05 2503 	add.w	r5, r5, r3, lsl #8
 8004cda:	b2ad      	uxth	r5, r5
 8004cdc:	355d      	adds	r5, #93	; 0x5d
 8004cde:	b22d      	sxth	r5, r5
 8004ce0:	4b8d      	ldr	r3, [pc, #564]	; (8004f18 <mpu6050_read+0x2d0>)
 8004ce2:	801d      	strh	r5, [r3, #0]
	z_gyroRAW = (((int16_t)data[4] << 8) + data[5])+57;
 8004ce4:	7923      	ldrb	r3, [r4, #4]
 8004ce6:	7964      	ldrb	r4, [r4, #5]
 8004ce8:	eb04 2403 	add.w	r4, r4, r3, lsl #8
 8004cec:	b2a4      	uxth	r4, r4
 8004cee:	3439      	adds	r4, #57	; 0x39
 8004cf0:	b224      	sxth	r4, r4
 8004cf2:	4b8a      	ldr	r3, [pc, #552]	; (8004f1c <mpu6050_read+0x2d4>)
 8004cf4:	801c      	strh	r4, [r3, #0]
	acc = sqrt(pow(x_accRAW,2)+pow(y_accRAW,2)+pow(z_accRAW,2));
 8004cf6:	f9b8 0000 	ldrsh.w	r0, [r8]
 8004cfa:	f7fb fc13 	bl	8000524 <__aeabi_i2d>
 8004cfe:	ec41 0b19 	vmov	d9, r0, r1
 8004d02:	ed9f 8b7b 	vldr	d8, [pc, #492]	; 8004ef0 <mpu6050_read+0x2a8>
 8004d06:	eeb0 1a48 	vmov.f32	s2, s16
 8004d0a:	eef0 1a68 	vmov.f32	s3, s17
 8004d0e:	ec41 0b10 	vmov	d0, r0, r1
 8004d12:	f005 fc89 	bl	800a628 <pow>
 8004d16:	ec59 8b10 	vmov	r8, r9, d0
 8004d1a:	f9ba 0000 	ldrsh.w	r0, [sl]
 8004d1e:	f7fb fc01 	bl	8000524 <__aeabi_i2d>
 8004d22:	4682      	mov	sl, r0
 8004d24:	468b      	mov	fp, r1
 8004d26:	eeb0 1a48 	vmov.f32	s2, s16
 8004d2a:	eef0 1a68 	vmov.f32	s3, s17
 8004d2e:	ec4b ab10 	vmov	d0, sl, fp
 8004d32:	f005 fc79 	bl	800a628 <pow>
 8004d36:	ec53 2b10 	vmov	r2, r3, d0
 8004d3a:	4640      	mov	r0, r8
 8004d3c:	4649      	mov	r1, r9
 8004d3e:	f7fb faa5 	bl	800028c <__adddf3>
 8004d42:	4680      	mov	r8, r0
 8004d44:	4689      	mov	r9, r1
 8004d46:	f9b7 0000 	ldrsh.w	r0, [r7]
 8004d4a:	f7fb fbeb 	bl	8000524 <__aeabi_i2d>
 8004d4e:	ec41 0b1b 	vmov	d11, r0, r1
 8004d52:	eeb0 1a48 	vmov.f32	s2, s16
 8004d56:	eef0 1a68 	vmov.f32	s3, s17
 8004d5a:	ec41 0b10 	vmov	d0, r0, r1
 8004d5e:	f005 fc63 	bl	800a628 <pow>
 8004d62:	ec53 2b10 	vmov	r2, r3, d0
 8004d66:	4640      	mov	r0, r8
 8004d68:	4649      	mov	r1, r9
 8004d6a:	f7fb fa8f 	bl	800028c <__adddf3>
 8004d6e:	ec41 0b10 	vmov	d0, r0, r1
 8004d72:	f005 fcc9 	bl	800a708 <sqrt>
 8004d76:	ec51 0b10 	vmov	r0, r1, d0
 8004d7a:	f7fb feed 	bl	8000b58 <__aeabi_d2iz>
 8004d7e:	fa0f f880 	sxth.w	r8, r0
 8004d82:	4b67      	ldr	r3, [pc, #412]	; (8004f20 <mpu6050_read+0x2d8>)
 8004d84:	f8a3 8000 	strh.w	r8, [r3]
	gyro = sqrt(pow(x_gyroRAW,2)+pow(y_gyroRAW,2)+pow(z_gyroRAW,2));
 8004d88:	4630      	mov	r0, r6
 8004d8a:	f7fb fbcb 	bl	8000524 <__aeabi_i2d>
 8004d8e:	ec41 0b1c 	vmov	d12, r0, r1
 8004d92:	eeb0 1a48 	vmov.f32	s2, s16
 8004d96:	eef0 1a68 	vmov.f32	s3, s17
 8004d9a:	ec41 0b10 	vmov	d0, r0, r1
 8004d9e:	f005 fc43 	bl	800a628 <pow>
 8004da2:	ec57 6b10 	vmov	r6, r7, d0
 8004da6:	4628      	mov	r0, r5
 8004da8:	f7fb fbbc 	bl	8000524 <__aeabi_i2d>
 8004dac:	ec41 0b1a 	vmov	d10, r0, r1
 8004db0:	eeb0 1a48 	vmov.f32	s2, s16
 8004db4:	eef0 1a68 	vmov.f32	s3, s17
 8004db8:	ec41 0b10 	vmov	d0, r0, r1
 8004dbc:	f005 fc34 	bl	800a628 <pow>
 8004dc0:	ec53 2b10 	vmov	r2, r3, d0
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	4639      	mov	r1, r7
 8004dc8:	f7fb fa60 	bl	800028c <__adddf3>
 8004dcc:	4606      	mov	r6, r0
 8004dce:	460f      	mov	r7, r1
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f7fb fba7 	bl	8000524 <__aeabi_i2d>
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	460d      	mov	r5, r1
 8004dda:	eeb0 1a48 	vmov.f32	s2, s16
 8004dde:	eef0 1a68 	vmov.f32	s3, s17
 8004de2:	ec45 4b10 	vmov	d0, r4, r5
 8004de6:	f005 fc1f 	bl	800a628 <pow>
 8004dea:	ec53 2b10 	vmov	r2, r3, d0
 8004dee:	4630      	mov	r0, r6
 8004df0:	4639      	mov	r1, r7
 8004df2:	f7fb fa4b 	bl	800028c <__adddf3>
 8004df6:	ec41 0b10 	vmov	d0, r0, r1
 8004dfa:	f005 fc85 	bl	800a708 <sqrt>
 8004dfe:	ec57 6b10 	vmov	r6, r7, d0
 8004e02:	4b48      	ldr	r3, [pc, #288]	; (8004f24 <mpu6050_read+0x2dc>)
 8004e04:	ed83 0b00 	vstr	d0, [r3]
	x_G = x_accRAW/16384.0;
 8004e08:	2200      	movs	r2, #0
 8004e0a:	4b47      	ldr	r3, [pc, #284]	; (8004f28 <mpu6050_read+0x2e0>)
 8004e0c:	ec51 0b19 	vmov	r0, r1, d9
 8004e10:	f7fb fbf2 	bl	80005f8 <__aeabi_dmul>
 8004e14:	4b45      	ldr	r3, [pc, #276]	; (8004f2c <mpu6050_read+0x2e4>)
 8004e16:	e9c3 0100 	strd	r0, r1, [r3]
	y_G = y_accRAW/16384.0;
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	4b42      	ldr	r3, [pc, #264]	; (8004f28 <mpu6050_read+0x2e0>)
 8004e1e:	4650      	mov	r0, sl
 8004e20:	4659      	mov	r1, fp
 8004e22:	f7fb fbe9 	bl	80005f8 <__aeabi_dmul>
 8004e26:	4b42      	ldr	r3, [pc, #264]	; (8004f30 <mpu6050_read+0x2e8>)
 8004e28:	e9c3 0100 	strd	r0, r1, [r3]
	z_G = z_accRAW/16384.0;
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4b3e      	ldr	r3, [pc, #248]	; (8004f28 <mpu6050_read+0x2e0>)
 8004e30:	ec51 0b1b 	vmov	r0, r1, d11
 8004e34:	f7fb fbe0 	bl	80005f8 <__aeabi_dmul>
 8004e38:	4b3e      	ldr	r3, [pc, #248]	; (8004f34 <mpu6050_read+0x2ec>)
 8004e3a:	e9c3 0100 	strd	r0, r1, [r3]
	total_G = acc/16384.0;
 8004e3e:	4640      	mov	r0, r8
 8004e40:	f7fb fb70 	bl	8000524 <__aeabi_i2d>
 8004e44:	2200      	movs	r2, #0
 8004e46:	4b38      	ldr	r3, [pc, #224]	; (8004f28 <mpu6050_read+0x2e0>)
 8004e48:	f7fb fbd6 	bl	80005f8 <__aeabi_dmul>
 8004e4c:	4b3a      	ldr	r3, [pc, #232]	; (8004f38 <mpu6050_read+0x2f0>)
 8004e4e:	e9c3 0100 	strd	r0, r1, [r3]
	x_gyro = x_gyroRAW/131.0 * M_PI/180;
 8004e52:	a329      	add	r3, pc, #164	; (adr r3, 8004ef8 <mpu6050_read+0x2b0>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	ec51 0b1c 	vmov	r0, r1, d12
 8004e5c:	f7fb fcf6 	bl	800084c <__aeabi_ddiv>
 8004e60:	a327      	add	r3, pc, #156	; (adr r3, 8004f00 <mpu6050_read+0x2b8>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb fbc7 	bl	80005f8 <__aeabi_dmul>
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	4b33      	ldr	r3, [pc, #204]	; (8004f3c <mpu6050_read+0x2f4>)
 8004e6e:	f7fb fced 	bl	800084c <__aeabi_ddiv>
 8004e72:	4b33      	ldr	r3, [pc, #204]	; (8004f40 <mpu6050_read+0x2f8>)
 8004e74:	e9c3 0100 	strd	r0, r1, [r3]
	y_gyro = y_gyroRAW/131.0 * M_PI/180;
 8004e78:	a31f      	add	r3, pc, #124	; (adr r3, 8004ef8 <mpu6050_read+0x2b0>)
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	ec51 0b1a 	vmov	r0, r1, d10
 8004e82:	f7fb fce3 	bl	800084c <__aeabi_ddiv>
 8004e86:	a31e      	add	r3, pc, #120	; (adr r3, 8004f00 <mpu6050_read+0x2b8>)
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f7fb fbb4 	bl	80005f8 <__aeabi_dmul>
 8004e90:	2200      	movs	r2, #0
 8004e92:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <mpu6050_read+0x2f4>)
 8004e94:	f7fb fcda 	bl	800084c <__aeabi_ddiv>
 8004e98:	4b2a      	ldr	r3, [pc, #168]	; (8004f44 <mpu6050_read+0x2fc>)
 8004e9a:	e9c3 0100 	strd	r0, r1, [r3]
	z_gyro = z_gyroRAW/131.0 * M_PI/180;
 8004e9e:	a316      	add	r3, pc, #88	; (adr r3, 8004ef8 <mpu6050_read+0x2b0>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	f7fb fcd0 	bl	800084c <__aeabi_ddiv>
 8004eac:	a314      	add	r3, pc, #80	; (adr r3, 8004f00 <mpu6050_read+0x2b8>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	f7fb fba1 	bl	80005f8 <__aeabi_dmul>
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <mpu6050_read+0x2f4>)
 8004eba:	f7fb fcc7 	bl	800084c <__aeabi_ddiv>
 8004ebe:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <mpu6050_read+0x300>)
 8004ec0:	e9c3 0100 	strd	r0, r1, [r3]
	rotation = gyro/131.0;
 8004ec4:	a30c      	add	r3, pc, #48	; (adr r3, 8004ef8 <mpu6050_read+0x2b0>)
 8004ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eca:	4630      	mov	r0, r6
 8004ecc:	4639      	mov	r1, r7
 8004ece:	f7fb fcbd 	bl	800084c <__aeabi_ddiv>
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <mpu6050_read+0x304>)
 8004ed4:	e9c3 0100 	strd	r0, r1, [r3]

	getKalmanA(); // Фильтрация полученных значений ускорений с помощью фильтра Калмана
 8004ed8:	f7fd fcdc 	bl	8002894 <getKalmanA>
	getKalmanOMEGA(); // Фильтрация полученных значений угловых скоростей с помощью фильтра Калмана
 8004edc:	f7fd fd42 	bl	8002964 <getKalmanOMEGA>
}
 8004ee0:	b005      	add	sp, #20
 8004ee2:	ecbd 8b0a 	vpop	{d8-d12}
 8004ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w
 8004ef0:	00000000 	.word	0x00000000
 8004ef4:	40000000 	.word	0x40000000
 8004ef8:	00000000 	.word	0x00000000
 8004efc:	40606000 	.word	0x40606000
 8004f00:	54442d18 	.word	0x54442d18
 8004f04:	400921fb 	.word	0x400921fb
 8004f08:	2000083c 	.word	0x2000083c
 8004f0c:	20000bcc 	.word	0x20000bcc
 8004f10:	20000c60 	.word	0x20000c60
 8004f14:	20000c20 	.word	0x20000c20
 8004f18:	20000c48 	.word	0x20000c48
 8004f1c:	20000c70 	.word	0x20000c70
 8004f20:	20000bc8 	.word	0x20000bc8
 8004f24:	20000bd8 	.word	0x20000bd8
 8004f28:	3f100000 	.word	0x3f100000
 8004f2c:	20000c08 	.word	0x20000c08
 8004f30:	20000c30 	.word	0x20000c30
 8004f34:	20000c58 	.word	0x20000c58
 8004f38:	20000b80 	.word	0x20000b80
 8004f3c:	40668000 	.word	0x40668000
 8004f40:	20000c18 	.word	0x20000c18
 8004f44:	20000c40 	.word	0x20000c40
 8004f48:	20000c68 	.word	0x20000c68
 8004f4c:	20000bf8 	.word	0x20000bf8
 8004f50:	20000c10 	.word	0x20000c10
 8004f54:	20000c38 	.word	0x20000c38

08004f58 <ms4525_init>:
uint8_t data2[4];
int conms4525;
float diff_press_PSI, p_rawF, pressDnew, pressDiff, pressDiffstar, pressDifferential;

void ms4525_init() // Инициализация датчика
{
 8004f58:	b508      	push	{r3, lr}
	HAL_StatusTypeDef ret1 = HAL_I2C_IsDeviceReady(&hi2c1, (DEVICE_ADRESS2 <<1) + 0, 100, 100);
 8004f5a:	2364      	movs	r3, #100	; 0x64
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2150      	movs	r1, #80	; 0x50
 8004f60:	4805      	ldr	r0, [pc, #20]	; (8004f78 <ms4525_init+0x20>)
 8004f62:	f001 f8a1 	bl	80060a8 <HAL_I2C_IsDeviceReady>
	if (ret1 == HAL_OK)
 8004f66:	b918      	cbnz	r0, 8004f70 <ms4525_init+0x18>
	{
	conms4525=1;
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <ms4525_init+0x24>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
	conms4525=2;
	}
}
 8004f6e:	bd08      	pop	{r3, pc}
	conms4525=2;
 8004f70:	4b02      	ldr	r3, [pc, #8]	; (8004f7c <ms4525_init+0x24>)
 8004f72:	2202      	movs	r2, #2
 8004f74:	601a      	str	r2, [r3, #0]
}
 8004f76:	e7fa      	b.n	8004f6e <ms4525_init+0x16>
 8004f78:	2000083c 	.word	0x2000083c
 8004f7c:	20000c80 	.word	0x20000c80

08004f80 <ms4525_read>:

void ms4525_read() // Чтение данных с датчика и вычисление скорости набегающего потока
{
 8004f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f82:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&hi2c1, (DEVICE_ADRESS2 <<1) + 1, READ_ADRESS2, 1, data2, 4, 100);
 8004f84:	2364      	movs	r3, #100	; 0x64
 8004f86:	9302      	str	r3, [sp, #8]
 8004f88:	2304      	movs	r3, #4
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	4f5c      	ldr	r7, [pc, #368]	; (8005100 <ms4525_read+0x180>)
 8004f8e:	9700      	str	r7, [sp, #0]
 8004f90:	2301      	movs	r3, #1
 8004f92:	2200      	movs	r2, #0
 8004f94:	2151      	movs	r1, #81	; 0x51
 8004f96:	485b      	ldr	r0, [pc, #364]	; (8005104 <ms4525_read+0x184>)
 8004f98:	f000 ffae 	bl	8005ef8 <HAL_I2C_Mem_Read>
	p_raw = (((int16_t)data2[0] << 8) + data2[1]);
 8004f9c:	783b      	ldrb	r3, [r7, #0]
 8004f9e:	787e      	ldrb	r6, [r7, #1]
 8004fa0:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8004fa4:	b236      	sxth	r6, r6
 8004fa6:	4b58      	ldr	r3, [pc, #352]	; (8005108 <ms4525_read+0x188>)
 8004fa8:	801e      	strh	r6, [r3, #0]
	p_raw = 0x3FFF & p_raw;
 8004faa:	f3c6 060d 	ubfx	r6, r6, #0, #14
 8004fae:	801e      	strh	r6, [r3, #0]
	p_rawF = p_raw + 6.71;
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f7fb fab7 	bl	8000524 <__aeabi_i2d>
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	460d      	mov	r5, r1
 8004fba:	a341      	add	r3, pc, #260	; (adr r3, 80050c0 <ms4525_read+0x140>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f7fb f964 	bl	800028c <__adddf3>
 8004fc4:	f7fb fe10 	bl	8000be8 <__aeabi_d2f>
 8004fc8:	4b50      	ldr	r3, [pc, #320]	; (800510c <ms4525_read+0x18c>)
 8004fca:	6018      	str	r0, [r3, #0]
	t_raw = (((int16_t)data2[2] << 8) + data2[3]);
 8004fcc:	78ba      	ldrb	r2, [r7, #2]
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004fd4:	b21b      	sxth	r3, r3
 8004fd6:	4a4e      	ldr	r2, [pc, #312]	; (8005110 <ms4525_read+0x190>)
 8004fd8:	8013      	strh	r3, [r2, #0]
	t_raw = (0xFFE0 & t_raw) >> 5;
 8004fda:	f3c3 134a 	ubfx	r3, r3, #5, #11
 8004fde:	8013      	strh	r3, [r2, #0]

	tempC  = ((200.0f * t_raw) / 2047) - 50;
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fe8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8005114 <ms4525_read+0x194>
 8004fec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ff0:	eddf 6a49 	vldr	s13, [pc, #292]	; 8005118 <ms4525_read+0x198>
 8004ff4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004ff8:	eddf 7a48 	vldr	s15, [pc, #288]	; 800511c <ms4525_read+0x19c>
 8004ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005000:	4b47      	ldr	r3, [pc, #284]	; (8005120 <ms4525_read+0x1a0>)
 8005002:	edc3 7a00 	vstr	s15, [r3]

	float density = 1.16; // Плотность воздуха

	pressDiffstar = (8192-p_raw)*1.02095;
 8005006:	f5c6 5000 	rsb	r0, r6, #8192	; 0x2000
 800500a:	f7fb fa8b 	bl	8000524 <__aeabi_i2d>
 800500e:	a32e      	add	r3, pc, #184	; (adr r3, 80050c8 <ms4525_read+0x148>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f7fb faf0 	bl	80005f8 <__aeabi_dmul>
 8005018:	f7fb fde6 	bl	8000be8 <__aeabi_d2f>
 800501c:	4b41      	ldr	r3, [pc, #260]	; (8005124 <ms4525_read+0x1a4>)
 800501e:	6018      	str	r0, [r3, #0]
	pressDiff = -0.5383*pow(p_raw,2)-0.4737*(p_raw)+8183.6;
 8005020:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 80050d0 <ms4525_read+0x150>
 8005024:	ec45 4b10 	vmov	d0, r4, r5
 8005028:	f005 fafe 	bl	800a628 <pow>
 800502c:	ec51 0b10 	vmov	r0, r1, d0
 8005030:	a329      	add	r3, pc, #164	; (adr r3, 80050d8 <ms4525_read+0x158>)
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f7fb fadf 	bl	80005f8 <__aeabi_dmul>
 800503a:	4606      	mov	r6, r0
 800503c:	460f      	mov	r7, r1
 800503e:	a328      	add	r3, pc, #160	; (adr r3, 80050e0 <ms4525_read+0x160>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	4620      	mov	r0, r4
 8005046:	4629      	mov	r1, r5
 8005048:	f7fb fad6 	bl	80005f8 <__aeabi_dmul>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4630      	mov	r0, r6
 8005052:	4639      	mov	r1, r7
 8005054:	f7fb f918 	bl	8000288 <__aeabi_dsub>
 8005058:	a323      	add	r3, pc, #140	; (adr r3, 80050e8 <ms4525_read+0x168>)
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f7fb f915 	bl	800028c <__adddf3>
 8005062:	f7fb fdc1 	bl	8000be8 <__aeabi_d2f>
 8005066:	4b30      	ldr	r3, [pc, #192]	; (8005128 <ms4525_read+0x1a8>)
 8005068:	6018      	str	r0, [r3, #0]
	pressDifferential = (-1.1087*p_raw) + 9070.5;
 800506a:	a321      	add	r3, pc, #132	; (adr r3, 80050f0 <ms4525_read+0x170>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	4620      	mov	r0, r4
 8005072:	4629      	mov	r1, r5
 8005074:	f7fb fac0 	bl	80005f8 <__aeabi_dmul>
 8005078:	a31f      	add	r3, pc, #124	; (adr r3, 80050f8 <ms4525_read+0x178>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb f905 	bl	800028c <__adddf3>
 8005082:	f7fb fdb1 	bl	8000be8 <__aeabi_d2f>
 8005086:	ee00 0a10 	vmov	s0, r0
 800508a:	4b28      	ldr	r3, [pc, #160]	; (800512c <ms4525_read+0x1ac>)
 800508c:	6018      	str	r0, [r3, #0]

    if (pressDifferential > 0) // Вычисление скорости набегающего потока
 800508e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005096:	dc04      	bgt.n	80050a2 <ms4525_read+0x122>
    {
    	Vair = (sqrtf(2*pressDifferential/density));
    }
    else
    {
        Vair = 0;
 8005098:	4b25      	ldr	r3, [pc, #148]	; (8005130 <ms4525_read+0x1b0>)
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
    }
}
 800509e:	b005      	add	sp, #20
 80050a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	Vair = (sqrtf(2*pressDifferential/density));
 80050a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80050a6:	eddf 7a23 	vldr	s15, [pc, #140]	; 8005134 <ms4525_read+0x1b4>
 80050aa:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80050ae:	f005 fc0f 	bl	800a8d0 <sqrtf>
 80050b2:	4b1f      	ldr	r3, [pc, #124]	; (8005130 <ms4525_read+0x1b0>)
 80050b4:	ed83 0a00 	vstr	s0, [r3]
 80050b8:	e7f1      	b.n	800509e <ms4525_read+0x11e>
 80050ba:	bf00      	nop
 80050bc:	f3af 8000 	nop.w
 80050c0:	3d70a3d7 	.word	0x3d70a3d7
 80050c4:	401ad70a 	.word	0x401ad70a
 80050c8:	aacd9e84 	.word	0xaacd9e84
 80050cc:	3ff055cf 	.word	0x3ff055cf
 80050d0:	00000000 	.word	0x00000000
 80050d4:	40000000 	.word	0x40000000
 80050d8:	ebedfa44 	.word	0xebedfa44
 80050dc:	bfe139c0 	.word	0xbfe139c0
 80050e0:	ce075f70 	.word	0xce075f70
 80050e4:	3fde5119 	.word	0x3fde5119
 80050e8:	9999999a 	.word	0x9999999a
 80050ec:	40bff799 	.word	0x40bff799
 80050f0:	36113405 	.word	0x36113405
 80050f4:	bff1bd3c 	.word	0xbff1bd3c
 80050f8:	00000000 	.word	0x00000000
 80050fc:	40c1b740 	.word	0x40c1b740
 8005100:	20000c84 	.word	0x20000c84
 8005104:	2000083c 	.word	0x2000083c
 8005108:	20000c88 	.word	0x20000c88
 800510c:	20000c8c 	.word	0x20000c8c
 8005110:	20000c9c 	.word	0x20000c9c
 8005114:	43480000 	.word	0x43480000
 8005118:	44ffe000 	.word	0x44ffe000
 800511c:	42480000 	.word	0x42480000
 8005120:	20000ca0 	.word	0x20000ca0
 8005124:	20000c98 	.word	0x20000c98
 8005128:	20000c90 	.word	0x20000c90
 800512c:	20000c94 	.word	0x20000c94
 8005130:	20000748 	.word	0x20000748
 8005134:	3f947ae1 	.word	0x3f947ae1

08005138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005138:	b500      	push	{lr}
 800513a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800513c:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <HAL_MspInit+0x38>)
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	619a      	str	r2, [r3, #24]
 8005146:	699a      	ldr	r2, [r3, #24]
 8005148:	f002 0201 	and.w	r2, r2, #1
 800514c:	9200      	str	r2, [sp, #0]
 800514e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005150:	69da      	ldr	r2, [r3, #28]
 8005152:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005156:	61da      	str	r2, [r3, #28]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005162:	2007      	movs	r0, #7
 8005164:	f000 fa8c 	bl	8005680 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005168:	b003      	add	sp, #12
 800516a:	f85d fb04 	ldr.w	pc, [sp], #4
 800516e:	bf00      	nop
 8005170:	40021000 	.word	0x40021000

08005174 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005174:	b510      	push	{r4, lr}
 8005176:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005178:	2300      	movs	r3, #0
 800517a:	9305      	str	r3, [sp, #20]
 800517c:	9306      	str	r3, [sp, #24]
 800517e:	9307      	str	r3, [sp, #28]
 8005180:	9308      	str	r3, [sp, #32]
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8005184:	6803      	ldr	r3, [r0, #0]
 8005186:	4a24      	ldr	r2, [pc, #144]	; (8005218 <HAL_I2C_MspInit+0xa4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_I2C_MspInit+0x22>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 800518c:	4a23      	ldr	r2, [pc, #140]	; (800521c <HAL_I2C_MspInit+0xa8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d022      	beq.n	80051d8 <HAL_I2C_MspInit+0x64>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005192:	b00a      	add	sp, #40	; 0x28
 8005194:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005196:	4c22      	ldr	r4, [pc, #136]	; (8005220 <HAL_I2C_MspInit+0xac>)
 8005198:	6963      	ldr	r3, [r4, #20]
 800519a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800519e:	6163      	str	r3, [r4, #20]
 80051a0:	6963      	ldr	r3, [r4, #20]
 80051a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80051aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80051ae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051b0:	2312      	movs	r3, #18
 80051b2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051b4:	2303      	movs	r3, #3
 80051b6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80051b8:	2304      	movs	r3, #4
 80051ba:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051bc:	a905      	add	r1, sp, #20
 80051be:	4819      	ldr	r0, [pc, #100]	; (8005224 <HAL_I2C_MspInit+0xb0>)
 80051c0:	f000 fabc 	bl	800573c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051c4:	69e3      	ldr	r3, [r4, #28]
 80051c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051ca:	61e3      	str	r3, [r4, #28]
 80051cc:	69e3      	ldr	r3, [r4, #28]
 80051ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d2:	9302      	str	r3, [sp, #8]
 80051d4:	9b02      	ldr	r3, [sp, #8]
 80051d6:	e7dc      	b.n	8005192 <HAL_I2C_MspInit+0x1e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80051d8:	4c11      	ldr	r4, [pc, #68]	; (8005220 <HAL_I2C_MspInit+0xac>)
 80051da:	6963      	ldr	r3, [r4, #20]
 80051dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051e0:	6163      	str	r3, [r4, #20]
 80051e2:	6963      	ldr	r3, [r4, #20]
 80051e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e8:	9303      	str	r3, [sp, #12]
 80051ea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80051ec:	2303      	movs	r3, #3
 80051ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051f0:	2212      	movs	r2, #18
 80051f2:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80051f4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80051f6:	2304      	movs	r3, #4
 80051f8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051fa:	a905      	add	r1, sp, #20
 80051fc:	480a      	ldr	r0, [pc, #40]	; (8005228 <HAL_I2C_MspInit+0xb4>)
 80051fe:	f000 fa9d 	bl	800573c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005202:	69e3      	ldr	r3, [r4, #28]
 8005204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005208:	61e3      	str	r3, [r4, #28]
 800520a:	69e3      	ldr	r3, [r4, #28]
 800520c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	9b04      	ldr	r3, [sp, #16]
}
 8005214:	e7bd      	b.n	8005192 <HAL_I2C_MspInit+0x1e>
 8005216:	bf00      	nop
 8005218:	40005400 	.word	0x40005400
 800521c:	40005800 	.word	0x40005800
 8005220:	40021000 	.word	0x40021000
 8005224:	48000400 	.word	0x48000400
 8005228:	48001400 	.word	0x48001400

0800522c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800522c:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 800522e:	6803      	ldr	r3, [r0, #0]
 8005230:	4a0f      	ldr	r2, [pc, #60]	; (8005270 <HAL_TIM_PWM_MspInit+0x44>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d004      	beq.n	8005240 <HAL_TIM_PWM_MspInit+0x14>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_pwm->Instance==TIM2)
 8005236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523a:	d00c      	beq.n	8005256 <HAL_TIM_PWM_MspInit+0x2a>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800523c:	b002      	add	sp, #8
 800523e:	4770      	bx	lr
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005240:	4b0c      	ldr	r3, [pc, #48]	; (8005274 <HAL_TIM_PWM_MspInit+0x48>)
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005248:	619a      	str	r2, [r3, #24]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	e7f2      	b.n	800523c <HAL_TIM_PWM_MspInit+0x10>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005256:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	f042 0201 	orr.w	r2, r2, #1
 8005260:	61da      	str	r2, [r3, #28]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	f003 0301 	and.w	r3, r3, #1
 8005268:	9301      	str	r3, [sp, #4]
 800526a:	9b01      	ldr	r3, [sp, #4]
}
 800526c:	e7e6      	b.n	800523c <HAL_TIM_PWM_MspInit+0x10>
 800526e:	bf00      	nop
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40021000 	.word	0x40021000

08005278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005278:	b500      	push	{lr}
 800527a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527c:	2300      	movs	r3, #0
 800527e:	9303      	str	r3, [sp, #12]
 8005280:	9304      	str	r3, [sp, #16]
 8005282:	9305      	str	r3, [sp, #20]
 8005284:	9306      	str	r3, [sp, #24]
 8005286:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 8005288:	6803      	ldr	r3, [r0, #0]
 800528a:	4a1a      	ldr	r2, [pc, #104]	; (80052f4 <HAL_TIM_MspPostInit+0x7c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d005      	beq.n	800529c <HAL_TIM_MspPostInit+0x24>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM2)
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d017      	beq.n	80052c6 <HAL_TIM_MspPostInit+0x4e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005296:	b009      	add	sp, #36	; 0x24
 8005298:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800529c:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <HAL_TIM_MspPostInit+0x80>)
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80052a4:	615a      	str	r2, [r3, #20]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052ac:	9301      	str	r3, [sp, #4]
 80052ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80052b0:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80052b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b6:	2302      	movs	r3, #2
 80052b8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80052ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80052bc:	a903      	add	r1, sp, #12
 80052be:	480f      	ldr	r0, [pc, #60]	; (80052fc <HAL_TIM_MspPostInit+0x84>)
 80052c0:	f000 fa3c 	bl	800573c <HAL_GPIO_Init>
 80052c4:	e7e7      	b.n	8005296 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052c6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80052d0:	615a      	str	r2, [r3, #20]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d8:	9302      	str	r3, [sp, #8]
 80052da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80052dc:	2303      	movs	r3, #3
 80052de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e0:	2302      	movs	r3, #2
 80052e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80052e4:	2301      	movs	r3, #1
 80052e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e8:	a903      	add	r1, sp, #12
 80052ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80052ee:	f000 fa25 	bl	800573c <HAL_GPIO_Init>
}
 80052f2:	e7d0      	b.n	8005296 <HAL_TIM_MspPostInit+0x1e>
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40021000 	.word	0x40021000
 80052fc:	48001000 	.word	0x48001000

08005300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005304:	2300      	movs	r3, #0
 8005306:	9309      	str	r3, [sp, #36]	; 0x24
 8005308:	930a      	str	r3, [sp, #40]	; 0x28
 800530a:	930b      	str	r3, [sp, #44]	; 0x2c
 800530c:	930c      	str	r3, [sp, #48]	; 0x30
 800530e:	930d      	str	r3, [sp, #52]	; 0x34
  if(huart->Instance==USART1)
 8005310:	6803      	ldr	r3, [r0, #0]
 8005312:	4a4b      	ldr	r2, [pc, #300]	; (8005440 <HAL_UART_MspInit+0x140>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d007      	beq.n	8005328 <HAL_UART_MspInit+0x28>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8005318:	4a4a      	ldr	r2, [pc, #296]	; (8005444 <HAL_UART_MspInit+0x144>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d024      	beq.n	8005368 <HAL_UART_MspInit+0x68>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800531e:	4a4a      	ldr	r2, [pc, #296]	; (8005448 <HAL_UART_MspInit+0x148>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d056      	beq.n	80053d2 <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005324:	b00e      	add	sp, #56	; 0x38
 8005326:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8005328:	4b48      	ldr	r3, [pc, #288]	; (800544c <HAL_UART_MspInit+0x14c>)
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005330:	619a      	str	r2, [r3, #24]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005338:	9201      	str	r2, [sp, #4]
 800533a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005342:	615a      	str	r2, [r3, #20]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800534a:	9302      	str	r3, [sp, #8]
 800534c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800534e:	2330      	movs	r3, #48	; 0x30
 8005350:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005352:	2302      	movs	r3, #2
 8005354:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005356:	2303      	movs	r3, #3
 8005358:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800535a:	2307      	movs	r3, #7
 800535c:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800535e:	a909      	add	r1, sp, #36	; 0x24
 8005360:	483b      	ldr	r0, [pc, #236]	; (8005450 <HAL_UART_MspInit+0x150>)
 8005362:	f000 f9eb 	bl	800573c <HAL_GPIO_Init>
 8005366:	e7dd      	b.n	8005324 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005368:	4b38      	ldr	r3, [pc, #224]	; (800544c <HAL_UART_MspInit+0x14c>)
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005370:	61da      	str	r2, [r3, #28]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005378:	9203      	str	r2, [sp, #12]
 800537a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005382:	615a      	str	r2, [r3, #20]
 8005384:	695a      	ldr	r2, [r3, #20]
 8005386:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800538a:	9204      	str	r2, [sp, #16]
 800538c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800538e:	695a      	ldr	r2, [r3, #20]
 8005390:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005394:	615a      	str	r2, [r3, #20]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800539c:	9305      	str	r3, [sp, #20]
 800539e:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80053a0:	2308      	movs	r3, #8
 80053a2:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a4:	2602      	movs	r6, #2
 80053a6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053a8:	2503      	movs	r5, #3
 80053aa:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053ac:	2407      	movs	r4, #7
 80053ae:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b0:	a909      	add	r1, sp, #36	; 0x24
 80053b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053b6:	f000 f9c1 	bl	800573c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80053ba:	2320      	movs	r3, #32
 80053bc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053be:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053c4:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053c6:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053c8:	a909      	add	r1, sp, #36	; 0x24
 80053ca:	4822      	ldr	r0, [pc, #136]	; (8005454 <HAL_UART_MspInit+0x154>)
 80053cc:	f000 f9b6 	bl	800573c <HAL_GPIO_Init>
 80053d0:	e7a8      	b.n	8005324 <HAL_UART_MspInit+0x24>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053d2:	4b1e      	ldr	r3, [pc, #120]	; (800544c <HAL_UART_MspInit+0x14c>)
 80053d4:	69da      	ldr	r2, [r3, #28]
 80053d6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053da:	61da      	str	r2, [r3, #28]
 80053dc:	69da      	ldr	r2, [r3, #28]
 80053de:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80053e2:	9206      	str	r2, [sp, #24]
 80053e4:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80053e6:	695a      	ldr	r2, [r3, #20]
 80053e8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80053ec:	615a      	str	r2, [r3, #20]
 80053ee:	695a      	ldr	r2, [r3, #20]
 80053f0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80053f4:	9207      	str	r2, [sp, #28]
 80053f6:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053f8:	695a      	ldr	r2, [r3, #20]
 80053fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053fe:	615a      	str	r2, [r3, #20]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005406:	9308      	str	r3, [sp, #32]
 8005408:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800540a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005410:	2602      	movs	r6, #2
 8005412:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005414:	2503      	movs	r5, #3
 8005416:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005418:	2407      	movs	r4, #7
 800541a:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800541c:	a909      	add	r1, sp, #36	; 0x24
 800541e:	480e      	ldr	r0, [pc, #56]	; (8005458 <HAL_UART_MspInit+0x158>)
 8005420:	f000 f98c 	bl	800573c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005428:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542c:	2300      	movs	r3, #0
 800542e:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005430:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005432:	940d      	str	r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005434:	a909      	add	r1, sp, #36	; 0x24
 8005436:	4809      	ldr	r0, [pc, #36]	; (800545c <HAL_UART_MspInit+0x15c>)
 8005438:	f000 f980 	bl	800573c <HAL_GPIO_Init>
}
 800543c:	e772      	b.n	8005324 <HAL_UART_MspInit+0x24>
 800543e:	bf00      	nop
 8005440:	40013800 	.word	0x40013800
 8005444:	40004400 	.word	0x40004400
 8005448:	40004800 	.word	0x40004800
 800544c:	40021000 	.word	0x40021000
 8005450:	48000800 	.word	0x48000800
 8005454:	48000c00 	.word	0x48000c00
 8005458:	48001000 	.word	0x48001000
 800545c:	48000400 	.word	0x48000400

08005460 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005460:	e7fe      	b.n	8005460 <NMI_Handler>

08005462 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005462:	e7fe      	b.n	8005462 <HardFault_Handler>

08005464 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005464:	e7fe      	b.n	8005464 <MemManage_Handler>

08005466 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005466:	e7fe      	b.n	8005466 <BusFault_Handler>

08005468 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005468:	e7fe      	b.n	8005468 <UsageFault_Handler>

0800546a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800546a:	4770      	bx	lr

0800546c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800546c:	4770      	bx	lr

0800546e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800546e:	4770      	bx	lr

08005470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005470:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

	if(timeout >0)  timeout--;
 8005472:	4b04      	ldr	r3, [pc, #16]	; (8005484 <SysTick_Handler+0x14>)
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b113      	cbz	r3, 800547e <SysTick_Handler+0xe>
 8005478:	3b01      	subs	r3, #1
 800547a:	4a02      	ldr	r2, [pc, #8]	; (8005484 <SysTick_Handler+0x14>)
 800547c:	8013      	strh	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800547e:	f000 f8d9 	bl	8005634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005482:	bd08      	pop	{r3, pc}
 8005484:	2000032c 	.word	0x2000032c

08005488 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005488:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  Uart_isr (&huart1);
 800548a:	4802      	ldr	r0, [pc, #8]	; (8005494 <USART1_IRQHandler+0xc>)
 800548c:	f7fc f916 	bl	80016bc <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005490:	bd08      	pop	{r3, pc}
 8005492:	bf00      	nop
 8005494:	2000097c 	.word	0x2000097c

08005498 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8005498:	2001      	movs	r0, #1
 800549a:	4770      	bx	lr

0800549c <_kill>:

int _kill(int pid, int sig)
{
 800549c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800549e:	f003 f95f 	bl	8008760 <__errno>
 80054a2:	2316      	movs	r3, #22
 80054a4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295
 80054aa:	bd08      	pop	{r3, pc}

080054ac <_exit>:

void _exit (int status)
{
 80054ac:	b508      	push	{r3, lr}
  _kill(status, -1);
 80054ae:	f04f 31ff 	mov.w	r1, #4294967295
 80054b2:	f7ff fff3 	bl	800549c <_kill>
  while (1) {}    /* Make sure we hang here */
 80054b6:	e7fe      	b.n	80054b6 <_exit+0xa>

080054b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	460c      	mov	r4, r1
 80054bc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054be:	2500      	movs	r5, #0
 80054c0:	e006      	b.n	80054d0 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80054c2:	f3af 8000 	nop.w
 80054c6:	4621      	mov	r1, r4
 80054c8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054cc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80054ce:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d0:	42b5      	cmp	r5, r6
 80054d2:	dbf6      	blt.n	80054c2 <_read+0xa>
  }

  return len;
}
 80054d4:	4630      	mov	r0, r6
 80054d6:	bd70      	pop	{r4, r5, r6, pc}

080054d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	460c      	mov	r4, r1
 80054dc:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054de:	2500      	movs	r5, #0
 80054e0:	e004      	b.n	80054ec <_write+0x14>
  {
    __io_putchar(*ptr++);
 80054e2:	f814 0b01 	ldrb.w	r0, [r4], #1
 80054e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ea:	3501      	adds	r5, #1
 80054ec:	42b5      	cmp	r5, r6
 80054ee:	dbf8      	blt.n	80054e2 <_write+0xa>
  }
  return len;
}
 80054f0:	4630      	mov	r0, r6
 80054f2:	bd70      	pop	{r4, r5, r6, pc}

080054f4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	4770      	bx	lr

080054fa <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80054fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054fe:	604b      	str	r3, [r1, #4]
  return 0;
}
 8005500:	2000      	movs	r0, #0
 8005502:	4770      	bx	lr

08005504 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005504:	2001      	movs	r0, #1
 8005506:	4770      	bx	lr

08005508 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005508:	2000      	movs	r0, #0
 800550a:	4770      	bx	lr

0800550c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800550c:	b510      	push	{r4, lr}
 800550e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <_sbrk+0x38>)
 8005512:	490d      	ldr	r1, [pc, #52]	; (8005548 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005514:	480d      	ldr	r0, [pc, #52]	; (800554c <_sbrk+0x40>)
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	b140      	cbz	r0, 800552c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800551a:	480c      	ldr	r0, [pc, #48]	; (800554c <_sbrk+0x40>)
 800551c:	6800      	ldr	r0, [r0, #0]
 800551e:	4403      	add	r3, r0
 8005520:	1a52      	subs	r2, r2, r1
 8005522:	4293      	cmp	r3, r2
 8005524:	d806      	bhi.n	8005534 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005526:	4a09      	ldr	r2, [pc, #36]	; (800554c <_sbrk+0x40>)
 8005528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800552a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800552c:	4807      	ldr	r0, [pc, #28]	; (800554c <_sbrk+0x40>)
 800552e:	4c08      	ldr	r4, [pc, #32]	; (8005550 <_sbrk+0x44>)
 8005530:	6004      	str	r4, [r0, #0]
 8005532:	e7f2      	b.n	800551a <_sbrk+0xe>
    errno = ENOMEM;
 8005534:	f003 f914 	bl	8008760 <__errno>
 8005538:	230c      	movs	r3, #12
 800553a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800553c:	f04f 30ff 	mov.w	r0, #4294967295
 8005540:	e7f3      	b.n	800552a <_sbrk+0x1e>
 8005542:	bf00      	nop
 8005544:	2000a000 	.word	0x2000a000
 8005548:	00000400 	.word	0x00000400
 800554c:	20000ca4 	.word	0x20000ca4
 8005550:	20000e00 	.word	0x20000e00

08005554 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005554:	4a03      	ldr	r2, [pc, #12]	; (8005564 <SystemInit+0x10>)
 8005556:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800555a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800555e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005562:	4770      	bx	lr
 8005564:	e000ed00 	.word	0xe000ed00

08005568 <Vslet_Trajectory>:


void Vslet_Trajectory(double alpha0, double phi0, double x0, double y0, double z0)
{

}
 8005568:	4770      	bx	lr

0800556a <Get_point_traj>:

POINT_TR Get_point_traj(int Npoint, char UpT)
{
 800556a:	4603      	mov	r3, r0

}
 800556c:	4618      	mov	r0, r3
 800556e:	4770      	bx	lr

08005570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055a8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005574:	f7ff ffee 	bl	8005554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005578:	480c      	ldr	r0, [pc, #48]	; (80055ac <LoopForever+0x6>)
  ldr r1, =_edata
 800557a:	490d      	ldr	r1, [pc, #52]	; (80055b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800557c:	4a0d      	ldr	r2, [pc, #52]	; (80055b4 <LoopForever+0xe>)
  movs r3, #0
 800557e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005580:	e002      	b.n	8005588 <LoopCopyDataInit>

08005582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005586:	3304      	adds	r3, #4

08005588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800558a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800558c:	d3f9      	bcc.n	8005582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800558e:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005590:	4c0a      	ldr	r4, [pc, #40]	; (80055bc <LoopForever+0x16>)
  movs r3, #0
 8005592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005594:	e001      	b.n	800559a <LoopFillZerobss>

08005596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005598:	3204      	adds	r2, #4

0800559a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800559a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800559c:	d3fb      	bcc.n	8005596 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800559e:	f003 f8e5 	bl	800876c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055a2:	f7fd fe3d 	bl	8003220 <main>

080055a6 <LoopForever>:

LoopForever:
    b LoopForever
 80055a6:	e7fe      	b.n	80055a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80055a8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80055ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055b0:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80055b4:	0800d440 	.word	0x0800d440
  ldr r2, =_sbss
 80055b8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80055bc:	20000e00 	.word	0x20000e00

080055c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055c0:	e7fe      	b.n	80055c0 <ADC1_2_IRQHandler>
	...

080055c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055c4:	b510      	push	{r4, lr}
 80055c6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055c8:	4b0e      	ldr	r3, [pc, #56]	; (8005604 <HAL_InitTick+0x40>)
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80055d4:	4a0c      	ldr	r2, [pc, #48]	; (8005608 <HAL_InitTick+0x44>)
 80055d6:	6810      	ldr	r0, [r2, #0]
 80055d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80055dc:	f000 f89a 	bl	8005714 <HAL_SYSTICK_Config>
 80055e0:	b968      	cbnz	r0, 80055fe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055e2:	2c0f      	cmp	r4, #15
 80055e4:	d901      	bls.n	80055ea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80055e6:	2001      	movs	r0, #1
 80055e8:	e00a      	b.n	8005600 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055ea:	2200      	movs	r2, #0
 80055ec:	4621      	mov	r1, r4
 80055ee:	f04f 30ff 	mov.w	r0, #4294967295
 80055f2:	f000 f857 	bl	80056a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <HAL_InitTick+0x48>)
 80055f8:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 80055fa:	2000      	movs	r0, #0
 80055fc:	e000      	b.n	8005600 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80055fe:	2001      	movs	r0, #1
}
 8005600:	bd10      	pop	{r4, pc}
 8005602:	bf00      	nop
 8005604:	20000040 	.word	0x20000040
 8005608:	20000028 	.word	0x20000028
 800560c:	20000044 	.word	0x20000044

08005610 <HAL_Init>:
{
 8005610:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005612:	4a07      	ldr	r2, [pc, #28]	; (8005630 <HAL_Init+0x20>)
 8005614:	6813      	ldr	r3, [r2, #0]
 8005616:	f043 0310 	orr.w	r3, r3, #16
 800561a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800561c:	2003      	movs	r0, #3
 800561e:	f000 f82f 	bl	8005680 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005622:	2000      	movs	r0, #0
 8005624:	f7ff ffce 	bl	80055c4 <HAL_InitTick>
  HAL_MspInit();
 8005628:	f7ff fd86 	bl	8005138 <HAL_MspInit>
}
 800562c:	2000      	movs	r0, #0
 800562e:	bd08      	pop	{r3, pc}
 8005630:	40022000 	.word	0x40022000

08005634 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005634:	4a03      	ldr	r2, [pc, #12]	; (8005644 <HAL_IncTick+0x10>)
 8005636:	6811      	ldr	r1, [r2, #0]
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <HAL_IncTick+0x14>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	440b      	add	r3, r1
 800563e:	6013      	str	r3, [r2, #0]
}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000cb0 	.word	0x20000cb0
 8005648:	20000040 	.word	0x20000040

0800564c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800564c:	4b01      	ldr	r3, [pc, #4]	; (8005654 <HAL_GetTick+0x8>)
 800564e:	6818      	ldr	r0, [r3, #0]
}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000cb0 	.word	0x20000cb0

08005658 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800565c:	f7ff fff6 	bl	800564c <HAL_GetTick>
 8005660:	4605      	mov	r5, r0
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005662:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005666:	d002      	beq.n	800566e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <HAL_Delay+0x24>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800566e:	f7ff ffed 	bl	800564c <HAL_GetTick>
 8005672:	1b40      	subs	r0, r0, r5
 8005674:	42a0      	cmp	r0, r4
 8005676:	d3fa      	bcc.n	800566e <HAL_Delay+0x16>
  {
  }
}
 8005678:	bd38      	pop	{r3, r4, r5, pc}
 800567a:	bf00      	nop
 800567c:	20000040 	.word	0x20000040

08005680 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005680:	4a07      	ldr	r2, [pc, #28]	; (80056a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005682:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005684:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005688:	041b      	lsls	r3, r3, #16
 800568a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800568c:	0200      	lsls	r0, r0, #8
 800568e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005692:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8005694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800569c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800569e:	4770      	bx	lr
 80056a0:	e000ed00 	.word	0xe000ed00

080056a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056a4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056a6:	4b19      	ldr	r3, [pc, #100]	; (800570c <HAL_NVIC_SetPriority+0x68>)
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056ae:	f1c3 0c07 	rsb	ip, r3, #7
 80056b2:	f1bc 0f04 	cmp.w	ip, #4
 80056b6:	bf28      	it	cs
 80056b8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056bc:	f103 0e04 	add.w	lr, r3, #4
 80056c0:	f1be 0f06 	cmp.w	lr, #6
 80056c4:	d918      	bls.n	80056f8 <HAL_NVIC_SetPriority+0x54>
 80056c6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c8:	f04f 3eff 	mov.w	lr, #4294967295
 80056cc:	fa0e fc0c 	lsl.w	ip, lr, ip
 80056d0:	ea21 010c 	bic.w	r1, r1, ip
 80056d4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056d6:	fa0e fe03 	lsl.w	lr, lr, r3
 80056da:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056de:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80056e0:	2800      	cmp	r0, #0
 80056e2:	db0b      	blt.n	80056fc <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e4:	0112      	lsls	r2, r2, #4
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80056ec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80056f0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80056f4:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056f8:	2300      	movs	r3, #0
 80056fa:	e7e5      	b.n	80056c8 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056fc:	f000 000f 	and.w	r0, r0, #15
 8005700:	0112      	lsls	r2, r2, #4
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	4b02      	ldr	r3, [pc, #8]	; (8005710 <HAL_NVIC_SetPriority+0x6c>)
 8005706:	541a      	strb	r2, [r3, r0]
 8005708:	e7f4      	b.n	80056f4 <HAL_NVIC_SetPriority+0x50>
 800570a:	bf00      	nop
 800570c:	e000ed00 	.word	0xe000ed00
 8005710:	e000ed14 	.word	0xe000ed14

08005714 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005714:	3801      	subs	r0, #1
 8005716:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800571a:	d20b      	bcs.n	8005734 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800571c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005720:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005722:	4a05      	ldr	r2, [pc, #20]	; (8005738 <HAL_SYSTICK_Config+0x24>)
 8005724:	21f0      	movs	r1, #240	; 0xf0
 8005726:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800572a:	2000      	movs	r0, #0
 800572c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800572e:	2207      	movs	r2, #7
 8005730:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005732:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005734:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005736:	4770      	bx	lr
 8005738:	e000ed00 	.word	0xe000ed00

0800573c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800573c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800573e:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8005740:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005742:	e062      	b.n	800580a <HAL_GPIO_Init+0xce>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005744:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005746:	005e      	lsls	r6, r3, #1
 8005748:	2403      	movs	r4, #3
 800574a:	40b4      	lsls	r4, r6
 800574c:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005750:	68cc      	ldr	r4, [r1, #12]
 8005752:	40b4      	lsls	r4, r6
 8005754:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8005756:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005758:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800575a:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800575e:	684c      	ldr	r4, [r1, #4]
 8005760:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8005764:	409c      	lsls	r4, r3
 8005766:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8005768:	6044      	str	r4, [r0, #4]
 800576a:	e05f      	b.n	800582c <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800576c:	08dd      	lsrs	r5, r3, #3
 800576e:	3508      	adds	r5, #8
 8005770:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005774:	f003 0c07 	and.w	ip, r3, #7
 8005778:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800577c:	f04f 0e0f 	mov.w	lr, #15
 8005780:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005784:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005788:	690c      	ldr	r4, [r1, #16]
 800578a:	fa04 f40c 	lsl.w	r4, r4, ip
 800578e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8005792:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8005796:	e060      	b.n	800585a <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005798:	2404      	movs	r4, #4
 800579a:	e000      	b.n	800579e <HAL_GPIO_Init+0x62>
 800579c:	2400      	movs	r4, #0
 800579e:	fa04 f40e 	lsl.w	r4, r4, lr
 80057a2:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80057a4:	f10c 0c02 	add.w	ip, ip, #2
 80057a8:	4d52      	ldr	r5, [pc, #328]	; (80058f4 <HAL_GPIO_Init+0x1b8>)
 80057aa:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80057ae:	4c52      	ldr	r4, [pc, #328]	; (80058f8 <HAL_GPIO_Init+0x1bc>)
 80057b0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 80057b2:	43d4      	mvns	r4, r2
 80057b4:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80057b8:	684f      	ldr	r7, [r1, #4]
 80057ba:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80057be:	d001      	beq.n	80057c4 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80057c0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80057c4:	4d4c      	ldr	r5, [pc, #304]	; (80058f8 <HAL_GPIO_Init+0x1bc>)
 80057c6:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80057c8:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80057ca:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057ce:	684f      	ldr	r7, [r1, #4]
 80057d0:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 80057d4:	d001      	beq.n	80057da <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 80057d6:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR = temp;
 80057da:	4d47      	ldr	r5, [pc, #284]	; (80058f8 <HAL_GPIO_Init+0x1bc>)
 80057dc:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR;
 80057de:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80057e0:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057e4:	684f      	ldr	r7, [r1, #4]
 80057e6:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80057ea:	d001      	beq.n	80057f0 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 80057ec:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80057f0:	4d41      	ldr	r5, [pc, #260]	; (80058f8 <HAL_GPIO_Init+0x1bc>)
 80057f2:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057f4:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80057f6:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80057f8:	684e      	ldr	r6, [r1, #4]
 80057fa:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 80057fe:	d001      	beq.n	8005804 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8005800:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR = temp;
 8005804:	4a3c      	ldr	r2, [pc, #240]	; (80058f8 <HAL_GPIO_Init+0x1bc>)
 8005806:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8005808:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800580a:	680a      	ldr	r2, [r1, #0]
 800580c:	fa32 f403 	lsrs.w	r4, r2, r3
 8005810:	d06e      	beq.n	80058f0 <HAL_GPIO_Init+0x1b4>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005812:	f04f 0c01 	mov.w	ip, #1
 8005816:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800581a:	ea1c 0202 	ands.w	r2, ip, r2
 800581e:	d0f3      	beq.n	8005808 <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005820:	684c      	ldr	r4, [r1, #4]
 8005822:	f004 0403 	and.w	r4, r4, #3
 8005826:	3c01      	subs	r4, #1
 8005828:	2c01      	cmp	r4, #1
 800582a:	d98b      	bls.n	8005744 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800582c:	684c      	ldr	r4, [r1, #4]
 800582e:	f004 0403 	and.w	r4, r4, #3
 8005832:	2c03      	cmp	r4, #3
 8005834:	d00c      	beq.n	8005850 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8005836:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005838:	005d      	lsls	r5, r3, #1
 800583a:	f04f 0c03 	mov.w	ip, #3
 800583e:	fa0c fc05 	lsl.w	ip, ip, r5
 8005842:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005846:	688c      	ldr	r4, [r1, #8]
 8005848:	40ac      	lsls	r4, r5
 800584a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 800584e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005850:	684c      	ldr	r4, [r1, #4]
 8005852:	f004 0403 	and.w	r4, r4, #3
 8005856:	2c02      	cmp	r4, #2
 8005858:	d088      	beq.n	800576c <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800585a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800585c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005860:	f04f 0c03 	mov.w	ip, #3
 8005864:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005868:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800586c:	684c      	ldr	r4, [r1, #4]
 800586e:	f004 0403 	and.w	r4, r4, #3
 8005872:	fa04 f40e 	lsl.w	r4, r4, lr
 8005876:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800587a:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800587c:	684c      	ldr	r4, [r1, #4]
 800587e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005882:	d0c1      	beq.n	8005808 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005884:	4c1d      	ldr	r4, [pc, #116]	; (80058fc <HAL_GPIO_Init+0x1c0>)
 8005886:	69a5      	ldr	r5, [r4, #24]
 8005888:	f045 0501 	orr.w	r5, r5, #1
 800588c:	61a5      	str	r5, [r4, #24]
 800588e:	69a4      	ldr	r4, [r4, #24]
 8005890:	f004 0401 	and.w	r4, r4, #1
 8005894:	9401      	str	r4, [sp, #4]
 8005896:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8005898:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800589c:	f10c 0502 	add.w	r5, ip, #2
 80058a0:	4c14      	ldr	r4, [pc, #80]	; (80058f4 <HAL_GPIO_Init+0x1b8>)
 80058a2:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058a6:	f003 0e03 	and.w	lr, r3, #3
 80058aa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80058ae:	240f      	movs	r4, #15
 80058b0:	fa04 f40e 	lsl.w	r4, r4, lr
 80058b4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058b8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80058bc:	f43f af6e 	beq.w	800579c <HAL_GPIO_Init+0x60>
 80058c0:	4c0f      	ldr	r4, [pc, #60]	; (8005900 <HAL_GPIO_Init+0x1c4>)
 80058c2:	42a0      	cmp	r0, r4
 80058c4:	d00e      	beq.n	80058e4 <HAL_GPIO_Init+0x1a8>
 80058c6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80058ca:	42a0      	cmp	r0, r4
 80058cc:	d00c      	beq.n	80058e8 <HAL_GPIO_Init+0x1ac>
 80058ce:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80058d2:	42a0      	cmp	r0, r4
 80058d4:	d00a      	beq.n	80058ec <HAL_GPIO_Init+0x1b0>
 80058d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80058da:	42a0      	cmp	r0, r4
 80058dc:	f43f af5c 	beq.w	8005798 <HAL_GPIO_Init+0x5c>
 80058e0:	2405      	movs	r4, #5
 80058e2:	e75c      	b.n	800579e <HAL_GPIO_Init+0x62>
 80058e4:	2401      	movs	r4, #1
 80058e6:	e75a      	b.n	800579e <HAL_GPIO_Init+0x62>
 80058e8:	2402      	movs	r4, #2
 80058ea:	e758      	b.n	800579e <HAL_GPIO_Init+0x62>
 80058ec:	2403      	movs	r4, #3
 80058ee:	e756      	b.n	800579e <HAL_GPIO_Init+0x62>
  }
}
 80058f0:	b003      	add	sp, #12
 80058f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40010400 	.word	0x40010400
 80058fc:	40021000 	.word	0x40021000
 8005900:	48000400 	.word	0x48000400

08005904 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005904:	6803      	ldr	r3, [r0, #0]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	f012 0f02 	tst.w	r2, #2
 800590c:	d001      	beq.n	8005912 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 800590e:	2200      	movs	r2, #0
 8005910:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005912:	6803      	ldr	r3, [r0, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	f012 0f01 	tst.w	r2, #1
 800591a:	d103      	bne.n	8005924 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	f042 0201 	orr.w	r2, r2, #1
 8005922:	619a      	str	r2, [r3, #24]
  }
}
 8005924:	4770      	bx	lr

08005926 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005926:	b410      	push	{r4}
 8005928:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800592a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800592e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005932:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005934:	4321      	orrs	r1, r4
 8005936:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800593a:	6802      	ldr	r2, [r0, #0]
 800593c:	6853      	ldr	r3, [r2, #4]
 800593e:	0d64      	lsrs	r4, r4, #21
 8005940:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005944:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8005948:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800594c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005950:	f044 0403 	orr.w	r4, r4, #3
 8005954:	ea23 0304 	bic.w	r3, r3, r4
 8005958:	430b      	orrs	r3, r1
 800595a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800595c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005960:	4770      	bx	lr

08005962 <I2C_IsErrorOccurred>:
{
 8005962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005966:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8005968:	6803      	ldr	r3, [r0, #0]
 800596a:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800596c:	f016 0610 	ands.w	r6, r6, #16
 8005970:	d07c      	beq.n	8005a6c <I2C_IsErrorOccurred+0x10a>
 8005972:	460d      	mov	r5, r1
 8005974:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005976:	2210      	movs	r2, #16
 8005978:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800597a:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800597c:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	6998      	ldr	r0, [r3, #24]
 8005982:	f010 0f20 	tst.w	r0, #32
 8005986:	d130      	bne.n	80059ea <I2C_IsErrorOccurred+0x88>
 8005988:	bb7f      	cbnz	r7, 80059ea <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 800598a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800598e:	d0f6      	beq.n	800597e <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005990:	f7ff fe5c 	bl	800564c <HAL_GetTick>
 8005994:	eba0 0008 	sub.w	r0, r0, r8
 8005998:	42a8      	cmp	r0, r5
 800599a:	d801      	bhi.n	80059a0 <I2C_IsErrorOccurred+0x3e>
 800599c:	2d00      	cmp	r5, #0
 800599e:	d1ee      	bne.n	800597e <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80059a0:	6821      	ldr	r1, [r4, #0]
 80059a2:	684b      	ldr	r3, [r1, #4]
 80059a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 80059a8:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80059ac:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80059ae:	6988      	ldr	r0, [r1, #24]
 80059b0:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80059b4:	d002      	beq.n	80059bc <I2C_IsErrorOccurred+0x5a>
 80059b6:	b90b      	cbnz	r3, 80059bc <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 80059b8:	2a20      	cmp	r2, #32
 80059ba:	d10e      	bne.n	80059da <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	699b      	ldr	r3, [r3, #24]
 80059c0:	f013 0f20 	tst.w	r3, #32
 80059c4:	d1db      	bne.n	800597e <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80059c6:	f7ff fe41 	bl	800564c <HAL_GetTick>
 80059ca:	eba0 0008 	sub.w	r0, r0, r8
 80059ce:	2819      	cmp	r0, #25
 80059d0:	d9f4      	bls.n	80059bc <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80059d2:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80059d6:	2701      	movs	r7, #1
              break;
 80059d8:	e7d1      	b.n	800597e <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059da:	684b      	ldr	r3, [r1, #4]
 80059dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059e0:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80059e2:	f7ff fe33 	bl	800564c <HAL_GetTick>
 80059e6:	4680      	mov	r8, r0
 80059e8:	e7e8      	b.n	80059bc <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80059ea:	b90f      	cbnz	r7, 80059f0 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ec:	2220      	movs	r2, #32
 80059ee:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80059f0:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80059f4:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80059fa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80059fe:	d005      	beq.n	8005a0c <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 8005a00:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a08:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005a0a:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005a0c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005a10:	d006      	beq.n	8005a20 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8005a12:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a1c:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005a1e:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005a20:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005a24:	d024      	beq.n	8005a70 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a26:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a30:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8005a32:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8005a34:	4620      	mov	r0, r4
 8005a36:	f7ff ff65 	bl	8005904 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	6853      	ldr	r3, [r2, #4]
 8005a3e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005a42:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005a46:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005a50:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005a52:	4333      	orrs	r3, r6
 8005a54:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a56:	2320      	movs	r3, #32
 8005a58:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005a62:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8005a66:	4628      	mov	r0, r5
 8005a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8005a6c:	2500      	movs	r5, #0
 8005a6e:	e7c2      	b.n	80059f6 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8005a70:	2d00      	cmp	r5, #0
 8005a72:	d0f8      	beq.n	8005a66 <I2C_IsErrorOccurred+0x104>
 8005a74:	e7de      	b.n	8005a34 <I2C_IsErrorOccurred+0xd2>

08005a76 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005a76:	b570      	push	{r4, r5, r6, lr}
 8005a78:	4604      	mov	r4, r0
 8005a7a:	460d      	mov	r5, r1
 8005a7c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f013 0f02 	tst.w	r3, #2
 8005a86:	d122      	bne.n	8005ace <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a88:	4632      	mov	r2, r6
 8005a8a:	4629      	mov	r1, r5
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f7ff ff68 	bl	8005962 <I2C_IsErrorOccurred>
 8005a92:	b9f0      	cbnz	r0, 8005ad2 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8005a94:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a98:	d0f1      	beq.n	8005a7e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a9a:	f7ff fdd7 	bl	800564c <HAL_GetTick>
 8005a9e:	1b80      	subs	r0, r0, r6
 8005aa0:	42a8      	cmp	r0, r5
 8005aa2:	d801      	bhi.n	8005aa8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005aa4:	2d00      	cmp	r5, #0
 8005aa6:	d1ea      	bne.n	8005a7e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f013 0f02 	tst.w	r3, #2
 8005ab0:	d1e5      	bne.n	8005a7e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ab2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ab4:	f043 0320 	orr.w	r3, r3, #32
 8005ab8:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	2320      	movs	r3, #32
 8005abc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005ac6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8005aca:	2001      	movs	r0, #1
 8005acc:	e000      	b.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8005ace:	2000      	movs	r0, #0
}
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
 8005ad4:	e7fc      	b.n	8005ad0 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

08005ad6 <I2C_WaitOnFlagUntilTimeout>:
{
 8005ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ada:	4605      	mov	r5, r0
 8005adc:	460f      	mov	r7, r1
 8005ade:	4616      	mov	r6, r2
 8005ae0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ae2:	682c      	ldr	r4, [r5, #0]
 8005ae4:	69a4      	ldr	r4, [r4, #24]
 8005ae6:	ea37 0404 	bics.w	r4, r7, r4
 8005aea:	bf0c      	ite	eq
 8005aec:	2401      	moveq	r4, #1
 8005aee:	2400      	movne	r4, #0
 8005af0:	42b4      	cmp	r4, r6
 8005af2:	d122      	bne.n	8005b3a <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8005af4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005af8:	d0f3      	beq.n	8005ae2 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7ff fda7 	bl	800564c <HAL_GetTick>
 8005afe:	9b06      	ldr	r3, [sp, #24]
 8005b00:	1ac0      	subs	r0, r0, r3
 8005b02:	4540      	cmp	r0, r8
 8005b04:	d802      	bhi.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x36>
 8005b06:	f1b8 0f00 	cmp.w	r8, #0
 8005b0a:	d1ea      	bne.n	8005ae2 <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005b0c:	682b      	ldr	r3, [r5, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	ea37 0303 	bics.w	r3, r7, r3
 8005b14:	bf0c      	ite	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	2300      	movne	r3, #0
 8005b1a:	42b3      	cmp	r3, r6
 8005b1c:	d1e1      	bne.n	8005ae2 <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b1e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005b20:	f043 0320 	orr.w	r3, r3, #32
 8005b24:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b26:	2320      	movs	r3, #32
 8005b28:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8005b32:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8005b36:	2001      	movs	r0, #1
 8005b38:	e000      	b.n	8005b3c <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 8005b3a:	2000      	movs	r0, #0
}
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b40 <I2C_RequestMemoryWrite>:
{
 8005b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	4604      	mov	r4, r0
 8005b48:	4690      	mov	r8, r2
 8005b4a:	461d      	mov	r5, r3
 8005b4c:	9e08      	ldr	r6, [sp, #32]
 8005b4e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005b50:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <I2C_RequestMemoryWrite+0x78>)
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b58:	b2ea      	uxtb	r2, r5
 8005b5a:	f7ff fee4 	bl	8005926 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b5e:	463a      	mov	r2, r7
 8005b60:	4631      	mov	r1, r6
 8005b62:	4620      	mov	r0, r4
 8005b64:	f7ff ff87 	bl	8005a76 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b68:	b9f8      	cbnz	r0, 8005baa <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b6a:	2d01      	cmp	r5, #1
 8005b6c:	d10e      	bne.n	8005b8c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	fa5f f288 	uxtb.w	r2, r8
 8005b74:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005b76:	9700      	str	r7, [sp, #0]
 8005b78:	4633      	mov	r3, r6
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	2180      	movs	r1, #128	; 0x80
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f7ff ffa9 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 8005b84:	b9a8      	cbnz	r0, 8005bb2 <I2C_RequestMemoryWrite+0x72>
}
 8005b86:	b002      	add	sp, #8
 8005b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b94:	463a      	mov	r2, r7
 8005b96:	4631      	mov	r1, r6
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f7ff ff6c 	bl	8005a76 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b9e:	b930      	cbnz	r0, 8005bae <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	fa5f f288 	uxtb.w	r2, r8
 8005ba6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ba8:	e7e5      	b.n	8005b76 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8005baa:	2001      	movs	r0, #1
 8005bac:	e7eb      	b.n	8005b86 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8005bae:	2001      	movs	r0, #1
 8005bb0:	e7e9      	b.n	8005b86 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	e7e7      	b.n	8005b86 <I2C_RequestMemoryWrite+0x46>
 8005bb6:	bf00      	nop
 8005bb8:	80002000 	.word	0x80002000

08005bbc <I2C_RequestMemoryRead>:
{
 8005bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	4690      	mov	r8, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	9e08      	ldr	r6, [sp, #32]
 8005bca:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005bcc:	4b18      	ldr	r3, [pc, #96]	; (8005c30 <I2C_RequestMemoryRead+0x74>)
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	b2ea      	uxtb	r2, r5
 8005bd4:	f7ff fea7 	bl	8005926 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd8:	463a      	mov	r2, r7
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7ff ff4a 	bl	8005a76 <I2C_WaitOnTXISFlagUntilTimeout>
 8005be2:	b9f8      	cbnz	r0, 8005c24 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005be4:	2d01      	cmp	r5, #1
 8005be6:	d10e      	bne.n	8005c06 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	fa5f f288 	uxtb.w	r2, r8
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf0:	9700      	str	r7, [sp, #0]
 8005bf2:	4633      	mov	r3, r6
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	2140      	movs	r1, #64	; 0x40
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f7ff ff6c 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 8005bfe:	b9a8      	cbnz	r0, 8005c2c <I2C_RequestMemoryRead+0x70>
}
 8005c00:	b002      	add	sp, #8
 8005c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005c0c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0e:	463a      	mov	r2, r7
 8005c10:	4631      	mov	r1, r6
 8005c12:	4620      	mov	r0, r4
 8005c14:	f7ff ff2f 	bl	8005a76 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c18:	b930      	cbnz	r0, 8005c28 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	fa5f f288 	uxtb.w	r2, r8
 8005c20:	629a      	str	r2, [r3, #40]	; 0x28
 8005c22:	e7e5      	b.n	8005bf0 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8005c24:	2001      	movs	r0, #1
 8005c26:	e7eb      	b.n	8005c00 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8005c28:	2001      	movs	r0, #1
 8005c2a:	e7e9      	b.n	8005c00 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	e7e7      	b.n	8005c00 <I2C_RequestMemoryRead+0x44>
 8005c30:	80002000 	.word	0x80002000

08005c34 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8005c34:	b570      	push	{r4, r5, r6, lr}
 8005c36:	4604      	mov	r4, r0
 8005c38:	460d      	mov	r5, r1
 8005c3a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c3c:	e004      	b.n	8005c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f013 0f20 	tst.w	r3, #32
 8005c46:	d012      	beq.n	8005c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	f013 0f20 	tst.w	r3, #32
 8005c50:	d11b      	bne.n	8005c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c52:	4632      	mov	r2, r6
 8005c54:	4629      	mov	r1, r5
 8005c56:	4620      	mov	r0, r4
 8005c58:	f7ff fe83 	bl	8005962 <I2C_IsErrorOccurred>
 8005c5c:	b9b8      	cbnz	r0, 8005c8e <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c5e:	f7ff fcf5 	bl	800564c <HAL_GetTick>
 8005c62:	1b80      	subs	r0, r0, r6
 8005c64:	42a8      	cmp	r0, r5
 8005c66:	d8ea      	bhi.n	8005c3e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	d1ed      	bne.n	8005c48 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 8005c6c:	e7e7      	b.n	8005c3e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c70:	f043 0320 	orr.w	r3, r3, #32
 8005c74:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	2320      	movs	r3, #32
 8005c78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005c82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005c86:	2001      	movs	r0, #1
 8005c88:	e000      	b.n	8005c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 8005c8a:	2000      	movs	r0, #0
}
 8005c8c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005c8e:	2001      	movs	r0, #1
 8005c90:	e7fc      	b.n	8005c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

08005c92 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005c92:	2800      	cmp	r0, #0
 8005c94:	d059      	beq.n	8005d4a <HAL_I2C_Init+0xb8>
{
 8005c96:	b510      	push	{r4, lr}
 8005c98:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d043      	beq.n	8005d2a <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ca2:	2324      	movs	r3, #36	; 0x24
 8005ca4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005ca8:	6822      	ldr	r2, [r4, #0]
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	f023 0301 	bic.w	r3, r3, #1
 8005cb0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cb2:	6863      	ldr	r3, [r4, #4]
 8005cb4:	6822      	ldr	r2, [r4, #0]
 8005cb6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005cba:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	6893      	ldr	r3, [r2, #8]
 8005cc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cc4:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cc6:	68e3      	ldr	r3, [r4, #12]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d033      	beq.n	8005d34 <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ccc:	68a3      	ldr	r3, [r4, #8]
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005cd4:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cd6:	68e3      	ldr	r3, [r4, #12]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d031      	beq.n	8005d40 <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	6853      	ldr	r3, [r2, #4]
 8005ce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ce8:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cea:	6822      	ldr	r2, [r4, #0]
 8005cec:	68d3      	ldr	r3, [r2, #12]
 8005cee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cf2:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cf4:	6923      	ldr	r3, [r4, #16]
 8005cf6:	6962      	ldr	r2, [r4, #20]
 8005cf8:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005cfa:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cfc:	6822      	ldr	r2, [r4, #0]
 8005cfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d02:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d04:	69e3      	ldr	r3, [r4, #28]
 8005d06:	6a21      	ldr	r1, [r4, #32]
 8005d08:	6822      	ldr	r2, [r4, #0]
 8005d0a:	430b      	orrs	r3, r1
 8005d0c:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	6813      	ldr	r3, [r2, #0]
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d18:	2000      	movs	r0, #0
 8005d1a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d1c:	2320      	movs	r3, #32
 8005d1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d22:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d24:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005d28:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005d2a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005d2e:	f7ff fa21 	bl	8005174 <HAL_I2C_MspInit>
 8005d32:	e7b6      	b.n	8005ca2 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d34:	68a3      	ldr	r3, [r4, #8]
 8005d36:	6822      	ldr	r2, [r4, #0]
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d3c:	6093      	str	r3, [r2, #8]
 8005d3e:	e7ca      	b.n	8005cd6 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	e7c8      	b.n	8005cdc <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8005d4a:	2001      	movs	r0, #1
}
 8005d4c:	4770      	bx	lr

08005d4e <HAL_I2C_Mem_Write>:
{
 8005d4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d52:	b083      	sub	sp, #12
 8005d54:	460e      	mov	r6, r1
 8005d56:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005d5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5c:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005d60:	b2c9      	uxtb	r1, r1
 8005d62:	2920      	cmp	r1, #32
 8005d64:	f040 80bb 	bne.w	8005ede <HAL_I2C_Mem_Write+0x190>
 8005d68:	4604      	mov	r4, r0
 8005d6a:	4690      	mov	r8, r2
 8005d6c:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005d6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d70:	b1cb      	cbz	r3, 8005da6 <HAL_I2C_Mem_Write+0x58>
 8005d72:	f1ba 0f00 	cmp.w	sl, #0
 8005d76:	d016      	beq.n	8005da6 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8005d78:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	f000 80b2 	beq.w	8005ee6 <HAL_I2C_Mem_Write+0x198>
 8005d82:	f04f 0b01 	mov.w	fp, #1
 8005d86:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005d8a:	f7ff fc5f 	bl	800564c <HAL_GetTick>
 8005d8e:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005d90:	9000      	str	r0, [sp, #0]
 8005d92:	2319      	movs	r3, #25
 8005d94:	465a      	mov	r2, fp
 8005d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f7ff fe9b 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 8005da0:	b130      	cbz	r0, 8005db0 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8005da2:	2001      	movs	r0, #1
 8005da4:	e09c      	b.n	8005ee0 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005daa:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005dac:	2001      	movs	r0, #1
 8005dae:	e097      	b.n	8005ee0 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005db0:	2321      	movs	r3, #33	; 0x21
 8005db2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005db6:	2340      	movs	r3, #64	; 0x40
 8005db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005dc2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005dc4:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005dc8:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dca:	9701      	str	r7, [sp, #4]
 8005dcc:	9500      	str	r5, [sp, #0]
 8005dce:	464b      	mov	r3, r9
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	f7ff feb3 	bl	8005b40 <I2C_RequestMemoryWrite>
 8005dda:	b970      	cbnz	r0, 8005dfa <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ddc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2bff      	cmp	r3, #255	; 0xff
 8005de2:	d90f      	bls.n	8005e04 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005de4:	22ff      	movs	r2, #255	; 0xff
 8005de6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005de8:	2300      	movs	r3, #0
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005df0:	4631      	mov	r1, r6
 8005df2:	4620      	mov	r0, r4
 8005df4:	f7ff fd97 	bl	8005926 <I2C_TransferConfig>
 8005df8:	e021      	b.n	8005e3e <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005e00:	4658      	mov	r0, fp
 8005e02:	e06d      	b.n	8005ee0 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8005e04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e06:	b292      	uxth	r2, r2
 8005e08:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e12:	b2d2      	uxtb	r2, r2
 8005e14:	4631      	mov	r1, r6
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7ff fd85 	bl	8005926 <I2C_TransferConfig>
 8005e1c:	e00f      	b.n	8005e3e <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8005e1e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e20:	b292      	uxth	r2, r2
 8005e22:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e24:	2300      	movs	r3, #0
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7ff fd78 	bl	8005926 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005e36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d033      	beq.n	8005ea6 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e3e:	463a      	mov	r2, r7
 8005e40:	4629      	mov	r1, r5
 8005e42:	4620      	mov	r0, r4
 8005e44:	f7ff fe17 	bl	8005a76 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d14e      	bne.n	8005eea <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	7812      	ldrb	r2, [r2, #0]
 8005e52:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e56:	3301      	adds	r3, #1
 8005e58:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005e64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005e66:	3b01      	subs	r3, #1
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005e6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e6e:	b292      	uxth	r2, r2
 8005e70:	2a00      	cmp	r2, #0
 8005e72:	d0e0      	beq.n	8005e36 <HAL_I2C_Mem_Write+0xe8>
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1de      	bne.n	8005e36 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005e78:	9700      	str	r7, [sp, #0]
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2180      	movs	r1, #128	; 0x80
 8005e80:	4620      	mov	r0, r4
 8005e82:	f7ff fe28 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 8005e86:	bb90      	cbnz	r0, 8005eee <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2bff      	cmp	r3, #255	; 0xff
 8005e8e:	d9c6      	bls.n	8005e1e <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e90:	22ff      	movs	r2, #255	; 0xff
 8005e92:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e94:	2300      	movs	r3, #0
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f7ff fd41 	bl	8005926 <I2C_TransferConfig>
 8005ea4:	e7c7      	b.n	8005e36 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea6:	463a      	mov	r2, r7
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f7ff fec2 	bl	8005c34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005eb0:	b9f8      	cbnz	r0, 8005ef2 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005eb8:	6821      	ldr	r1, [r4, #0]
 8005eba:	684b      	ldr	r3, [r1, #4]
 8005ebc:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005ec0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005ec4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005ec8:	f023 0301 	bic.w	r3, r3, #1
 8005ecc:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ece:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005ed8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005edc:	e000      	b.n	8005ee0 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8005ede:	2002      	movs	r0, #2
}
 8005ee0:	b003      	add	sp, #12
 8005ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005ee6:	2002      	movs	r0, #2
 8005ee8:	e7fa      	b.n	8005ee0 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8005eea:	2001      	movs	r0, #1
 8005eec:	e7f8      	b.n	8005ee0 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8005eee:	2001      	movs	r0, #1
 8005ef0:	e7f6      	b.n	8005ee0 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	e7f4      	b.n	8005ee0 <HAL_I2C_Mem_Write+0x192>
	...

08005ef8 <HAL_I2C_Mem_Read>:
{
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	b083      	sub	sp, #12
 8005efe:	460e      	mov	r6, r1
 8005f00:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8005f04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f06:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8005f0a:	b2c9      	uxtb	r1, r1
 8005f0c:	2920      	cmp	r1, #32
 8005f0e:	f040 80bc 	bne.w	800608a <HAL_I2C_Mem_Read+0x192>
 8005f12:	4604      	mov	r4, r0
 8005f14:	4690      	mov	r8, r2
 8005f16:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f1a:	b1cb      	cbz	r3, 8005f50 <HAL_I2C_Mem_Read+0x58>
 8005f1c:	f1ba 0f00 	cmp.w	sl, #0
 8005f20:	d016      	beq.n	8005f50 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8005f22:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	f000 80b3 	beq.w	8006092 <HAL_I2C_Mem_Read+0x19a>
 8005f2c:	f04f 0b01 	mov.w	fp, #1
 8005f30:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005f34:	f7ff fb8a 	bl	800564c <HAL_GetTick>
 8005f38:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005f3a:	9000      	str	r0, [sp, #0]
 8005f3c:	2319      	movs	r3, #25
 8005f3e:	465a      	mov	r2, fp
 8005f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f44:	4620      	mov	r0, r4
 8005f46:	f7ff fdc6 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 8005f4a:	b130      	cbz	r0, 8005f5a <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	e09d      	b.n	800608c <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f54:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8005f56:	2001      	movs	r0, #1
 8005f58:	e098      	b.n	800608c <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f5a:	2322      	movs	r3, #34	; 0x22
 8005f5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f60:	2340      	movs	r3, #64	; 0x40
 8005f62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005f6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f6c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005f6e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005f72:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f74:	9701      	str	r7, [sp, #4]
 8005f76:	9500      	str	r5, [sp, #0]
 8005f78:	464b      	mov	r3, r9
 8005f7a:	4642      	mov	r2, r8
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4620      	mov	r0, r4
 8005f80:	f7ff fe1c 	bl	8005bbc <I2C_RequestMemoryRead>
 8005f84:	b970      	cbnz	r0, 8005fa4 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2bff      	cmp	r3, #255	; 0xff
 8005f8c:	d90f      	bls.n	8005fae <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f8e:	22ff      	movs	r2, #255	; 0xff
 8005f90:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f92:	4b44      	ldr	r3, [pc, #272]	; (80060a4 <HAL_I2C_Mem_Read+0x1ac>)
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f7ff fcc2 	bl	8005926 <I2C_TransferConfig>
 8005fa2:	e021      	b.n	8005fe8 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005faa:	4658      	mov	r0, fp
 8005fac:	e06e      	b.n	800608c <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8005fae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005fb0:	b292      	uxth	r2, r2
 8005fb2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fb4:	4b3b      	ldr	r3, [pc, #236]	; (80060a4 <HAL_I2C_Mem_Read+0x1ac>)
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fbc:	b2d2      	uxtb	r2, r2
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f7ff fcb0 	bl	8005926 <I2C_TransferConfig>
 8005fc6:	e00f      	b.n	8005fe8 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8005fc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005fca:	b292      	uxth	r2, r2
 8005fcc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	4631      	mov	r1, r6
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff fca3 	bl	8005926 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005fe0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d034      	beq.n	8006052 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005fe8:	9700      	str	r7, [sp, #0]
 8005fea:	462b      	mov	r3, r5
 8005fec:	2200      	movs	r2, #0
 8005fee:	2104      	movs	r1, #4
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f7ff fd70 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d14d      	bne.n	8006096 <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006000:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006004:	3301      	adds	r3, #1
 8006006:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006008:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800600a:	3a01      	subs	r2, #1
 800600c:	b292      	uxth	r2, r2
 800600e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006010:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29b      	uxth	r3, r3
 8006018:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800601a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0de      	beq.n	8005fe0 <HAL_I2C_Mem_Read+0xe8>
 8006022:	2a00      	cmp	r2, #0
 8006024:	d1dc      	bne.n	8005fe0 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006026:	9700      	str	r7, [sp, #0]
 8006028:	462b      	mov	r3, r5
 800602a:	2180      	movs	r1, #128	; 0x80
 800602c:	4620      	mov	r0, r4
 800602e:	f7ff fd52 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 8006032:	bb90      	cbnz	r0, 800609a <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006034:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	2bff      	cmp	r3, #255	; 0xff
 800603a:	d9c5      	bls.n	8005fc8 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800603c:	22ff      	movs	r2, #255	; 0xff
 800603e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006040:	2300      	movs	r3, #0
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006048:	4631      	mov	r1, r6
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff fc6b 	bl	8005926 <I2C_TransferConfig>
 8006050:	e7c6      	b.n	8005fe0 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006052:	463a      	mov	r2, r7
 8006054:	4629      	mov	r1, r5
 8006056:	4620      	mov	r0, r4
 8006058:	f7ff fdec 	bl	8005c34 <I2C_WaitOnSTOPFlagUntilTimeout>
 800605c:	b9f8      	cbnz	r0, 800609e <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	2220      	movs	r2, #32
 8006062:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006064:	6821      	ldr	r1, [r4, #0]
 8006066:	684b      	ldr	r3, [r1, #4]
 8006068:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800606c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8006070:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8006074:	f023 0301 	bic.w	r3, r3, #1
 8006078:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800607a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800607e:	2300      	movs	r3, #0
 8006080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8006084:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8006088:	e000      	b.n	800608c <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 800608a:	2002      	movs	r0, #2
}
 800608c:	b003      	add	sp, #12
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8006092:	2002      	movs	r0, #2
 8006094:	e7fa      	b.n	800608c <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8006096:	2001      	movs	r0, #1
 8006098:	e7f8      	b.n	800608c <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 800609a:	2001      	movs	r0, #1
 800609c:	e7f6      	b.n	800608c <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 800609e:	2001      	movs	r0, #1
 80060a0:	e7f4      	b.n	800608c <HAL_I2C_Mem_Read+0x194>
 80060a2:	bf00      	nop
 80060a4:	80002400 	.word	0x80002400

080060a8 <HAL_I2C_IsDeviceReady>:
{
 80060a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060ac:	b085      	sub	sp, #20
 80060ae:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b20      	cmp	r3, #32
 80060bc:	f040 80a0 	bne.w	8006200 <HAL_I2C_IsDeviceReady+0x158>
 80060c0:	4606      	mov	r6, r0
 80060c2:	4689      	mov	r9, r1
 80060c4:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80060c6:	6803      	ldr	r3, [r0, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80060ce:	f040 8099 	bne.w	8006204 <HAL_I2C_IsDeviceReady+0x15c>
    __HAL_LOCK(hi2c);
 80060d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	f000 8096 	beq.w	8006208 <HAL_I2C_IsDeviceReady+0x160>
 80060dc:	2301      	movs	r3, #1
 80060de:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80060e2:	2324      	movs	r3, #36	; 0x24
 80060e4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e8:	2300      	movs	r3, #0
 80060ea:	6443      	str	r3, [r0, #68]	; 0x44
 80060ec:	e044      	b.n	8006178 <HAL_I2C_IsDeviceReady+0xd0>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80060ee:	f3c9 0309 	ubfx	r3, r9, #0, #10
 80060f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80060fa:	e046      	b.n	800618a <HAL_I2C_IsDeviceReady+0xe2>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80060fc:	6833      	ldr	r3, [r6, #0]
 80060fe:	699c      	ldr	r4, [r3, #24]
 8006100:	f3c4 1440 	ubfx	r4, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800610a:	b9c4      	cbnz	r4, 800613e <HAL_I2C_IsDeviceReady+0x96>
 800610c:	b9bb      	cbnz	r3, 800613e <HAL_I2C_IsDeviceReady+0x96>
        if (Timeout != HAL_MAX_DELAY)
 800610e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006112:	d0f3      	beq.n	80060fc <HAL_I2C_IsDeviceReady+0x54>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006114:	f7ff fa9a 	bl	800564c <HAL_GetTick>
 8006118:	1bc0      	subs	r0, r0, r7
 800611a:	42a8      	cmp	r0, r5
 800611c:	d801      	bhi.n	8006122 <HAL_I2C_IsDeviceReady+0x7a>
 800611e:	2d00      	cmp	r5, #0
 8006120:	d1ec      	bne.n	80060fc <HAL_I2C_IsDeviceReady+0x54>
            hi2c->State = HAL_I2C_STATE_READY;
 8006122:	2320      	movs	r3, #32
 8006124:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006128:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800612a:	f043 0320 	orr.w	r3, r3, #32
 800612e:	6473      	str	r3, [r6, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8006130:	2300      	movs	r3, #0
 8006132:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
            return HAL_ERROR;
 8006136:	2001      	movs	r0, #1
}
 8006138:	b005      	add	sp, #20
 800613a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800613e:	6833      	ldr	r3, [r6, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	f013 0f10 	tst.w	r3, #16
 8006146:	d02d      	beq.n	80061a4 <HAL_I2C_IsDeviceReady+0xfc>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8006148:	9700      	str	r7, [sp, #0]
 800614a:	462b      	mov	r3, r5
 800614c:	2200      	movs	r2, #0
 800614e:	2120      	movs	r1, #32
 8006150:	4630      	mov	r0, r6
 8006152:	f7ff fcc0 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 8006156:	2800      	cmp	r0, #0
 8006158:	d15a      	bne.n	8006210 <HAL_I2C_IsDeviceReady+0x168>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800615a:	6833      	ldr	r3, [r6, #0]
 800615c:	2210      	movs	r2, #16
 800615e:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	2220      	movs	r2, #32
 8006164:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	4543      	cmp	r3, r8
 800616a:	d02c      	beq.n	80061c6 <HAL_I2C_IsDeviceReady+0x11e>
      I2C_Trials++;
 800616c:	9b03      	ldr	r3, [sp, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	4543      	cmp	r3, r8
 8006176:	d237      	bcs.n	80061e8 <HAL_I2C_IsDeviceReady+0x140>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8006178:	68f3      	ldr	r3, [r6, #12]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d0b7      	beq.n	80060ee <HAL_I2C_IsDeviceReady+0x46>
 800617e:	f3c9 0309 	ubfx	r3, r9, #0, #10
 8006182:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006186:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800618a:	6832      	ldr	r2, [r6, #0]
 800618c:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800618e:	f7ff fa5d 	bl	800564c <HAL_GetTick>
 8006192:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8006194:	6833      	ldr	r3, [r6, #0]
 8006196:	699c      	ldr	r4, [r3, #24]
 8006198:	f3c4 1440 	ubfx	r4, r4, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80061a2:	e7b2      	b.n	800610a <HAL_I2C_IsDeviceReady+0x62>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80061a4:	9700      	str	r7, [sp, #0]
 80061a6:	462b      	mov	r3, r5
 80061a8:	2200      	movs	r2, #0
 80061aa:	2120      	movs	r1, #32
 80061ac:	4630      	mov	r0, r6
 80061ae:	f7ff fc92 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 80061b2:	bb58      	cbnz	r0, 800620c <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b4:	6832      	ldr	r2, [r6, #0]
 80061b6:	2320      	movs	r3, #32
 80061b8:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80061ba:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80061be:	2300      	movs	r3, #0
 80061c0:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_OK;
 80061c4:	e7b8      	b.n	8006138 <HAL_I2C_IsDeviceReady+0x90>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061c6:	6832      	ldr	r2, [r6, #0]
 80061c8:	6853      	ldr	r3, [r2, #4]
 80061ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ce:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80061d0:	9700      	str	r7, [sp, #0]
 80061d2:	462b      	mov	r3, r5
 80061d4:	2200      	movs	r2, #0
 80061d6:	2120      	movs	r1, #32
 80061d8:	4630      	mov	r0, r6
 80061da:	f7ff fc7c 	bl	8005ad6 <I2C_WaitOnFlagUntilTimeout>
 80061de:	b9c8      	cbnz	r0, 8006214 <HAL_I2C_IsDeviceReady+0x16c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061e0:	6833      	ldr	r3, [r6, #0]
 80061e2:	2220      	movs	r2, #32
 80061e4:	61da      	str	r2, [r3, #28]
 80061e6:	e7c1      	b.n	800616c <HAL_I2C_IsDeviceReady+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 80061e8:	2320      	movs	r3, #32
 80061ea:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061ee:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80061f0:	f043 0320 	orr.w	r3, r3, #32
 80061f4:	6473      	str	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80061f6:	2300      	movs	r3, #0
 80061f8:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 80061fc:	2001      	movs	r0, #1
 80061fe:	e79b      	b.n	8006138 <HAL_I2C_IsDeviceReady+0x90>
    return HAL_BUSY;
 8006200:	2002      	movs	r0, #2
 8006202:	e799      	b.n	8006138 <HAL_I2C_IsDeviceReady+0x90>
      return HAL_BUSY;
 8006204:	2002      	movs	r0, #2
 8006206:	e797      	b.n	8006138 <HAL_I2C_IsDeviceReady+0x90>
    __HAL_LOCK(hi2c);
 8006208:	2002      	movs	r0, #2
 800620a:	e795      	b.n	8006138 <HAL_I2C_IsDeviceReady+0x90>
          return HAL_ERROR;
 800620c:	2001      	movs	r0, #1
 800620e:	e793      	b.n	8006138 <HAL_I2C_IsDeviceReady+0x90>
          return HAL_ERROR;
 8006210:	2001      	movs	r0, #1
 8006212:	e791      	b.n	8006138 <HAL_I2C_IsDeviceReady+0x90>
          return HAL_ERROR;
 8006214:	2001      	movs	r0, #1
 8006216:	e78f      	b.n	8006138 <HAL_I2C_IsDeviceReady+0x90>

08006218 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006218:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800621a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	2a20      	cmp	r2, #32
 8006222:	d123      	bne.n	800626c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006224:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006228:	2a01      	cmp	r2, #1
 800622a:	d021      	beq.n	8006270 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800622c:	2201      	movs	r2, #1
 800622e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006232:	2224      	movs	r2, #36	; 0x24
 8006234:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006238:	6800      	ldr	r0, [r0, #0]
 800623a:	6802      	ldr	r2, [r0, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	6802      	ldr	r2, [r0, #0]
 8006246:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800624a:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	6802      	ldr	r2, [r0, #0]
 8006250:	4311      	orrs	r1, r2
 8006252:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006254:	6819      	ldr	r1, [r3, #0]
 8006256:	680a      	ldr	r2, [r1, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006264:	2000      	movs	r0, #0
 8006266:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 800626a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800626c:	2002      	movs	r0, #2
 800626e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006270:	2002      	movs	r0, #2
  }
}
 8006272:	4770      	bx	lr

08006274 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006274:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006276:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	2a20      	cmp	r2, #32
 800627e:	d121      	bne.n	80062c4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006280:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006284:	2a01      	cmp	r2, #1
 8006286:	d01f      	beq.n	80062c8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8006288:	2201      	movs	r2, #1
 800628a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800628e:	2224      	movs	r2, #36	; 0x24
 8006290:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006294:	6800      	ldr	r0, [r0, #0]
 8006296:	6802      	ldr	r2, [r0, #0]
 8006298:	f022 0201 	bic.w	r2, r2, #1
 800629c:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062a2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062aa:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062ac:	6819      	ldr	r1, [r3, #0]
 80062ae:	680a      	ldr	r2, [r1, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062bc:	2000      	movs	r0, #0
 80062be:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80062c2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80062c4:	2002      	movs	r0, #2
 80062c6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80062c8:	2002      	movs	r0, #2
  }
}
 80062ca:	4770      	bx	lr

080062cc <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062cc:	2800      	cmp	r0, #0
 80062ce:	f000 82ff 	beq.w	80068d0 <HAL_RCC_OscConfig+0x604>
{
 80062d2:	b570      	push	{r4, r5, r6, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062d8:	6803      	ldr	r3, [r0, #0]
 80062da:	f013 0f01 	tst.w	r3, #1
 80062de:	d03b      	beq.n	8006358 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80062e0:	4bb4      	ldr	r3, [pc, #720]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 030c 	and.w	r3, r3, #12
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d01e      	beq.n	800632a <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80062ec:	4bb1      	ldr	r3, [pc, #708]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f003 030c 	and.w	r3, r3, #12
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d013      	beq.n	8006320 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fe:	d068      	beq.n	80063d2 <HAL_RCC_OscConfig+0x106>
 8006300:	2b00      	cmp	r3, #0
 8006302:	f040 8092 	bne.w	800642a <HAL_RCC_OscConfig+0x15e>
 8006306:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800630a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800631c:	601a      	str	r2, [r3, #0]
 800631e:	e05d      	b.n	80063dc <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006320:	4ba4      	ldr	r3, [pc, #656]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006328:	d0e6      	beq.n	80062f8 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800632e:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006332:	4ba0      	ldr	r3, [pc, #640]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 8006334:	6819      	ldr	r1, [r3, #0]
 8006336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800633a:	fa93 f3a3 	rbit	r3, r3
 800633e:	fab3 f383 	clz	r3, r3
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	2201      	movs	r2, #1
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	420b      	tst	r3, r1
 800634e:	d003      	beq.n	8006358 <HAL_RCC_OscConfig+0x8c>
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f000 82be 	beq.w	80068d4 <HAL_RCC_OscConfig+0x608>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	f013 0f02 	tst.w	r3, #2
 800635e:	f000 80c4 	beq.w	80064ea <HAL_RCC_OscConfig+0x21e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006362:	4b94      	ldr	r3, [pc, #592]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f013 0f0c 	tst.w	r3, #12
 800636a:	f000 809c 	beq.w	80064a6 <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800636e:	4b91      	ldr	r3, [pc, #580]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 030c 	and.w	r3, r3, #12
 8006376:	2b08      	cmp	r3, #8
 8006378:	f000 808f 	beq.w	800649a <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800637c:	6923      	ldr	r3, [r4, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80f0 	beq.w	8006564 <HAL_RCC_OscConfig+0x298>
 8006384:	2201      	movs	r2, #1
 8006386:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800638a:	fab3 f383 	clz	r3, r3
 800638e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006392:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639a:	f7ff f957 	bl	800564c <HAL_GetTick>
 800639e:	4605      	mov	r5, r0
 80063a0:	2302      	movs	r3, #2
 80063a2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063a6:	4b83      	ldr	r3, [pc, #524]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 80063a8:	6819      	ldr	r1, [r3, #0]
 80063aa:	2302      	movs	r3, #2
 80063ac:	fa93 f3a3 	rbit	r3, r3
 80063b0:	fab3 f383 	clz	r3, r3
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2201      	movs	r2, #1
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	420b      	tst	r3, r1
 80063c0:	f040 80c2 	bne.w	8006548 <HAL_RCC_OscConfig+0x27c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c4:	f7ff f942 	bl	800564c <HAL_GetTick>
 80063c8:	1b40      	subs	r0, r0, r5
 80063ca:	2802      	cmp	r0, #2
 80063cc:	d9e8      	bls.n	80063a0 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80063ce:	2003      	movs	r0, #3
 80063d0:	e289      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d2:	4a78      	ldr	r2, [pc, #480]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 80063d4:	6813      	ldr	r3, [r2, #0]
 80063d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063da:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063dc:	4a75      	ldr	r2, [pc, #468]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 80063de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80063e0:	f023 030f 	bic.w	r3, r3, #15
 80063e4:	68a1      	ldr	r1, [r4, #8]
 80063e6:	430b      	orrs	r3, r1
 80063e8:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063ea:	6863      	ldr	r3, [r4, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d036      	beq.n	800645e <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80063f0:	f7ff f92c 	bl	800564c <HAL_GetTick>
 80063f4:	4605      	mov	r5, r0
 80063f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063fa:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063fe:	4b6d      	ldr	r3, [pc, #436]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 8006400:	6819      	ldr	r1, [r3, #0]
 8006402:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006406:	fa93 f3a3 	rbit	r3, r3
 800640a:	fab3 f383 	clz	r3, r3
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2201      	movs	r2, #1
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	420b      	tst	r3, r1
 800641a:	d19d      	bne.n	8006358 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800641c:	f7ff f916 	bl	800564c <HAL_GetTick>
 8006420:	1b40      	subs	r0, r0, r5
 8006422:	2864      	cmp	r0, #100	; 0x64
 8006424:	d9e7      	bls.n	80063f6 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8006426:	2003      	movs	r0, #3
 8006428:	e25d      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800642a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800642e:	d009      	beq.n	8006444 <HAL_RCC_OscConfig+0x178>
 8006430:	4b60      	ldr	r3, [pc, #384]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	e7cb      	b.n	80063dc <HAL_RCC_OscConfig+0x110>
 8006444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006448:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e7be      	b.n	80063dc <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 800645e:	f7ff f8f5 	bl	800564c <HAL_GetTick>
 8006462:	4605      	mov	r5, r0
 8006464:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006468:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800646c:	4b51      	ldr	r3, [pc, #324]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 800646e:	6819      	ldr	r1, [r3, #0]
 8006470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006474:	fa93 f3a3 	rbit	r3, r3
 8006478:	fab3 f383 	clz	r3, r3
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	2201      	movs	r2, #1
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	420b      	tst	r3, r1
 8006488:	f43f af66 	beq.w	8006358 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800648c:	f7ff f8de 	bl	800564c <HAL_GetTick>
 8006490:	1b40      	subs	r0, r0, r5
 8006492:	2864      	cmp	r0, #100	; 0x64
 8006494:	d9e6      	bls.n	8006464 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8006496:	2003      	movs	r0, #3
 8006498:	e225      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800649a:	4b46      	ldr	r3, [pc, #280]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80064a2:	f47f af6b 	bne.w	800637c <HAL_RCC_OscConfig+0xb0>
 80064a6:	2302      	movs	r3, #2
 80064a8:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ac:	4b41      	ldr	r3, [pc, #260]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	2302      	movs	r3, #2
 80064b2:	fa93 f3a3 	rbit	r3, r3
 80064b6:	fab3 f383 	clz	r3, r3
 80064ba:	f003 031f 	and.w	r3, r3, #31
 80064be:	2201      	movs	r2, #1
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	420b      	tst	r3, r1
 80064c6:	d003      	beq.n	80064d0 <HAL_RCC_OscConfig+0x204>
 80064c8:	6923      	ldr	r3, [r4, #16]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	f040 8204 	bne.w	80068d8 <HAL_RCC_OscConfig+0x60c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d0:	4838      	ldr	r0, [pc, #224]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 80064d2:	6803      	ldr	r3, [r0, #0]
 80064d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80064d8:	6961      	ldr	r1, [r4, #20]
 80064da:	22f8      	movs	r2, #248	; 0xf8
 80064dc:	fa92 f2a2 	rbit	r2, r2
 80064e0:	fab2 f282 	clz	r2, r2
 80064e4:	4091      	lsls	r1, r2
 80064e6:	430b      	orrs	r3, r1
 80064e8:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	f013 0f08 	tst.w	r3, #8
 80064f0:	f000 808c 	beq.w	800660c <HAL_RCC_OscConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80064f4:	69a3      	ldr	r3, [r4, #24]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d060      	beq.n	80065bc <HAL_RCC_OscConfig+0x2f0>
 80064fa:	2101      	movs	r1, #1
 80064fc:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006500:	fab2 f282 	clz	r2, r2
 8006504:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <HAL_RCC_OscConfig+0x2ec>)
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800650c:	f7ff f89e 	bl	800564c <HAL_GetTick>
 8006510:	4605      	mov	r5, r0
 8006512:	2302      	movs	r3, #2
 8006514:	fa93 f2a3 	rbit	r2, r3
 8006518:	fa93 f2a3 	rbit	r2, r3
 800651c:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006520:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 8006522:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8006524:	fa93 f3a3 	rbit	r3, r3
 8006528:	fab3 f383 	clz	r3, r3
 800652c:	f003 031f 	and.w	r3, r3, #31
 8006530:	2201      	movs	r2, #1
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	420b      	tst	r3, r1
 8006538:	d168      	bne.n	800660c <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800653a:	f7ff f887 	bl	800564c <HAL_GetTick>
 800653e:	1b40      	subs	r0, r0, r5
 8006540:	2802      	cmp	r0, #2
 8006542:	d9e6      	bls.n	8006512 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006544:	2003      	movs	r0, #3
 8006546:	e1ce      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006548:	481a      	ldr	r0, [pc, #104]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 800654a:	6803      	ldr	r3, [r0, #0]
 800654c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006550:	6961      	ldr	r1, [r4, #20]
 8006552:	22f8      	movs	r2, #248	; 0xf8
 8006554:	fa92 f2a2 	rbit	r2, r2
 8006558:	fab2 f282 	clz	r2, r2
 800655c:	4091      	lsls	r1, r2
 800655e:	430b      	orrs	r3, r1
 8006560:	6003      	str	r3, [r0, #0]
 8006562:	e7c2      	b.n	80064ea <HAL_RCC_OscConfig+0x21e>
 8006564:	2301      	movs	r3, #1
 8006566:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 800656a:	fab3 f383 	clz	r3, r3
 800656e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006572:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800657c:	f7ff f866 	bl	800564c <HAL_GetTick>
 8006580:	4605      	mov	r5, r0
 8006582:	2302      	movs	r3, #2
 8006584:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <HAL_RCC_OscConfig+0x2e8>)
 800658a:	6819      	ldr	r1, [r3, #0]
 800658c:	2302      	movs	r3, #2
 800658e:	fa93 f3a3 	rbit	r3, r3
 8006592:	fab3 f383 	clz	r3, r3
 8006596:	f003 031f 	and.w	r3, r3, #31
 800659a:	2201      	movs	r2, #1
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	420b      	tst	r3, r1
 80065a2:	d0a2      	beq.n	80064ea <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065a4:	f7ff f852 	bl	800564c <HAL_GetTick>
 80065a8:	1b40      	subs	r0, r0, r5
 80065aa:	2802      	cmp	r0, #2
 80065ac:	d9e9      	bls.n	8006582 <HAL_RCC_OscConfig+0x2b6>
            return HAL_TIMEOUT;
 80065ae:	2003      	movs	r0, #3
 80065b0:	e199      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
 80065b8:	10908120 	.word	0x10908120
 80065bc:	2201      	movs	r2, #1
 80065be:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c2:	fab2 f282 	clz	r2, r2
 80065c6:	4bb7      	ldr	r3, [pc, #732]	; (80068a4 <HAL_RCC_OscConfig+0x5d8>)
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	2200      	movs	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d0:	f7ff f83c 	bl	800564c <HAL_GetTick>
 80065d4:	4605      	mov	r5, r0
 80065d6:	2302      	movs	r3, #2
 80065d8:	fa93 f2a3 	rbit	r2, r3
 80065dc:	fa93 f2a3 	rbit	r2, r3
 80065e0:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e4:	4ab0      	ldr	r2, [pc, #704]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 80065e6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80065e8:	fa93 f3a3 	rbit	r3, r3
 80065ec:	fab3 f383 	clz	r3, r3
 80065f0:	f003 031f 	and.w	r3, r3, #31
 80065f4:	2201      	movs	r2, #1
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	420b      	tst	r3, r1
 80065fc:	d006      	beq.n	800660c <HAL_RCC_OscConfig+0x340>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065fe:	f7ff f825 	bl	800564c <HAL_GetTick>
 8006602:	1b40      	subs	r0, r0, r5
 8006604:	2802      	cmp	r0, #2
 8006606:	d9e6      	bls.n	80065d6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8006608:	2003      	movs	r0, #3
 800660a:	e16c      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	f013 0f04 	tst.w	r3, #4
 8006612:	f000 80a9 	beq.w	8006768 <HAL_RCC_OscConfig+0x49c>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006616:	4ba4      	ldr	r3, [pc, #656]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800661e:	d120      	bne.n	8006662 <HAL_RCC_OscConfig+0x396>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006620:	4ba1      	ldr	r3, [pc, #644]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 8006622:	69da      	ldr	r2, [r3, #28]
 8006624:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006628:	61da      	str	r2, [r3, #28]
 800662a:	69db      	ldr	r3, [r3, #28]
 800662c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006634:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006636:	4b9d      	ldr	r3, [pc, #628]	; (80068ac <HAL_RCC_OscConfig+0x5e0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800663e:	d012      	beq.n	8006666 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006640:	68e3      	ldr	r3, [r4, #12]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d023      	beq.n	800668e <HAL_RCC_OscConfig+0x3c2>
 8006646:	bb73      	cbnz	r3, 80066a6 <HAL_RCC_OscConfig+0x3da>
 8006648:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800664c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8006650:	6a1a      	ldr	r2, [r3, #32]
 8006652:	f022 0201 	bic.w	r2, r2, #1
 8006656:	621a      	str	r2, [r3, #32]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	f022 0204 	bic.w	r2, r2, #4
 800665e:	621a      	str	r2, [r3, #32]
 8006660:	e01a      	b.n	8006698 <HAL_RCC_OscConfig+0x3cc>
    FlagStatus       pwrclkchanged = RESET;
 8006662:	2500      	movs	r5, #0
 8006664:	e7e7      	b.n	8006636 <HAL_RCC_OscConfig+0x36a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006666:	4a91      	ldr	r2, [pc, #580]	; (80068ac <HAL_RCC_OscConfig+0x5e0>)
 8006668:	6813      	ldr	r3, [r2, #0]
 800666a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006670:	f7fe ffec 	bl	800564c <HAL_GetTick>
 8006674:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006676:	4b8d      	ldr	r3, [pc, #564]	; (80068ac <HAL_RCC_OscConfig+0x5e0>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800667e:	d1df      	bne.n	8006640 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006680:	f7fe ffe4 	bl	800564c <HAL_GetTick>
 8006684:	1b80      	subs	r0, r0, r6
 8006686:	2864      	cmp	r0, #100	; 0x64
 8006688:	d9f5      	bls.n	8006676 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 800668a:	2003      	movs	r0, #3
 800668c:	e12b      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800668e:	4a86      	ldr	r2, [pc, #536]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 8006690:	6a13      	ldr	r3, [r2, #32]
 8006692:	f043 0301 	orr.w	r3, r3, #1
 8006696:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006698:	68e3      	ldr	r3, [r4, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d03c      	beq.n	8006718 <HAL_RCC_OscConfig+0x44c>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800669e:	f7fe ffd5 	bl	800564c <HAL_GetTick>
 80066a2:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a4:	e02b      	b.n	80066fe <HAL_RCC_OscConfig+0x432>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	d009      	beq.n	80066be <HAL_RCC_OscConfig+0x3f2>
 80066aa:	4b7f      	ldr	r3, [pc, #508]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 80066ac:	6a1a      	ldr	r2, [r3, #32]
 80066ae:	f022 0201 	bic.w	r2, r2, #1
 80066b2:	621a      	str	r2, [r3, #32]
 80066b4:	6a1a      	ldr	r2, [r3, #32]
 80066b6:	f022 0204 	bic.w	r2, r2, #4
 80066ba:	621a      	str	r2, [r3, #32]
 80066bc:	e7ec      	b.n	8006698 <HAL_RCC_OscConfig+0x3cc>
 80066be:	4b7a      	ldr	r3, [pc, #488]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 80066c0:	6a1a      	ldr	r2, [r3, #32]
 80066c2:	f042 0204 	orr.w	r2, r2, #4
 80066c6:	621a      	str	r2, [r3, #32]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	f042 0201 	orr.w	r2, r2, #1
 80066ce:	621a      	str	r2, [r3, #32]
 80066d0:	e7e2      	b.n	8006698 <HAL_RCC_OscConfig+0x3cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d2:	4b75      	ldr	r3, [pc, #468]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 80066d4:	6a19      	ldr	r1, [r3, #32]
 80066d6:	2302      	movs	r3, #2
 80066d8:	fa93 f3a3 	rbit	r3, r3
 80066dc:	fab3 f383 	clz	r3, r3
 80066e0:	f003 031f 	and.w	r3, r3, #31
 80066e4:	2201      	movs	r2, #1
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	4219      	tst	r1, r3
 80066ec:	d13b      	bne.n	8006766 <HAL_RCC_OscConfig+0x49a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066ee:	f7fe ffad 	bl	800564c <HAL_GetTick>
 80066f2:	1b80      	subs	r0, r0, r6
 80066f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80066f8:	4298      	cmp	r0, r3
 80066fa:	f200 80ef 	bhi.w	80068dc <HAL_RCC_OscConfig+0x610>
 80066fe:	2302      	movs	r3, #2
 8006700:	fa93 f2a3 	rbit	r2, r3
 8006704:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e2      	bne.n	80066d2 <HAL_RCC_OscConfig+0x406>
 800670c:	2302      	movs	r3, #2
 800670e:	fa93 f3a3 	rbit	r3, r3
 8006712:	4b65      	ldr	r3, [pc, #404]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 8006714:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006716:	e7de      	b.n	80066d6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006718:	f7fe ff98 	bl	800564c <HAL_GetTick>
 800671c:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800671e:	e015      	b.n	800674c <HAL_RCC_OscConfig+0x480>
 8006720:	4b61      	ldr	r3, [pc, #388]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 8006722:	6a19      	ldr	r1, [r3, #32]
 8006724:	2302      	movs	r3, #2
 8006726:	fa93 f3a3 	rbit	r3, r3
 800672a:	fab3 f383 	clz	r3, r3
 800672e:	f003 031f 	and.w	r3, r3, #31
 8006732:	2201      	movs	r2, #1
 8006734:	fa02 f303 	lsl.w	r3, r2, r3
 8006738:	4219      	tst	r1, r3
 800673a:	d014      	beq.n	8006766 <HAL_RCC_OscConfig+0x49a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f7fe ff86 	bl	800564c <HAL_GetTick>
 8006740:	1b80      	subs	r0, r0, r6
 8006742:	f241 3388 	movw	r3, #5000	; 0x1388
 8006746:	4298      	cmp	r0, r3
 8006748:	f200 80ca 	bhi.w	80068e0 <HAL_RCC_OscConfig+0x614>
 800674c:	2302      	movs	r3, #2
 800674e:	fa93 f2a3 	rbit	r2, r3
 8006752:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e2      	bne.n	8006720 <HAL_RCC_OscConfig+0x454>
 800675a:	2302      	movs	r3, #2
 800675c:	fa93 f3a3 	rbit	r3, r3
 8006760:	4b51      	ldr	r3, [pc, #324]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 8006762:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006764:	e7de      	b.n	8006724 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006766:	bbb5      	cbnz	r5, 80067d6 <HAL_RCC_OscConfig+0x50a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006768:	69e3      	ldr	r3, [r4, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80ba 	beq.w	80068e4 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006770:	4a4d      	ldr	r2, [pc, #308]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 8006772:	6852      	ldr	r2, [r2, #4]
 8006774:	f002 020c 	and.w	r2, r2, #12
 8006778:	2a08      	cmp	r2, #8
 800677a:	f000 8099 	beq.w	80068b0 <HAL_RCC_OscConfig+0x5e4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800677e:	2b02      	cmp	r3, #2
 8006780:	d02f      	beq.n	80067e2 <HAL_RCC_OscConfig+0x516>
 8006782:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006786:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678a:	fab3 f383 	clz	r3, r3
 800678e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006792:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679c:	f7fe ff56 	bl	800564c <HAL_GetTick>
 80067a0:	4604      	mov	r4, r0
 80067a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067a6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067aa:	4b3f      	ldr	r3, [pc, #252]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 80067ac:	6819      	ldr	r1, [r3, #0]
 80067ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067b2:	fa93 f3a3 	rbit	r3, r3
 80067b6:	fab3 f383 	clz	r3, r3
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2201      	movs	r2, #1
 80067c0:	fa02 f303 	lsl.w	r3, r2, r3
 80067c4:	4219      	tst	r1, r3
 80067c6:	d06b      	beq.n	80068a0 <HAL_RCC_OscConfig+0x5d4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c8:	f7fe ff40 	bl	800564c <HAL_GetTick>
 80067cc:	1b00      	subs	r0, r0, r4
 80067ce:	2802      	cmp	r0, #2
 80067d0:	d9e7      	bls.n	80067a2 <HAL_RCC_OscConfig+0x4d6>
          {
            return HAL_TIMEOUT;
 80067d2:	2003      	movs	r0, #3
 80067d4:	e087      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80067d6:	4a34      	ldr	r2, [pc, #208]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 80067d8:	69d3      	ldr	r3, [r2, #28]
 80067da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067de:	61d3      	str	r3, [r2, #28]
 80067e0:	e7c2      	b.n	8006768 <HAL_RCC_OscConfig+0x49c>
 80067e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067e6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80067ea:	fab3 f383 	clz	r3, r3
 80067ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80067f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80067fc:	f7fe ff26 	bl	800564c <HAL_GetTick>
 8006800:	4605      	mov	r5, r0
 8006802:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006806:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800680a:	4b27      	ldr	r3, [pc, #156]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 800680c:	6819      	ldr	r1, [r3, #0]
 800680e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006812:	fa93 f3a3 	rbit	r3, r3
 8006816:	fab3 f383 	clz	r3, r3
 800681a:	f003 031f 	and.w	r3, r3, #31
 800681e:	2201      	movs	r2, #1
 8006820:	fa02 f303 	lsl.w	r3, r2, r3
 8006824:	4219      	tst	r1, r3
 8006826:	d006      	beq.n	8006836 <HAL_RCC_OscConfig+0x56a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006828:	f7fe ff10 	bl	800564c <HAL_GetTick>
 800682c:	1b40      	subs	r0, r0, r5
 800682e:	2802      	cmp	r0, #2
 8006830:	d9e7      	bls.n	8006802 <HAL_RCC_OscConfig+0x536>
            return HAL_TIMEOUT;
 8006832:	2003      	movs	r0, #3
 8006834:	e057      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006836:	491c      	ldr	r1, [pc, #112]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 8006838:	684b      	ldr	r3, [r1, #4]
 800683a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800683e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006840:	6a20      	ldr	r0, [r4, #32]
 8006842:	4302      	orrs	r2, r0
 8006844:	4313      	orrs	r3, r2
 8006846:	604b      	str	r3, [r1, #4]
 8006848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800684c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8006850:	fab3 f383 	clz	r3, r3
 8006854:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006858:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	2201      	movs	r2, #1
 8006860:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006862:	f7fe fef3 	bl	800564c <HAL_GetTick>
 8006866:	4604      	mov	r4, r0
 8006868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800686c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006870:	4b0d      	ldr	r3, [pc, #52]	; (80068a8 <HAL_RCC_OscConfig+0x5dc>)
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006878:	fa93 f3a3 	rbit	r3, r3
 800687c:	fab3 f383 	clz	r3, r3
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	2201      	movs	r2, #1
 8006886:	fa02 f303 	lsl.w	r3, r2, r3
 800688a:	4219      	tst	r1, r3
 800688c:	d106      	bne.n	800689c <HAL_RCC_OscConfig+0x5d0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800688e:	f7fe fedd 	bl	800564c <HAL_GetTick>
 8006892:	1b00      	subs	r0, r0, r4
 8006894:	2802      	cmp	r0, #2
 8006896:	d9e7      	bls.n	8006868 <HAL_RCC_OscConfig+0x59c>
            return HAL_TIMEOUT;
 8006898:	2003      	movs	r0, #3
 800689a:	e024      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800689c:	2000      	movs	r0, #0
 800689e:	e022      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
 80068a0:	2000      	movs	r0, #0
 80068a2:	e020      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
 80068a4:	10908120 	.word	0x10908120
 80068a8:	40021000 	.word	0x40021000
 80068ac:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d01a      	beq.n	80068ea <HAL_RCC_OscConfig+0x61e>
        pll_config = RCC->CFGR;
 80068b4:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <HAL_RCC_OscConfig+0x62c>)
 80068b6:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80068b8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80068bc:	6a22      	ldr	r2, [r4, #32]
 80068be:	4291      	cmp	r1, r2
 80068c0:	d115      	bne.n	80068ee <HAL_RCC_OscConfig+0x622>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80068c2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80068c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d112      	bne.n	80068f2 <HAL_RCC_OscConfig+0x626>
  return HAL_OK;
 80068cc:	2000      	movs	r0, #0
 80068ce:	e00a      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
    return HAL_ERROR;
 80068d0:	2001      	movs	r0, #1
}
 80068d2:	4770      	bx	lr
        return HAL_ERROR;
 80068d4:	2001      	movs	r0, #1
 80068d6:	e006      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
        return HAL_ERROR;
 80068d8:	2001      	movs	r0, #1
 80068da:	e004      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
          return HAL_TIMEOUT;
 80068dc:	2003      	movs	r0, #3
 80068de:	e002      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
          return HAL_TIMEOUT;
 80068e0:	2003      	movs	r0, #3
 80068e2:	e000      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
  return HAL_OK;
 80068e4:	2000      	movs	r0, #0
}
 80068e6:	b002      	add	sp, #8
 80068e8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80068ea:	2001      	movs	r0, #1
 80068ec:	e7fb      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
          return HAL_ERROR;
 80068ee:	2001      	movs	r0, #1
 80068f0:	e7f9      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
 80068f2:	2001      	movs	r0, #1
 80068f4:	e7f7      	b.n	80068e6 <HAL_RCC_OscConfig+0x61a>
 80068f6:	bf00      	nop
 80068f8:	40021000 	.word	0x40021000

080068fc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80068fc:	4b16      	ldr	r3, [pc, #88]	; (8006958 <HAL_RCC_GetSysClockFreq+0x5c>)
 80068fe:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006900:	f003 020c 	and.w	r2, r3, #12
 8006904:	2a08      	cmp	r2, #8
 8006906:	d001      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006908:	4814      	ldr	r0, [pc, #80]	; (800695c <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800690a:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800690c:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8006910:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006914:	fa92 f2a2 	rbit	r2, r2
 8006918:	fab2 f282 	clz	r2, r2
 800691c:	fa21 f202 	lsr.w	r2, r1, r2
 8006920:	490f      	ldr	r1, [pc, #60]	; (8006960 <HAL_RCC_GetSysClockFreq+0x64>)
 8006922:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006924:	4a0c      	ldr	r2, [pc, #48]	; (8006958 <HAL_RCC_GetSysClockFreq+0x5c>)
 8006926:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006928:	f002 020f 	and.w	r2, r2, #15
 800692c:	210f      	movs	r1, #15
 800692e:	fa91 f1a1 	rbit	r1, r1
 8006932:	fab1 f181 	clz	r1, r1
 8006936:	40ca      	lsrs	r2, r1
 8006938:	490a      	ldr	r1, [pc, #40]	; (8006964 <HAL_RCC_GetSysClockFreq+0x68>)
 800693a:	5c8a      	ldrb	r2, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800693c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006940:	d005      	beq.n	800694e <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_RCC_GetSysClockFreq+0x60>)
 8006944:	fbb3 f3f2 	udiv	r3, r3, r2
 8006948:	fb03 f000 	mul.w	r0, r3, r0
 800694c:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800694e:	4b06      	ldr	r3, [pc, #24]	; (8006968 <HAL_RCC_GetSysClockFreq+0x6c>)
 8006950:	fb03 f000 	mul.w	r0, r3, r0
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	40021000 	.word	0x40021000
 800695c:	007a1200 	.word	0x007a1200
 8006960:	0800ce98 	.word	0x0800ce98
 8006964:	0800cea8 	.word	0x0800cea8
 8006968:	003d0900 	.word	0x003d0900

0800696c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800696c:	2800      	cmp	r0, #0
 800696e:	f000 80be 	beq.w	8006aee <HAL_RCC_ClockConfig+0x182>
{
 8006972:	b570      	push	{r4, r5, r6, lr}
 8006974:	460d      	mov	r5, r1
 8006976:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006978:	4b61      	ldr	r3, [pc, #388]	; (8006b00 <HAL_RCC_ClockConfig+0x194>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	428b      	cmp	r3, r1
 8006982:	d20b      	bcs.n	800699c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006984:	4a5e      	ldr	r2, [pc, #376]	; (8006b00 <HAL_RCC_ClockConfig+0x194>)
 8006986:	6813      	ldr	r3, [r2, #0]
 8006988:	f023 0307 	bic.w	r3, r3, #7
 800698c:	430b      	orrs	r3, r1
 800698e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006990:	6813      	ldr	r3, [r2, #0]
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	428b      	cmp	r3, r1
 8006998:	f040 80ab 	bne.w	8006af2 <HAL_RCC_ClockConfig+0x186>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	f013 0f02 	tst.w	r3, #2
 80069a2:	d006      	beq.n	80069b2 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a4:	4a57      	ldr	r2, [pc, #348]	; (8006b04 <HAL_RCC_ClockConfig+0x198>)
 80069a6:	6853      	ldr	r3, [r2, #4]
 80069a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ac:	68a1      	ldr	r1, [r4, #8]
 80069ae:	430b      	orrs	r3, r1
 80069b0:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	f013 0f01 	tst.w	r3, #1
 80069b8:	d05a      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x104>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d02d      	beq.n	8006a1c <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d040      	beq.n	8006a46 <HAL_RCC_ClockConfig+0xda>
 80069c4:	2202      	movs	r2, #2
 80069c6:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ca:	4a4e      	ldr	r2, [pc, #312]	; (8006b04 <HAL_RCC_ClockConfig+0x198>)
 80069cc:	6810      	ldr	r0, [r2, #0]
 80069ce:	2202      	movs	r2, #2
 80069d0:	fa92 f2a2 	rbit	r2, r2
 80069d4:	fab2 f282 	clz	r2, r2
 80069d8:	f002 021f 	and.w	r2, r2, #31
 80069dc:	2101      	movs	r1, #1
 80069de:	fa01 f202 	lsl.w	r2, r1, r2
 80069e2:	4210      	tst	r0, r2
 80069e4:	f000 8087 	beq.w	8006af6 <HAL_RCC_ClockConfig+0x18a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069e8:	4946      	ldr	r1, [pc, #280]	; (8006b04 <HAL_RCC_ClockConfig+0x198>)
 80069ea:	684a      	ldr	r2, [r1, #4]
 80069ec:	f022 0203 	bic.w	r2, r2, #3
 80069f0:	4313      	orrs	r3, r2
 80069f2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80069f4:	f7fe fe2a 	bl	800564c <HAL_GetTick>
 80069f8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fa:	4b42      	ldr	r3, [pc, #264]	; (8006b04 <HAL_RCC_ClockConfig+0x198>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f003 030c 	and.w	r3, r3, #12
 8006a02:	6862      	ldr	r2, [r4, #4]
 8006a04:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006a08:	d032      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x104>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a0a:	f7fe fe1f 	bl	800564c <HAL_GetTick>
 8006a0e:	1b80      	subs	r0, r0, r6
 8006a10:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a14:	4298      	cmp	r0, r3
 8006a16:	d9f0      	bls.n	80069fa <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8006a18:	2003      	movs	r0, #3
 8006a1a:	e067      	b.n	8006aec <HAL_RCC_ClockConfig+0x180>
 8006a1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a20:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a24:	4a37      	ldr	r2, [pc, #220]	; (8006b04 <HAL_RCC_ClockConfig+0x198>)
 8006a26:	6810      	ldr	r0, [r2, #0]
 8006a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a2c:	fa92 f2a2 	rbit	r2, r2
 8006a30:	fab2 f282 	clz	r2, r2
 8006a34:	f002 021f 	and.w	r2, r2, #31
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006a3e:	4202      	tst	r2, r0
 8006a40:	d1d2      	bne.n	80069e8 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8006a42:	2001      	movs	r0, #1
 8006a44:	e052      	b.n	8006aec <HAL_RCC_ClockConfig+0x180>
 8006a46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a4a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a4e:	4a2d      	ldr	r2, [pc, #180]	; (8006b04 <HAL_RCC_ClockConfig+0x198>)
 8006a50:	6810      	ldr	r0, [r2, #0]
 8006a52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a56:	fa92 f2a2 	rbit	r2, r2
 8006a5a:	fab2 f282 	clz	r2, r2
 8006a5e:	f002 021f 	and.w	r2, r2, #31
 8006a62:	2101      	movs	r1, #1
 8006a64:	fa01 f202 	lsl.w	r2, r1, r2
 8006a68:	4210      	tst	r0, r2
 8006a6a:	d1bd      	bne.n	80069e8 <HAL_RCC_ClockConfig+0x7c>
        return HAL_ERROR;
 8006a6c:	2001      	movs	r0, #1
 8006a6e:	e03d      	b.n	8006aec <HAL_RCC_ClockConfig+0x180>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a70:	4b23      	ldr	r3, [pc, #140]	; (8006b00 <HAL_RCC_ClockConfig+0x194>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	42ab      	cmp	r3, r5
 8006a7a:	d90a      	bls.n	8006a92 <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a7c:	4a20      	ldr	r2, [pc, #128]	; (8006b00 <HAL_RCC_ClockConfig+0x194>)
 8006a7e:	6813      	ldr	r3, [r2, #0]
 8006a80:	f023 0307 	bic.w	r3, r3, #7
 8006a84:	432b      	orrs	r3, r5
 8006a86:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a88:	6813      	ldr	r3, [r2, #0]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	42ab      	cmp	r3, r5
 8006a90:	d133      	bne.n	8006afa <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a92:	6823      	ldr	r3, [r4, #0]
 8006a94:	f013 0f04 	tst.w	r3, #4
 8006a98:	d006      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x13c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a9a:	4a1a      	ldr	r2, [pc, #104]	; (8006b04 <HAL_RCC_ClockConfig+0x198>)
 8006a9c:	6853      	ldr	r3, [r2, #4]
 8006a9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006aa2:	68e1      	ldr	r1, [r4, #12]
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	f013 0f08 	tst.w	r3, #8
 8006aae:	d007      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x154>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ab0:	4a14      	ldr	r2, [pc, #80]	; (8006b04 <HAL_RCC_ClockConfig+0x198>)
 8006ab2:	6853      	ldr	r3, [r2, #4]
 8006ab4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006ab8:	6921      	ldr	r1, [r4, #16]
 8006aba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006abe:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006ac0:	f7ff ff1c 	bl	80068fc <HAL_RCC_GetSysClockFreq>
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <HAL_RCC_ClockConfig+0x198>)
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006acc:	22f0      	movs	r2, #240	; 0xf0
 8006ace:	fa92 f2a2 	rbit	r2, r2
 8006ad2:	fab2 f282 	clz	r2, r2
 8006ad6:	40d3      	lsrs	r3, r2
 8006ad8:	4a0b      	ldr	r2, [pc, #44]	; (8006b08 <HAL_RCC_ClockConfig+0x19c>)
 8006ada:	5cd3      	ldrb	r3, [r2, r3]
 8006adc:	40d8      	lsrs	r0, r3
 8006ade:	4b0b      	ldr	r3, [pc, #44]	; (8006b0c <HAL_RCC_ClockConfig+0x1a0>)
 8006ae0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <HAL_RCC_ClockConfig+0x1a4>)
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	f7fe fd6d 	bl	80055c4 <HAL_InitTick>
  return HAL_OK;
 8006aea:	2000      	movs	r0, #0
}
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006aee:	2001      	movs	r0, #1
}
 8006af0:	4770      	bx	lr
      return HAL_ERROR;
 8006af2:	2001      	movs	r0, #1
 8006af4:	e7fa      	b.n	8006aec <HAL_RCC_ClockConfig+0x180>
        return HAL_ERROR;
 8006af6:	2001      	movs	r0, #1
 8006af8:	e7f8      	b.n	8006aec <HAL_RCC_ClockConfig+0x180>
      return HAL_ERROR;
 8006afa:	2001      	movs	r0, #1
 8006afc:	e7f6      	b.n	8006aec <HAL_RCC_ClockConfig+0x180>
 8006afe:	bf00      	nop
 8006b00:	40022000 	.word	0x40022000
 8006b04:	40021000 	.word	0x40021000
 8006b08:	0800ce80 	.word	0x0800ce80
 8006b0c:	20000028 	.word	0x20000028
 8006b10:	20000044 	.word	0x20000044

08006b14 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8006b14:	4b01      	ldr	r3, [pc, #4]	; (8006b1c <HAL_RCC_GetHCLKFreq+0x8>)
 8006b16:	6818      	ldr	r0, [r3, #0]
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	20000028 	.word	0x20000028

08006b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b20:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006b22:	f7ff fff7 	bl	8006b14 <HAL_RCC_GetHCLKFreq>
 8006b26:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b2e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006b32:	fa92 f2a2 	rbit	r2, r2
 8006b36:	fab2 f282 	clz	r2, r2
 8006b3a:	40d3      	lsrs	r3, r2
 8006b3c:	4a02      	ldr	r2, [pc, #8]	; (8006b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b3e:	5cd3      	ldrb	r3, [r2, r3]
}    
 8006b40:	40d8      	lsrs	r0, r3
 8006b42:	bd08      	pop	{r3, pc}
 8006b44:	40021000 	.word	0x40021000
 8006b48:	0800ce90 	.word	0x0800ce90

08006b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b4c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006b4e:	f7ff ffe1 	bl	8006b14 <HAL_RCC_GetHCLKFreq>
 8006b52:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006b5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006b5e:	fa92 f2a2 	rbit	r2, r2
 8006b62:	fab2 f282 	clz	r2, r2
 8006b66:	40d3      	lsrs	r3, r2
 8006b68:	4a02      	ldr	r2, [pc, #8]	; (8006b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b6a:	5cd3      	ldrb	r3, [r2, r3]
} 
 8006b6c:	40d8      	lsrs	r0, r3
 8006b6e:	bd08      	pop	{r3, pc}
 8006b70:	40021000 	.word	0x40021000
 8006b74:	0800ce90 	.word	0x0800ce90

08006b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b7e:	6803      	ldr	r3, [r0, #0]
 8006b80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006b84:	d048      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xa0>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b86:	4b91      	ldr	r3, [pc, #580]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8006b8e:	f040 80d4 	bne.w	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b92:	4b8e      	ldr	r3, [pc, #568]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006b94:	69da      	ldr	r2, [r3, #28]
 8006b96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006b9a:	61da      	str	r2, [r3, #28]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006ba6:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ba8:	4b89      	ldr	r3, [pc, #548]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006bb0:	f000 80c5 	beq.w	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bb4:	4b85      	ldr	r3, [pc, #532]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bb8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006bbc:	d022      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8006bbe:	6862      	ldr	r2, [r4, #4]
 8006bc0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d01d      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bc8:	4880      	ldr	r0, [pc, #512]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006bca:	6a01      	ldr	r1, [r0, #32]
 8006bcc:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8006bd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bd4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bd8:	fab2 f282 	clz	r2, r2
 8006bdc:	4f7d      	ldr	r7, [pc, #500]	; (8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006bde:	443a      	add	r2, r7
 8006be0:	0092      	lsls	r2, r2, #2
 8006be2:	f04f 0c01 	mov.w	ip, #1
 8006be6:	f8c2 c000 	str.w	ip, [r2]
 8006bea:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bee:	fab3 f383 	clz	r3, r3
 8006bf2:	443b      	add	r3, r7
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006bfa:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006bfc:	f011 0f01 	tst.w	r1, #1
 8006c00:	f040 80b2 	bne.w	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006c04:	4a71      	ldr	r2, [pc, #452]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006c06:	6a13      	ldr	r3, [r2, #32]
 8006c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c0c:	6861      	ldr	r1, [r4, #4]
 8006c0e:	430b      	orrs	r3, r1
 8006c10:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c12:	2d00      	cmp	r5, #0
 8006c14:	f040 80cf 	bne.w	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	f013 0f01 	tst.w	r3, #1
 8006c1e:	d006      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c20:	4a6a      	ldr	r2, [pc, #424]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006c22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006c24:	f023 0303 	bic.w	r3, r3, #3
 8006c28:	68a1      	ldr	r1, [r4, #8]
 8006c2a:	430b      	orrs	r3, r1
 8006c2c:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	f013 0f02 	tst.w	r3, #2
 8006c34:	d006      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c36:	4a65      	ldr	r2, [pc, #404]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006c38:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006c3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006c3e:	68e1      	ldr	r1, [r4, #12]
 8006c40:	430b      	orrs	r3, r1
 8006c42:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	f013 0f04 	tst.w	r3, #4
 8006c4a:	d006      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c4c:	4a5f      	ldr	r2, [pc, #380]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006c4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006c50:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006c54:	6921      	ldr	r1, [r4, #16]
 8006c56:	430b      	orrs	r3, r1
 8006c58:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c5a:	6823      	ldr	r3, [r4, #0]
 8006c5c:	f013 0f20 	tst.w	r3, #32
 8006c60:	d006      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c62:	4a5a      	ldr	r2, [pc, #360]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006c64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006c66:	f023 0310 	bic.w	r3, r3, #16
 8006c6a:	69e1      	ldr	r1, [r4, #28]
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006c76:	d006      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006c78:	4a54      	ldr	r2, [pc, #336]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006c7a:	6853      	ldr	r3, [r2, #4]
 8006c7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006c80:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c82:	430b      	orrs	r3, r1
 8006c84:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c8c:	d006      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c8e:	4a4f      	ldr	r2, [pc, #316]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006c90:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006c92:	f023 0320 	bic.w	r3, r3, #32
 8006c96:	6a21      	ldr	r1, [r4, #32]
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	f013 0f08 	tst.w	r3, #8
 8006ca2:	d006      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ca4:	4a49      	ldr	r2, [pc, #292]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006ca6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006ca8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006cac:	6961      	ldr	r1, [r4, #20]
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	f013 0f10 	tst.w	r3, #16
 8006cb8:	d006      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006cba:	4a44      	ldr	r2, [pc, #272]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006cbc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006cbe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006cc2:	69a1      	ldr	r1, [r4, #24]
 8006cc4:	430b      	orrs	r3, r1
 8006cc6:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006cce:	d006      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006cd0:	4a3e      	ldr	r2, [pc, #248]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006cd2:	6853      	ldr	r3, [r2, #4]
 8006cd4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006cd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ce4:	d006      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ce6:	4a39      	ldr	r2, [pc, #228]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006ce8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006cea:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8006cee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006cfa:	d006      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006cfc:	4a33      	ldr	r2, [pc, #204]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006cfe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006d00:	f423 5378 	bic.w	r3, r3, #15872	; 0x3e00
 8006d04:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006d06:	430b      	orrs	r3, r1
 8006d08:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006d10:	d006      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006d12:	4a2e      	ldr	r2, [pc, #184]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006d14:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006d20:	6823      	ldr	r3, [r4, #0]
 8006d22:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006d26:	d04d      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006d28:	4a28      	ldr	r2, [pc, #160]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006d2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006d2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d32:	430b      	orrs	r3, r1
 8006d34:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006d36:	2000      	movs	r0, #0
 8006d38:	e045      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  FlagStatus       pwrclkchanged = RESET;
 8006d3a:	2500      	movs	r5, #0
 8006d3c:	e734      	b.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d3e:	4a24      	ldr	r2, [pc, #144]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d40:	6813      	ldr	r3, [r2, #0]
 8006d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d46:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006d48:	f7fe fc80 	bl	800564c <HAL_GetTick>
 8006d4c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d4e:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006d56:	f47f af2d 	bne.w	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5a:	f7fe fc77 	bl	800564c <HAL_GetTick>
 8006d5e:	1b80      	subs	r0, r0, r6
 8006d60:	2864      	cmp	r0, #100	; 0x64
 8006d62:	d9f4      	bls.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
          return HAL_TIMEOUT;
 8006d64:	2003      	movs	r0, #3
 8006d66:	e02e      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
        tickstart = HAL_GetTick();
 8006d68:	f7fe fc70 	bl	800564c <HAL_GetTick>
 8006d6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d6e:	e015      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x224>
 8006d70:	4b16      	ldr	r3, [pc, #88]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006d72:	6a19      	ldr	r1, [r3, #32]
 8006d74:	2302      	movs	r3, #2
 8006d76:	fa93 f3a3 	rbit	r3, r3
 8006d7a:	fab3 f383 	clz	r3, r3
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	2201      	movs	r2, #1
 8006d84:	fa02 f303 	lsl.w	r3, r2, r3
 8006d88:	420b      	tst	r3, r1
 8006d8a:	f47f af3b 	bne.w	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8e:	f7fe fc5d 	bl	800564c <HAL_GetTick>
 8006d92:	1b80      	subs	r0, r0, r6
 8006d94:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d98:	4298      	cmp	r0, r3
 8006d9a:	d811      	bhi.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x248>
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	fa93 f2a3 	rbit	r2, r3
 8006da2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e2      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006daa:	2302      	movs	r3, #2
 8006dac:	fa93 f3a3 	rbit	r3, r3
 8006db0:	4b06      	ldr	r3, [pc, #24]	; (8006dcc <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8006db2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006db4:	e7de      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db6:	69d3      	ldr	r3, [r2, #28]
 8006db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dbc:	61d3      	str	r3, [r2, #28]
 8006dbe:	e72b      	b.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
            return HAL_TIMEOUT;
 8006dc0:	2003      	movs	r0, #3
 8006dc2:	e000      	b.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  return HAL_OK;
 8006dc4:	2000      	movs	r0, #0
}
 8006dc6:	b003      	add	sp, #12
 8006dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40021000 	.word	0x40021000
 8006dd0:	40007000 	.word	0x40007000
 8006dd4:	10908100 	.word	0x10908100

08006dd8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dda:	6a03      	ldr	r3, [r0, #32]
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de6:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dec:	f023 0373 	bic.w	r3, r3, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006df0:	680d      	ldr	r5, [r1, #0]
 8006df2:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006df4:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006df8:	688b      	ldr	r3, [r1, #8]
 8006dfa:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dfc:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <TIM_OC1_SetConfig+0x98>)
 8006dfe:	4290      	cmp	r0, r2
 8006e00:	d00f      	beq.n	8006e22 <TIM_OC1_SetConfig+0x4a>
 8006e02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e06:	4290      	cmp	r0, r2
 8006e08:	d00b      	beq.n	8006e22 <TIM_OC1_SetConfig+0x4a>
 8006e0a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006e0e:	4290      	cmp	r0, r2
 8006e10:	d007      	beq.n	8006e22 <TIM_OC1_SetConfig+0x4a>
 8006e12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e16:	4290      	cmp	r0, r2
 8006e18:	d003      	beq.n	8006e22 <TIM_OC1_SetConfig+0x4a>
 8006e1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e1e:	4290      	cmp	r0, r2
 8006e20:	d105      	bne.n	8006e2e <TIM_OC1_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e22:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e26:	68ca      	ldr	r2, [r1, #12]
 8006e28:	431a      	orrs	r2, r3
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e2a:	f022 0304 	bic.w	r3, r2, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2e:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <TIM_OC1_SetConfig+0x98>)
 8006e30:	4290      	cmp	r0, r2
 8006e32:	d00f      	beq.n	8006e54 <TIM_OC1_SetConfig+0x7c>
 8006e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e38:	4290      	cmp	r0, r2
 8006e3a:	d00b      	beq.n	8006e54 <TIM_OC1_SetConfig+0x7c>
 8006e3c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006e40:	4290      	cmp	r0, r2
 8006e42:	d007      	beq.n	8006e54 <TIM_OC1_SetConfig+0x7c>
 8006e44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e48:	4290      	cmp	r0, r2
 8006e4a:	d003      	beq.n	8006e54 <TIM_OC1_SetConfig+0x7c>
 8006e4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e50:	4290      	cmp	r0, r2
 8006e52:	d105      	bne.n	8006e60 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e54:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e58:	694a      	ldr	r2, [r1, #20]
 8006e5a:	4322      	orrs	r2, r4
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e5c:	698c      	ldr	r4, [r1, #24]
 8006e5e:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e60:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e62:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e64:	684a      	ldr	r2, [r1, #4]
 8006e66:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e68:	6203      	str	r3, [r0, #32]
}
 8006e6a:	bc30      	pop	{r4, r5}
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	40012c00 	.word	0x40012c00

08006e74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e74:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e76:	6a03      	ldr	r3, [r0, #32]
 8006e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e7c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e80:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e82:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006e88:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e8c:	680d      	ldr	r5, [r1, #0]
 8006e8e:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e94:	688a      	ldr	r2, [r1, #8]
 8006e96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e9a:	4a18      	ldr	r2, [pc, #96]	; (8006efc <TIM_OC3_SetConfig+0x88>)
 8006e9c:	4290      	cmp	r0, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_OC3_SetConfig+0x34>
 8006ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ea4:	4290      	cmp	r0, r2
 8006ea6:	d106      	bne.n	8006eb6 <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ea8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eac:	68ca      	ldr	r2, [r1, #12]
 8006eae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb6:	4a11      	ldr	r2, [pc, #68]	; (8006efc <TIM_OC3_SetConfig+0x88>)
 8006eb8:	4290      	cmp	r0, r2
 8006eba:	d00f      	beq.n	8006edc <TIM_OC3_SetConfig+0x68>
 8006ebc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec0:	4290      	cmp	r0, r2
 8006ec2:	d00b      	beq.n	8006edc <TIM_OC3_SetConfig+0x68>
 8006ec4:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006ec8:	4290      	cmp	r0, r2
 8006eca:	d007      	beq.n	8006edc <TIM_OC3_SetConfig+0x68>
 8006ecc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ed0:	4290      	cmp	r0, r2
 8006ed2:	d003      	beq.n	8006edc <TIM_OC3_SetConfig+0x68>
 8006ed4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ed8:	4290      	cmp	r0, r2
 8006eda:	d107      	bne.n	8006eec <TIM_OC3_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006edc:	f424 5240 	bic.w	r2, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ee0:	694c      	ldr	r4, [r1, #20]
 8006ee2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ee6:	698c      	ldr	r4, [r1, #24]
 8006ee8:	ea42 1404 	orr.w	r4, r2, r4, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eec:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eee:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ef0:	684a      	ldr	r2, [r1, #4]
 8006ef2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef4:	6203      	str	r3, [r0, #32]
}
 8006ef6:	bc30      	pop	{r4, r5}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	40012c00 	.word	0x40012c00

08006f00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f00:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f02:	6a03      	ldr	r3, [r0, #32]
 8006f04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f10:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006f14:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f18:	680d      	ldr	r5, [r1, #0]
 8006f1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f22:	688d      	ldr	r5, [r1, #8]
 8006f24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f28:	4d0f      	ldr	r5, [pc, #60]	; (8006f68 <TIM_OC4_SetConfig+0x68>)
 8006f2a:	42a8      	cmp	r0, r5
 8006f2c:	d00f      	beq.n	8006f4e <TIM_OC4_SetConfig+0x4e>
 8006f2e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006f32:	42a8      	cmp	r0, r5
 8006f34:	d00b      	beq.n	8006f4e <TIM_OC4_SetConfig+0x4e>
 8006f36:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8006f3a:	42a8      	cmp	r0, r5
 8006f3c:	d007      	beq.n	8006f4e <TIM_OC4_SetConfig+0x4e>
 8006f3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006f42:	42a8      	cmp	r0, r5
 8006f44:	d003      	beq.n	8006f4e <TIM_OC4_SetConfig+0x4e>
 8006f46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006f4a:	42a8      	cmp	r0, r5
 8006f4c:	d104      	bne.n	8006f58 <TIM_OC4_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f4e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f52:	694d      	ldr	r5, [r1, #20]
 8006f54:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f58:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f5a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f5c:	684a      	ldr	r2, [r1, #4]
 8006f5e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f60:	6203      	str	r3, [r0, #32]
}
 8006f62:	bc30      	pop	{r4, r5}
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00

08006f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f6c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f6e:	6a03      	ldr	r3, [r0, #32]
 8006f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f78:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f7a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006f80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f84:	680d      	ldr	r5, [r1, #0]
 8006f86:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f8c:	688a      	ldr	r2, [r1, #8]
 8006f8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f92:	4a0f      	ldr	r2, [pc, #60]	; (8006fd0 <TIM_OC5_SetConfig+0x64>)
 8006f94:	4290      	cmp	r0, r2
 8006f96:	d00f      	beq.n	8006fb8 <TIM_OC5_SetConfig+0x4c>
 8006f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f9c:	4290      	cmp	r0, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_OC5_SetConfig+0x4c>
 8006fa0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006fa4:	4290      	cmp	r0, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_OC5_SetConfig+0x4c>
 8006fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fac:	4290      	cmp	r0, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_OC5_SetConfig+0x4c>
 8006fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fb4:	4290      	cmp	r0, r2
 8006fb6:	d104      	bne.n	8006fc2 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fb8:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fbc:	694a      	ldr	r2, [r1, #20]
 8006fbe:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fc4:	6545      	str	r5, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fc6:	684a      	ldr	r2, [r1, #4]
 8006fc8:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fca:	6203      	str	r3, [r0, #32]
}
 8006fcc:	bc30      	pop	{r4, r5}
 8006fce:	4770      	bx	lr
 8006fd0:	40012c00 	.word	0x40012c00

08006fd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006fd4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fd6:	6a03      	ldr	r3, [r0, #32]
 8006fd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006fdc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe0:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fe2:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fe4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006fe8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fec:	680d      	ldr	r5, [r1, #0]
 8006fee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ff2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ff6:	688d      	ldr	r5, [r1, #8]
 8006ff8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffc:	4d0f      	ldr	r5, [pc, #60]	; (800703c <TIM_OC6_SetConfig+0x68>)
 8006ffe:	42a8      	cmp	r0, r5
 8007000:	d00f      	beq.n	8007022 <TIM_OC6_SetConfig+0x4e>
 8007002:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007006:	42a8      	cmp	r0, r5
 8007008:	d00b      	beq.n	8007022 <TIM_OC6_SetConfig+0x4e>
 800700a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800700e:	42a8      	cmp	r0, r5
 8007010:	d007      	beq.n	8007022 <TIM_OC6_SetConfig+0x4e>
 8007012:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8007016:	42a8      	cmp	r0, r5
 8007018:	d003      	beq.n	8007022 <TIM_OC6_SetConfig+0x4e>
 800701a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800701e:	42a8      	cmp	r0, r5
 8007020:	d104      	bne.n	800702c <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007022:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007026:	694d      	ldr	r5, [r1, #20]
 8007028:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800702e:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007030:	684a      	ldr	r2, [r1, #4]
 8007032:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007034:	6203      	str	r3, [r0, #32]
}
 8007036:	bc30      	pop	{r4, r5}
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40012c00 	.word	0x40012c00

08007040 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8007040:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007042:	4a2c      	ldr	r2, [pc, #176]	; (80070f4 <TIM_Base_SetConfig+0xb4>)
 8007044:	4290      	cmp	r0, r2
 8007046:	d00e      	beq.n	8007066 <TIM_Base_SetConfig+0x26>
 8007048:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800704c:	d00b      	beq.n	8007066 <TIM_Base_SetConfig+0x26>
 800704e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007052:	4290      	cmp	r0, r2
 8007054:	d007      	beq.n	8007066 <TIM_Base_SetConfig+0x26>
 8007056:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800705a:	4290      	cmp	r0, r2
 800705c:	d003      	beq.n	8007066 <TIM_Base_SetConfig+0x26>
 800705e:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8007062:	4290      	cmp	r0, r2
 8007064:	d103      	bne.n	800706e <TIM_Base_SetConfig+0x2e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800706a:	684a      	ldr	r2, [r1, #4]
 800706c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800706e:	4a21      	ldr	r2, [pc, #132]	; (80070f4 <TIM_Base_SetConfig+0xb4>)
 8007070:	4290      	cmp	r0, r2
 8007072:	d01a      	beq.n	80070aa <TIM_Base_SetConfig+0x6a>
 8007074:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007078:	d017      	beq.n	80070aa <TIM_Base_SetConfig+0x6a>
 800707a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800707e:	4290      	cmp	r0, r2
 8007080:	d013      	beq.n	80070aa <TIM_Base_SetConfig+0x6a>
 8007082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007086:	4290      	cmp	r0, r2
 8007088:	d00f      	beq.n	80070aa <TIM_Base_SetConfig+0x6a>
 800708a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800708e:	4290      	cmp	r0, r2
 8007090:	d00b      	beq.n	80070aa <TIM_Base_SetConfig+0x6a>
 8007092:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007096:	4290      	cmp	r0, r2
 8007098:	d007      	beq.n	80070aa <TIM_Base_SetConfig+0x6a>
 800709a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800709e:	4290      	cmp	r0, r2
 80070a0:	d003      	beq.n	80070aa <TIM_Base_SetConfig+0x6a>
 80070a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80070a6:	4290      	cmp	r0, r2
 80070a8:	d103      	bne.n	80070b2 <TIM_Base_SetConfig+0x72>
    tmpcr1 &= ~TIM_CR1_CKD;
 80070aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ae:	68ca      	ldr	r2, [r1, #12]
 80070b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070b6:	694a      	ldr	r2, [r1, #20]
 80070b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80070ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070bc:	688b      	ldr	r3, [r1, #8]
 80070be:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80070c0:	680b      	ldr	r3, [r1, #0]
 80070c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <TIM_Base_SetConfig+0xb4>)
 80070c6:	4298      	cmp	r0, r3
 80070c8:	d00f      	beq.n	80070ea <TIM_Base_SetConfig+0xaa>
 80070ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ce:	4298      	cmp	r0, r3
 80070d0:	d00b      	beq.n	80070ea <TIM_Base_SetConfig+0xaa>
 80070d2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80070d6:	4298      	cmp	r0, r3
 80070d8:	d007      	beq.n	80070ea <TIM_Base_SetConfig+0xaa>
 80070da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070de:	4298      	cmp	r0, r3
 80070e0:	d003      	beq.n	80070ea <TIM_Base_SetConfig+0xaa>
 80070e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070e6:	4298      	cmp	r0, r3
 80070e8:	d101      	bne.n	80070ee <TIM_Base_SetConfig+0xae>
    TIMx->RCR = Structure->RepetitionCounter;
 80070ea:	690b      	ldr	r3, [r1, #16]
 80070ec:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80070ee:	2301      	movs	r3, #1
 80070f0:	6143      	str	r3, [r0, #20]
}
 80070f2:	4770      	bx	lr
 80070f4:	40012c00 	.word	0x40012c00

080070f8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80070f8:	b360      	cbz	r0, 8007154 <HAL_TIM_PWM_Init+0x5c>
{
 80070fa:	b510      	push	{r4, lr}
 80070fc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80070fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007102:	b313      	cbz	r3, 800714a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8007104:	2302      	movs	r3, #2
 8007106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800710a:	4621      	mov	r1, r4
 800710c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007110:	f7ff ff96 	bl	8007040 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007114:	2301      	movs	r3, #1
 8007116:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800711a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800711e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007122:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007126:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800712a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800712e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007132:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800713a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800713e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007142:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007146:	2000      	movs	r0, #0
}
 8007148:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800714a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800714e:	f7fe f86d 	bl	800522c <HAL_TIM_PWM_MspInit>
 8007152:	e7d7      	b.n	8007104 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8007154:	2001      	movs	r0, #1
}
 8007156:	4770      	bx	lr

08007158 <TIM_OC2_SetConfig>:
{
 8007158:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800715a:	6a03      	ldr	r3, [r0, #32]
 800715c:	f023 0310 	bic.w	r3, r3, #16
 8007160:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007162:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007164:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007166:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007168:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800716c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007170:	680d      	ldr	r5, [r1, #0]
 8007172:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8007176:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800717a:	688d      	ldr	r5, [r1, #8]
 800717c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007180:	4d17      	ldr	r5, [pc, #92]	; (80071e0 <TIM_OC2_SetConfig+0x88>)
 8007182:	42a8      	cmp	r0, r5
 8007184:	d003      	beq.n	800718e <TIM_OC2_SetConfig+0x36>
 8007186:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800718a:	42a8      	cmp	r0, r5
 800718c:	d106      	bne.n	800719c <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 800718e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007192:	68cd      	ldr	r5, [r1, #12]
 8007194:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8007198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719c:	4d10      	ldr	r5, [pc, #64]	; (80071e0 <TIM_OC2_SetConfig+0x88>)
 800719e:	42a8      	cmp	r0, r5
 80071a0:	d00f      	beq.n	80071c2 <TIM_OC2_SetConfig+0x6a>
 80071a2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80071a6:	42a8      	cmp	r0, r5
 80071a8:	d00b      	beq.n	80071c2 <TIM_OC2_SetConfig+0x6a>
 80071aa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80071ae:	42a8      	cmp	r0, r5
 80071b0:	d007      	beq.n	80071c2 <TIM_OC2_SetConfig+0x6a>
 80071b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80071b6:	42a8      	cmp	r0, r5
 80071b8:	d003      	beq.n	80071c2 <TIM_OC2_SetConfig+0x6a>
 80071ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80071be:	42a8      	cmp	r0, r5
 80071c0:	d107      	bne.n	80071d2 <TIM_OC2_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071c2:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071c6:	694c      	ldr	r4, [r1, #20]
 80071c8:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071cc:	698c      	ldr	r4, [r1, #24]
 80071ce:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80071d2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80071d4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80071d6:	684a      	ldr	r2, [r1, #4]
 80071d8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80071da:	6203      	str	r3, [r0, #32]
}
 80071dc:	bc30      	pop	{r4, r5}
 80071de:	4770      	bx	lr
 80071e0:	40012c00 	.word	0x40012c00

080071e4 <HAL_TIM_PWM_ConfigChannel>:
{
 80071e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80071e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	f000 8095 	beq.w	800731a <HAL_TIM_PWM_ConfigChannel+0x136>
 80071f0:	4604      	mov	r4, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	2301      	movs	r3, #1
 80071f6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80071fa:	2a14      	cmp	r2, #20
 80071fc:	f200 8088 	bhi.w	8007310 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8007200:	e8df f002 	tbb	[pc, r2]
 8007204:	8686860b 	.word	0x8686860b
 8007208:	8686861f 	.word	0x8686861f
 800720c:	86868634 	.word	0x86868634
 8007210:	86868648 	.word	0x86868648
 8007214:	8686865d 	.word	0x8686865d
 8007218:	71          	.byte	0x71
 8007219:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800721a:	6800      	ldr	r0, [r0, #0]
 800721c:	f7ff fddc 	bl	8006dd8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007220:	6822      	ldr	r2, [r4, #0]
 8007222:	6993      	ldr	r3, [r2, #24]
 8007224:	f043 0308 	orr.w	r3, r3, #8
 8007228:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800722a:	6822      	ldr	r2, [r4, #0]
 800722c:	6993      	ldr	r3, [r2, #24]
 800722e:	f023 0304 	bic.w	r3, r3, #4
 8007232:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007234:	6822      	ldr	r2, [r4, #0]
 8007236:	6993      	ldr	r3, [r2, #24]
 8007238:	6929      	ldr	r1, [r5, #16]
 800723a:	430b      	orrs	r3, r1
 800723c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800723e:	2000      	movs	r0, #0
      break;
 8007240:	e067      	b.n	8007312 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007242:	6800      	ldr	r0, [r0, #0]
 8007244:	f7ff ff88 	bl	8007158 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007248:	6822      	ldr	r2, [r4, #0]
 800724a:	6993      	ldr	r3, [r2, #24]
 800724c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007250:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	6993      	ldr	r3, [r2, #24]
 8007256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800725a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800725c:	6822      	ldr	r2, [r4, #0]
 800725e:	6993      	ldr	r3, [r2, #24]
 8007260:	6929      	ldr	r1, [r5, #16]
 8007262:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007266:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8007268:	2000      	movs	r0, #0
      break;
 800726a:	e052      	b.n	8007312 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800726c:	6800      	ldr	r0, [r0, #0]
 800726e:	f7ff fe01 	bl	8006e74 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007272:	6822      	ldr	r2, [r4, #0]
 8007274:	69d3      	ldr	r3, [r2, #28]
 8007276:	f043 0308 	orr.w	r3, r3, #8
 800727a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800727c:	6822      	ldr	r2, [r4, #0]
 800727e:	69d3      	ldr	r3, [r2, #28]
 8007280:	f023 0304 	bic.w	r3, r3, #4
 8007284:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007286:	6822      	ldr	r2, [r4, #0]
 8007288:	69d3      	ldr	r3, [r2, #28]
 800728a:	6929      	ldr	r1, [r5, #16]
 800728c:	430b      	orrs	r3, r1
 800728e:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8007290:	2000      	movs	r0, #0
      break;
 8007292:	e03e      	b.n	8007312 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007294:	6800      	ldr	r0, [r0, #0]
 8007296:	f7ff fe33 	bl	8006f00 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	69d3      	ldr	r3, [r2, #28]
 800729e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072a2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072a4:	6822      	ldr	r2, [r4, #0]
 80072a6:	69d3      	ldr	r3, [r2, #28]
 80072a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072ac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072ae:	6822      	ldr	r2, [r4, #0]
 80072b0:	69d3      	ldr	r3, [r2, #28]
 80072b2:	6929      	ldr	r1, [r5, #16]
 80072b4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80072b8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80072ba:	2000      	movs	r0, #0
      break;
 80072bc:	e029      	b.n	8007312 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072be:	6800      	ldr	r0, [r0, #0]
 80072c0:	f7ff fe54 	bl	8006f6c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072c4:	6822      	ldr	r2, [r4, #0]
 80072c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80072c8:	f043 0308 	orr.w	r3, r3, #8
 80072cc:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80072ce:	6822      	ldr	r2, [r4, #0]
 80072d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80072d2:	f023 0304 	bic.w	r3, r3, #4
 80072d6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80072d8:	6822      	ldr	r2, [r4, #0]
 80072da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80072dc:	6929      	ldr	r1, [r5, #16]
 80072de:	430b      	orrs	r3, r1
 80072e0:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80072e2:	2000      	movs	r0, #0
      break;
 80072e4:	e015      	b.n	8007312 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80072e6:	6800      	ldr	r0, [r0, #0]
 80072e8:	f7ff fe74 	bl	8006fd4 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80072ec:	6822      	ldr	r2, [r4, #0]
 80072ee:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80072f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072f4:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80072fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072fe:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007300:	6822      	ldr	r2, [r4, #0]
 8007302:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007304:	6929      	ldr	r1, [r5, #16]
 8007306:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800730a:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800730c:	2000      	movs	r0, #0
      break;
 800730e:	e000      	b.n	8007312 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8007310:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8007312:	2300      	movs	r3, #0
 8007314:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007318:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800731a:	2002      	movs	r0, #2
 800731c:	e7fc      	b.n	8007318 <HAL_TIM_PWM_ConfigChannel+0x134>

0800731e <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800731e:	f001 011f 	and.w	r1, r1, #31
 8007322:	f04f 0c01 	mov.w	ip, #1
 8007326:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800732a:	6a03      	ldr	r3, [r0, #32]
 800732c:	ea23 030c 	bic.w	r3, r3, ip
 8007330:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007332:	6a03      	ldr	r3, [r0, #32]
 8007334:	408a      	lsls	r2, r1
 8007336:	4313      	orrs	r3, r2
 8007338:	6203      	str	r3, [r0, #32]
}
 800733a:	4770      	bx	lr

0800733c <HAL_TIM_PWM_Start>:
{
 800733c:	b510      	push	{r4, lr}
 800733e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007340:	2910      	cmp	r1, #16
 8007342:	d83c      	bhi.n	80073be <HAL_TIM_PWM_Start+0x82>
 8007344:	e8df f001 	tbb	[pc, r1]
 8007348:	3b3b3b09 	.word	0x3b3b3b09
 800734c:	3b3b3b1f 	.word	0x3b3b3b1f
 8007350:	3b3b3b26 	.word	0x3b3b3b26
 8007354:	3b3b3b2d 	.word	0x3b3b3b2d
 8007358:	34          	.byte	0x34
 8007359:	00          	.byte	0x00
 800735a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800735e:	b2db      	uxtb	r3, r3
 8007360:	3b01      	subs	r3, #1
 8007362:	bf18      	it	ne
 8007364:	2301      	movne	r3, #1
 8007366:	2b00      	cmp	r3, #0
 8007368:	f040 808e 	bne.w	8007488 <HAL_TIM_PWM_Start+0x14c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800736c:	2910      	cmp	r1, #16
 800736e:	d879      	bhi.n	8007464 <HAL_TIM_PWM_Start+0x128>
 8007370:	e8df f001 	tbb	[pc, r1]
 8007374:	7878782c 	.word	0x7878782c
 8007378:	78787868 	.word	0x78787868
 800737c:	7878786c 	.word	0x7878786c
 8007380:	78787870 	.word	0x78787870
 8007384:	74          	.byte	0x74
 8007385:	00          	.byte	0x00
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007386:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800738a:	b2db      	uxtb	r3, r3
 800738c:	3b01      	subs	r3, #1
 800738e:	bf18      	it	ne
 8007390:	2301      	movne	r3, #1
 8007392:	e7e8      	b.n	8007366 <HAL_TIM_PWM_Start+0x2a>
 8007394:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8007398:	b2db      	uxtb	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	bf18      	it	ne
 800739e:	2301      	movne	r3, #1
 80073a0:	e7e1      	b.n	8007366 <HAL_TIM_PWM_Start+0x2a>
 80073a2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	3b01      	subs	r3, #1
 80073aa:	bf18      	it	ne
 80073ac:	2301      	movne	r3, #1
 80073ae:	e7da      	b.n	8007366 <HAL_TIM_PWM_Start+0x2a>
 80073b0:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	bf18      	it	ne
 80073ba:	2301      	movne	r3, #1
 80073bc:	e7d3      	b.n	8007366 <HAL_TIM_PWM_Start+0x2a>
 80073be:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	bf18      	it	ne
 80073c8:	2301      	movne	r3, #1
 80073ca:	e7cc      	b.n	8007366 <HAL_TIM_PWM_Start+0x2a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073cc:	2302      	movs	r3, #2
 80073ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073d2:	2201      	movs	r2, #1
 80073d4:	6820      	ldr	r0, [r4, #0]
 80073d6:	f7ff ffa2 	bl	800731e <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	4a2d      	ldr	r2, [pc, #180]	; (8007494 <HAL_TIM_PWM_Start+0x158>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00f      	beq.n	8007402 <HAL_TIM_PWM_Start+0xc6>
 80073e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00b      	beq.n	8007402 <HAL_TIM_PWM_Start+0xc6>
 80073ea:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d007      	beq.n	8007402 <HAL_TIM_PWM_Start+0xc6>
 80073f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d003      	beq.n	8007402 <HAL_TIM_PWM_Start+0xc6>
 80073fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80073fe:	4293      	cmp	r3, r2
 8007400:	d103      	bne.n	800740a <HAL_TIM_PWM_Start+0xce>
    __HAL_TIM_MOE_ENABLE(htim);
 8007402:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007404:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007408:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	4a21      	ldr	r2, [pc, #132]	; (8007494 <HAL_TIM_PWM_Start+0x158>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d02c      	beq.n	800746c <HAL_TIM_PWM_Start+0x130>
 8007412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007416:	d029      	beq.n	800746c <HAL_TIM_PWM_Start+0x130>
 8007418:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800741c:	4293      	cmp	r3, r2
 800741e:	d025      	beq.n	800746c <HAL_TIM_PWM_Start+0x130>
 8007420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007424:	4293      	cmp	r3, r2
 8007426:	d021      	beq.n	800746c <HAL_TIM_PWM_Start+0x130>
 8007428:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 800742c:	4293      	cmp	r3, r2
 800742e:	d01d      	beq.n	800746c <HAL_TIM_PWM_Start+0x130>
 8007430:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8007434:	4293      	cmp	r3, r2
 8007436:	d019      	beq.n	800746c <HAL_TIM_PWM_Start+0x130>
    __HAL_TIM_ENABLE(htim);
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	f042 0201 	orr.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007440:	2000      	movs	r0, #0
 8007442:	e022      	b.n	800748a <HAL_TIM_PWM_Start+0x14e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007444:	2302      	movs	r3, #2
 8007446:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800744a:	e7c2      	b.n	80073d2 <HAL_TIM_PWM_Start+0x96>
 800744c:	2302      	movs	r3, #2
 800744e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007452:	e7be      	b.n	80073d2 <HAL_TIM_PWM_Start+0x96>
 8007454:	2302      	movs	r3, #2
 8007456:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800745a:	e7ba      	b.n	80073d2 <HAL_TIM_PWM_Start+0x96>
 800745c:	2302      	movs	r3, #2
 800745e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007462:	e7b6      	b.n	80073d2 <HAL_TIM_PWM_Start+0x96>
 8007464:	2302      	movs	r3, #2
 8007466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746a:	e7b2      	b.n	80073d2 <HAL_TIM_PWM_Start+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800746c:	6899      	ldr	r1, [r3, #8]
 800746e:	4a0a      	ldr	r2, [pc, #40]	; (8007498 <HAL_TIM_PWM_Start+0x15c>)
 8007470:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007472:	2a06      	cmp	r2, #6
 8007474:	d00a      	beq.n	800748c <HAL_TIM_PWM_Start+0x150>
 8007476:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800747a:	d009      	beq.n	8007490 <HAL_TIM_PWM_Start+0x154>
      __HAL_TIM_ENABLE(htim);
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	f042 0201 	orr.w	r2, r2, #1
 8007482:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007484:	2000      	movs	r0, #0
 8007486:	e000      	b.n	800748a <HAL_TIM_PWM_Start+0x14e>
    return HAL_ERROR;
 8007488:	2001      	movs	r0, #1
}
 800748a:	bd10      	pop	{r4, pc}
  return HAL_OK;
 800748c:	2000      	movs	r0, #0
 800748e:	e7fc      	b.n	800748a <HAL_TIM_PWM_Start+0x14e>
 8007490:	2000      	movs	r0, #0
 8007492:	e7fa      	b.n	800748a <HAL_TIM_PWM_Start+0x14e>
 8007494:	40012c00 	.word	0x40012c00
 8007498:	00010007 	.word	0x00010007

0800749c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800749c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80074a0:	2a01      	cmp	r2, #1
 80074a2:	d03e      	beq.n	8007522 <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 80074a4:	b430      	push	{r4, r5}
 80074a6:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80074a8:	2201      	movs	r2, #1
 80074aa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ae:	2202      	movs	r2, #2
 80074b0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074b4:	6800      	ldr	r0, [r0, #0]
 80074b6:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074b8:	6884      	ldr	r4, [r0, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074ba:	4d1b      	ldr	r5, [pc, #108]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80074bc:	42a8      	cmp	r0, r5
 80074be:	d003      	beq.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80074c0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80074c4:	42a8      	cmp	r0, r5
 80074c6:	d103      	bne.n	80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80074c8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074cc:	684d      	ldr	r5, [r1, #4]
 80074ce:	432a      	orrs	r2, r5
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074d4:	680d      	ldr	r5, [r1, #0]
 80074d6:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074d8:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4812      	ldr	r0, [pc, #72]	; (8007528 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80074de:	4282      	cmp	r2, r0
 80074e0:	d012      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80074e2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80074e6:	d00f      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80074e8:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 80074ec:	4282      	cmp	r2, r0
 80074ee:	d00b      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80074f0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80074f4:	4282      	cmp	r2, r0
 80074f6:	d007      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80074f8:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80074fc:	4282      	cmp	r2, r0
 80074fe:	d003      	beq.n	8007508 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8007500:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8007504:	4282      	cmp	r2, r0
 8007506:	d104      	bne.n	8007512 <HAL_TIMEx_MasterConfigSynchronization+0x76>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007508:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800750c:	6889      	ldr	r1, [r1, #8]
 800750e:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007510:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007512:	2201      	movs	r2, #1
 8007514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007518:	2000      	movs	r0, #0
 800751a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 800751e:	bc30      	pop	{r4, r5}
 8007520:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007522:	2002      	movs	r0, #2
}
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	40012c00 	.word	0x40012c00

0800752c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800752c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007530:	2b01      	cmp	r3, #1
 8007532:	d03e      	beq.n	80075b2 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
{
 8007534:	b410      	push	{r4}
 8007536:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8007538:	2301      	movs	r3, #1
 800753a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800753e:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007544:	6888      	ldr	r0, [r1, #8]
 8007546:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800754c:	6848      	ldr	r0, [r1, #4]
 800754e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007550:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007554:	6808      	ldr	r0, [r1, #0]
 8007556:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800755c:	6908      	ldr	r0, [r1, #16]
 800755e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007560:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007564:	6948      	ldr	r0, [r1, #20]
 8007566:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800756e:	4303      	orrs	r3, r0
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007570:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8007574:	6988      	ldr	r0, [r1, #24]
 8007576:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800757a:	6810      	ldr	r0, [r2, #0]
 800757c:	4c0e      	ldr	r4, [pc, #56]	; (80075b8 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 800757e:	42a0      	cmp	r0, r4
 8007580:	d003      	beq.n	800758a <HAL_TIMEx_ConfigBreakDeadTime+0x5e>
 8007582:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8007586:	42a0      	cmp	r0, r4
 8007588:	d10c      	bne.n	80075a4 <HAL_TIMEx_ConfigBreakDeadTime+0x78>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800758a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800758e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8007590:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007594:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007598:	69cc      	ldr	r4, [r1, #28]
 800759a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800759c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80075a0:	6a09      	ldr	r1, [r1, #32]
 80075a2:	430b      	orrs	r3, r1
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075a4:	6443      	str	r3, [r0, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075a6:	2000      	movs	r0, #0
 80075a8:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80075ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b0:	4770      	bx	lr
  __HAL_LOCK(htim);
 80075b2:	2002      	movs	r0, #2
}
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40012c00 	.word	0x40012c00

080075bc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075bc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	e852 3f00 	ldrex	r3, [r2]
 80075c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c6:	e842 3100 	strex	r1, r3, [r2]
 80075ca:	2900      	cmp	r1, #0
 80075cc:	d1f6      	bne.n	80075bc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	f102 0308 	add.w	r3, r2, #8
 80075d4:	e853 3f00 	ldrex	r3, [r3]
 80075d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075dc:	3208      	adds	r2, #8
 80075de:	e842 3100 	strex	r1, r3, [r2]
 80075e2:	2900      	cmp	r1, #0
 80075e4:	d1f3      	bne.n	80075ce <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d006      	beq.n	80075fa <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075ec:	2320      	movs	r3, #32
 80075ee:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f2:	2300      	movs	r3, #0
 80075f4:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075f6:	6683      	str	r3, [r0, #104]	; 0x68
}
 80075f8:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	e852 3f00 	ldrex	r3, [r2]
 8007600:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	e842 3100 	strex	r1, r3, [r2]
 8007608:	2900      	cmp	r1, #0
 800760a:	d1f6      	bne.n	80075fa <UART_EndRxTransfer+0x3e>
 800760c:	e7ee      	b.n	80075ec <UART_EndRxTransfer+0x30>
	...

08007610 <UART_SetConfig>:
{
 8007610:	b510      	push	{r4, lr}
 8007612:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007614:	6883      	ldr	r3, [r0, #8]
 8007616:	6902      	ldr	r2, [r0, #16]
 8007618:	431a      	orrs	r2, r3
 800761a:	6943      	ldr	r3, [r0, #20]
 800761c:	431a      	orrs	r2, r3
 800761e:	69c3      	ldr	r3, [r0, #28]
 8007620:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007622:	6801      	ldr	r1, [r0, #0]
 8007624:	680b      	ldr	r3, [r1, #0]
 8007626:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800762a:	f023 030c 	bic.w	r3, r3, #12
 800762e:	4313      	orrs	r3, r2
 8007630:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007632:	6802      	ldr	r2, [r0, #0]
 8007634:	6853      	ldr	r3, [r2, #4]
 8007636:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800763a:	68c1      	ldr	r1, [r0, #12]
 800763c:	430b      	orrs	r3, r1
 800763e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007640:	6982      	ldr	r2, [r0, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8007642:	6a03      	ldr	r3, [r0, #32]
 8007644:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007646:	6801      	ldr	r1, [r0, #0]
 8007648:	688b      	ldr	r3, [r1, #8]
 800764a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800764e:	4313      	orrs	r3, r2
 8007650:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007652:	6803      	ldr	r3, [r0, #0]
 8007654:	4a7b      	ldr	r2, [pc, #492]	; (8007844 <UART_SetConfig+0x234>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00d      	beq.n	8007676 <UART_SetConfig+0x66>
 800765a:	4a7b      	ldr	r2, [pc, #492]	; (8007848 <UART_SetConfig+0x238>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01c      	beq.n	800769a <UART_SetConfig+0x8a>
 8007660:	4a7a      	ldr	r2, [pc, #488]	; (800784c <UART_SetConfig+0x23c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d03a      	beq.n	80076dc <UART_SetConfig+0xcc>
 8007666:	4a7a      	ldr	r2, [pc, #488]	; (8007850 <UART_SetConfig+0x240>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d04a      	beq.n	8007702 <UART_SetConfig+0xf2>
 800766c:	4a79      	ldr	r2, [pc, #484]	; (8007854 <UART_SetConfig+0x244>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d05a      	beq.n	8007728 <UART_SetConfig+0x118>
 8007672:	2310      	movs	r3, #16
 8007674:	e01f      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007676:	4b78      	ldr	r3, [pc, #480]	; (8007858 <UART_SetConfig+0x248>)
 8007678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	2b03      	cmp	r3, #3
 8007680:	d809      	bhi.n	8007696 <UART_SetConfig+0x86>
 8007682:	e8df f003 	tbb	[pc, r3]
 8007686:	0402      	.short	0x0402
 8007688:	6406      	.short	0x6406
 800768a:	2301      	movs	r3, #1
 800768c:	e013      	b.n	80076b6 <UART_SetConfig+0xa6>
 800768e:	2304      	movs	r3, #4
 8007690:	e011      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007692:	2308      	movs	r3, #8
 8007694:	e00f      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007696:	2310      	movs	r3, #16
 8007698:	e00d      	b.n	80076b6 <UART_SetConfig+0xa6>
 800769a:	4b6f      	ldr	r3, [pc, #444]	; (8007858 <UART_SetConfig+0x248>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80076a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a6:	d054      	beq.n	8007752 <UART_SetConfig+0x142>
 80076a8:	d813      	bhi.n	80076d2 <UART_SetConfig+0xc2>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d053      	beq.n	8007756 <UART_SetConfig+0x146>
 80076ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076b2:	d152      	bne.n	800775a <UART_SetConfig+0x14a>
 80076b4:	2304      	movs	r3, #4
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076b6:	69e0      	ldr	r0, [r4, #28]
 80076b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80076bc:	d069      	beq.n	8007792 <UART_SetConfig+0x182>
    switch (clocksource)
 80076be:	2b08      	cmp	r3, #8
 80076c0:	f200 80b9 	bhi.w	8007836 <UART_SetConfig+0x226>
 80076c4:	e8df f003 	tbb	[pc, r3]
 80076c8:	b790a892 	.word	0xb790a892
 80076cc:	b7b7b7ab 	.word	0xb7b7b7ab
 80076d0:	ae          	.byte	0xae
 80076d1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076d6:	d142      	bne.n	800775e <UART_SetConfig+0x14e>
 80076d8:	2302      	movs	r3, #2
 80076da:	e7ec      	b.n	80076b6 <UART_SetConfig+0xa6>
 80076dc:	4b5e      	ldr	r3, [pc, #376]	; (8007858 <UART_SetConfig+0x248>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80076e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076e8:	d03b      	beq.n	8007762 <UART_SetConfig+0x152>
 80076ea:	d805      	bhi.n	80076f8 <UART_SetConfig+0xe8>
 80076ec:	b3db      	cbz	r3, 8007766 <UART_SetConfig+0x156>
 80076ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80076f2:	d13a      	bne.n	800776a <UART_SetConfig+0x15a>
 80076f4:	2304      	movs	r3, #4
 80076f6:	e7de      	b.n	80076b6 <UART_SetConfig+0xa6>
 80076f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80076fc:	d137      	bne.n	800776e <UART_SetConfig+0x15e>
 80076fe:	2302      	movs	r3, #2
 8007700:	e7d9      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007702:	4b55      	ldr	r3, [pc, #340]	; (8007858 <UART_SetConfig+0x248>)
 8007704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007706:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800770a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800770e:	d030      	beq.n	8007772 <UART_SetConfig+0x162>
 8007710:	d805      	bhi.n	800771e <UART_SetConfig+0x10e>
 8007712:	b383      	cbz	r3, 8007776 <UART_SetConfig+0x166>
 8007714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007718:	d12f      	bne.n	800777a <UART_SetConfig+0x16a>
 800771a:	2304      	movs	r3, #4
 800771c:	e7cb      	b.n	80076b6 <UART_SetConfig+0xa6>
 800771e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007722:	d12c      	bne.n	800777e <UART_SetConfig+0x16e>
 8007724:	2302      	movs	r3, #2
 8007726:	e7c6      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007728:	4b4b      	ldr	r3, [pc, #300]	; (8007858 <UART_SetConfig+0x248>)
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007730:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007734:	d025      	beq.n	8007782 <UART_SetConfig+0x172>
 8007736:	d805      	bhi.n	8007744 <UART_SetConfig+0x134>
 8007738:	b32b      	cbz	r3, 8007786 <UART_SetConfig+0x176>
 800773a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800773e:	d124      	bne.n	800778a <UART_SetConfig+0x17a>
 8007740:	2304      	movs	r3, #4
 8007742:	e7b8      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007744:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007748:	d121      	bne.n	800778e <UART_SetConfig+0x17e>
 800774a:	2302      	movs	r3, #2
 800774c:	e7b3      	b.n	80076b6 <UART_SetConfig+0xa6>
 800774e:	2302      	movs	r3, #2
 8007750:	e7b1      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007752:	2308      	movs	r3, #8
 8007754:	e7af      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007756:	2300      	movs	r3, #0
 8007758:	e7ad      	b.n	80076b6 <UART_SetConfig+0xa6>
 800775a:	2310      	movs	r3, #16
 800775c:	e7ab      	b.n	80076b6 <UART_SetConfig+0xa6>
 800775e:	2310      	movs	r3, #16
 8007760:	e7a9      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007762:	2308      	movs	r3, #8
 8007764:	e7a7      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007766:	2300      	movs	r3, #0
 8007768:	e7a5      	b.n	80076b6 <UART_SetConfig+0xa6>
 800776a:	2310      	movs	r3, #16
 800776c:	e7a3      	b.n	80076b6 <UART_SetConfig+0xa6>
 800776e:	2310      	movs	r3, #16
 8007770:	e7a1      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007772:	2308      	movs	r3, #8
 8007774:	e79f      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007776:	2300      	movs	r3, #0
 8007778:	e79d      	b.n	80076b6 <UART_SetConfig+0xa6>
 800777a:	2310      	movs	r3, #16
 800777c:	e79b      	b.n	80076b6 <UART_SetConfig+0xa6>
 800777e:	2310      	movs	r3, #16
 8007780:	e799      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007782:	2308      	movs	r3, #8
 8007784:	e797      	b.n	80076b6 <UART_SetConfig+0xa6>
 8007786:	2300      	movs	r3, #0
 8007788:	e795      	b.n	80076b6 <UART_SetConfig+0xa6>
 800778a:	2310      	movs	r3, #16
 800778c:	e793      	b.n	80076b6 <UART_SetConfig+0xa6>
 800778e:	2310      	movs	r3, #16
 8007790:	e791      	b.n	80076b6 <UART_SetConfig+0xa6>
    switch (clocksource)
 8007792:	2b08      	cmp	r3, #8
 8007794:	d849      	bhi.n	800782a <UART_SetConfig+0x21a>
 8007796:	e8df f003 	tbb	[pc, r3]
 800779a:	1f05      	.short	0x1f05
 800779c:	48224825 	.word	0x48224825
 80077a0:	4848      	.short	0x4848
 80077a2:	09          	.byte	0x09
 80077a3:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a4:	f7ff f9bc 	bl	8006b20 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d040      	beq.n	800782e <UART_SetConfig+0x21e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077ac:	6862      	ldr	r2, [r4, #4]
 80077ae:	0853      	lsrs	r3, r2, #1
 80077b0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80077b4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b8:	f1a3 0110 	sub.w	r1, r3, #16
 80077bc:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80077c0:	4291      	cmp	r1, r2
 80077c2:	d836      	bhi.n	8007832 <UART_SetConfig+0x222>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077ca:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80077ce:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80077d0:	6822      	ldr	r2, [r4, #0]
 80077d2:	60d3      	str	r3, [r2, #12]
 80077d4:	2000      	movs	r0, #0
 80077d6:	e01b      	b.n	8007810 <UART_SetConfig+0x200>
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d8:	f7ff f9b8 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
        break;
 80077dc:	e7e4      	b.n	80077a8 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 80077de:	f7ff f88d 	bl	80068fc <HAL_RCC_GetSysClockFreq>
        break;
 80077e2:	e7e1      	b.n	80077a8 <UART_SetConfig+0x198>
        pclk = (uint32_t) HSI_VALUE;
 80077e4:	481d      	ldr	r0, [pc, #116]	; (800785c <UART_SetConfig+0x24c>)
 80077e6:	e7e1      	b.n	80077ac <UART_SetConfig+0x19c>
    switch (clocksource)
 80077e8:	481c      	ldr	r0, [pc, #112]	; (800785c <UART_SetConfig+0x24c>)
 80077ea:	e002      	b.n	80077f2 <UART_SetConfig+0x1e2>
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ec:	f7ff f998 	bl	8006b20 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80077f0:	b318      	cbz	r0, 800783a <UART_SetConfig+0x22a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80077f8:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077fc:	f1a0 0210 	sub.w	r2, r0, #16
 8007800:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8007804:	429a      	cmp	r2, r3
 8007806:	d81a      	bhi.n	800783e <UART_SetConfig+0x22e>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	b280      	uxth	r0, r0
 800780c:	60d8      	str	r0, [r3, #12]
 800780e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8007814:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8007816:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007818:	f7ff f998 	bl	8006b4c <HAL_RCC_GetPCLK2Freq>
        break;
 800781c:	e7e8      	b.n	80077f0 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800781e:	f7ff f86d 	bl	80068fc <HAL_RCC_GetSysClockFreq>
        break;
 8007822:	e7e5      	b.n	80077f0 <UART_SetConfig+0x1e0>
        pclk = (uint32_t) LSE_VALUE;
 8007824:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007828:	e7e3      	b.n	80077f2 <UART_SetConfig+0x1e2>
    switch (clocksource)
 800782a:	2001      	movs	r0, #1
 800782c:	e7f0      	b.n	8007810 <UART_SetConfig+0x200>
 800782e:	2000      	movs	r0, #0
 8007830:	e7ee      	b.n	8007810 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 8007832:	2001      	movs	r0, #1
 8007834:	e7ec      	b.n	8007810 <UART_SetConfig+0x200>
    switch (clocksource)
 8007836:	2001      	movs	r0, #1
 8007838:	e7ea      	b.n	8007810 <UART_SetConfig+0x200>
 800783a:	2000      	movs	r0, #0
 800783c:	e7e8      	b.n	8007810 <UART_SetConfig+0x200>
        ret = HAL_ERROR;
 800783e:	2001      	movs	r0, #1
 8007840:	e7e6      	b.n	8007810 <UART_SetConfig+0x200>
 8007842:	bf00      	nop
 8007844:	40013800 	.word	0x40013800
 8007848:	40004400 	.word	0x40004400
 800784c:	40004800 	.word	0x40004800
 8007850:	40004c00 	.word	0x40004c00
 8007854:	40005000 	.word	0x40005000
 8007858:	40021000 	.word	0x40021000
 800785c:	007a1200 	.word	0x007a1200

08007860 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007860:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007862:	f013 0f01 	tst.w	r3, #1
 8007866:	d006      	beq.n	8007876 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007868:	6802      	ldr	r2, [r0, #0]
 800786a:	6853      	ldr	r3, [r2, #4]
 800786c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007870:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007872:	430b      	orrs	r3, r1
 8007874:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007876:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007878:	f013 0f02 	tst.w	r3, #2
 800787c:	d006      	beq.n	800788c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800787e:	6802      	ldr	r2, [r0, #0]
 8007880:	6853      	ldr	r3, [r2, #4]
 8007882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007886:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007888:	430b      	orrs	r3, r1
 800788a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800788c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800788e:	f013 0f04 	tst.w	r3, #4
 8007892:	d006      	beq.n	80078a2 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007894:	6802      	ldr	r2, [r0, #0]
 8007896:	6853      	ldr	r3, [r2, #4]
 8007898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800789c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800789e:	430b      	orrs	r3, r1
 80078a0:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078a4:	f013 0f08 	tst.w	r3, #8
 80078a8:	d006      	beq.n	80078b8 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078aa:	6802      	ldr	r2, [r0, #0]
 80078ac:	6853      	ldr	r3, [r2, #4]
 80078ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80078b2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80078b4:	430b      	orrs	r3, r1
 80078b6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078ba:	f013 0f10 	tst.w	r3, #16
 80078be:	d006      	beq.n	80078ce <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078c0:	6802      	ldr	r2, [r0, #0]
 80078c2:	6893      	ldr	r3, [r2, #8]
 80078c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078c8:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80078ca:	430b      	orrs	r3, r1
 80078cc:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078d0:	f013 0f20 	tst.w	r3, #32
 80078d4:	d006      	beq.n	80078e4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078d6:	6802      	ldr	r2, [r0, #0]
 80078d8:	6893      	ldr	r3, [r2, #8]
 80078da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078de:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80078e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80078ea:	d00a      	beq.n	8007902 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078ec:	6802      	ldr	r2, [r0, #0]
 80078ee:	6853      	ldr	r3, [r2, #4]
 80078f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80078f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80078f6:	430b      	orrs	r3, r1
 80078f8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80078fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007900:	d00b      	beq.n	800791a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007902:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007904:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007908:	d006      	beq.n	8007918 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800790a:	6802      	ldr	r2, [r0, #0]
 800790c:	6853      	ldr	r3, [r2, #4]
 800790e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007912:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007914:	430b      	orrs	r3, r1
 8007916:	6053      	str	r3, [r2, #4]
}
 8007918:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800791a:	6802      	ldr	r2, [r0, #0]
 800791c:	6853      	ldr	r3, [r2, #4]
 800791e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007922:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007924:	430b      	orrs	r3, r1
 8007926:	6053      	str	r3, [r2, #4]
 8007928:	e7eb      	b.n	8007902 <UART_AdvFeatureConfig+0xa2>

0800792a <UART_WaitOnFlagUntilTimeout>:
{
 800792a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800792e:	4605      	mov	r5, r0
 8007930:	460f      	mov	r7, r1
 8007932:	4616      	mov	r6, r2
 8007934:	4699      	mov	r9, r3
 8007936:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	69dc      	ldr	r4, [r3, #28]
 800793e:	ea37 0404 	bics.w	r4, r7, r4
 8007942:	bf0c      	ite	eq
 8007944:	2401      	moveq	r4, #1
 8007946:	2400      	movne	r4, #0
 8007948:	42b4      	cmp	r4, r6
 800794a:	d132      	bne.n	80079b2 <UART_WaitOnFlagUntilTimeout+0x88>
    if (Timeout != HAL_MAX_DELAY)
 800794c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007950:	d0f3      	beq.n	800793a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007952:	f7fd fe7b 	bl	800564c <HAL_GetTick>
 8007956:	eba0 0009 	sub.w	r0, r0, r9
 800795a:	4540      	cmp	r0, r8
 800795c:	d82c      	bhi.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x8e>
 800795e:	f1b8 0f00 	cmp.w	r8, #0
 8007962:	d02b      	beq.n	80079bc <UART_WaitOnFlagUntilTimeout+0x92>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	f012 0f04 	tst.w	r2, #4
 800796c:	d0e5      	beq.n	800793a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800796e:	69da      	ldr	r2, [r3, #28]
 8007970:	f012 0f08 	tst.w	r2, #8
 8007974:	d111      	bne.n	800799a <UART_WaitOnFlagUntilTimeout+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007976:	69da      	ldr	r2, [r3, #28]
 8007978:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800797c:	d0dd      	beq.n	800793a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800797e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007982:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8007984:	4628      	mov	r0, r5
 8007986:	f7ff fe19 	bl	80075bc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800798a:	2320      	movs	r3, #32
 800798c:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8007990:	2300      	movs	r3, #0
 8007992:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
          return HAL_TIMEOUT;
 8007996:	2003      	movs	r0, #3
 8007998:	e00c      	b.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x8a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800799a:	2408      	movs	r4, #8
 800799c:	621c      	str	r4, [r3, #32]
           UART_EndRxTransfer(huart);
 800799e:	4628      	mov	r0, r5
 80079a0:	f7ff fe0c 	bl	80075bc <UART_EndRxTransfer>
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079a4:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
           __HAL_UNLOCK(huart);
 80079a8:	2300      	movs	r3, #0
 80079aa:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
           return HAL_ERROR;
 80079ae:	2001      	movs	r0, #1
 80079b0:	e000      	b.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x8a>
  return HAL_OK;
 80079b2:	2000      	movs	r0, #0
}
 80079b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80079b8:	2003      	movs	r0, #3
 80079ba:	e7fb      	b.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x8a>
 80079bc:	2003      	movs	r0, #3
 80079be:	e7f9      	b.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x8a>

080079c0 <UART_CheckIdleState>:
{
 80079c0:	b530      	push	{r4, r5, lr}
 80079c2:	b083      	sub	sp, #12
 80079c4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079c6:	2300      	movs	r3, #0
 80079c8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 80079cc:	f7fd fe3e 	bl	800564c <HAL_GetTick>
 80079d0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	6812      	ldr	r2, [r2, #0]
 80079d6:	f012 0f08 	tst.w	r2, #8
 80079da:	d10f      	bne.n	80079fc <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f013 0f04 	tst.w	r3, #4
 80079e4:	d126      	bne.n	8007a34 <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 80079e6:	2320      	movs	r3, #32
 80079e8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079ea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	2000      	movs	r0, #0
 80079f0:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079f2:	6660      	str	r0, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80079f4:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 80079f8:	b003      	add	sp, #12
 80079fa:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	4603      	mov	r3, r0
 8007a04:	2200      	movs	r2, #0
 8007a06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f7ff ff8d 	bl	800792a <UART_WaitOnFlagUntilTimeout>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d0e3      	beq.n	80079dc <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a14:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a16:	e852 3f00 	ldrex	r3, [r2]
 8007a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	e842 3100 	strex	r1, r3, [r2]
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d1f6      	bne.n	8007a14 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8007a26:	2320      	movs	r3, #32
 8007a28:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8007a30:	2003      	movs	r0, #3
 8007a32:	e7e1      	b.n	80079f8 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	462b      	mov	r3, r5
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a42:	4620      	mov	r0, r4
 8007a44:	f7ff ff71 	bl	800792a <UART_WaitOnFlagUntilTimeout>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d0cc      	beq.n	80079e6 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a4c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4e:	e852 3f00 	ldrex	r3, [r2]
 8007a52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	e842 3100 	strex	r1, r3, [r2]
 8007a5a:	2900      	cmp	r1, #0
 8007a5c:	d1f6      	bne.n	8007a4c <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a5e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	f102 0308 	add.w	r3, r2, #8
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	3208      	adds	r2, #8
 8007a6e:	e842 3100 	strex	r1, r3, [r2]
 8007a72:	2900      	cmp	r1, #0
 8007a74:	d1f3      	bne.n	8007a5e <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8007a76:	2320      	movs	r3, #32
 8007a78:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      __HAL_UNLOCK(huart);
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
      return HAL_TIMEOUT;
 8007a82:	2003      	movs	r0, #3
 8007a84:	e7b8      	b.n	80079f8 <UART_CheckIdleState+0x38>

08007a86 <HAL_UART_Init>:
  if (huart == NULL)
 8007a86:	b368      	cbz	r0, 8007ae4 <HAL_UART_Init+0x5e>
{
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007a8c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8007a8e:	b303      	cbz	r3, 8007ad2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8007a90:	2324      	movs	r3, #36	; 0x24
 8007a92:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	6813      	ldr	r3, [r2, #0]
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f7ff fdb6 	bl	8007610 <UART_SetConfig>
 8007aa4:	2801      	cmp	r0, #1
 8007aa6:	d013      	beq.n	8007ad0 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aaa:	b9bb      	cbnz	r3, 8007adc <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aac:	6822      	ldr	r2, [r4, #0]
 8007aae:	6853      	ldr	r3, [r2, #4]
 8007ab0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007ab4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ab6:	6822      	ldr	r2, [r4, #0]
 8007ab8:	6893      	ldr	r3, [r2, #8]
 8007aba:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007abe:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007ac0:	6822      	ldr	r2, [r4, #0]
 8007ac2:	6813      	ldr	r3, [r2, #0]
 8007ac4:	f043 0301 	orr.w	r3, r3, #1
 8007ac8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007aca:	4620      	mov	r0, r4
 8007acc:	f7ff ff78 	bl	80079c0 <UART_CheckIdleState>
}
 8007ad0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007ad2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8007ad6:	f7fd fc13 	bl	8005300 <HAL_UART_MspInit>
 8007ada:	e7d9      	b.n	8007a90 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8007adc:	4620      	mov	r0, r4
 8007ade:	f7ff febf 	bl	8007860 <UART_AdvFeatureConfig>
 8007ae2:	e7e3      	b.n	8007aac <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8007ae4:	2001      	movs	r0, #1
}
 8007ae6:	4770      	bx	lr

08007ae8 <atoi>:
 8007ae8:	220a      	movs	r2, #10
 8007aea:	2100      	movs	r1, #0
 8007aec:	f000 b882 	b.w	8007bf4 <strtol>

08007af0 <_strtol_l.constprop.0>:
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007af6:	d001      	beq.n	8007afc <_strtol_l.constprop.0+0xc>
 8007af8:	2b24      	cmp	r3, #36	; 0x24
 8007afa:	d906      	bls.n	8007b0a <_strtol_l.constprop.0+0x1a>
 8007afc:	f000 fe30 	bl	8008760 <__errno>
 8007b00:	2316      	movs	r3, #22
 8007b02:	6003      	str	r3, [r0, #0]
 8007b04:	2000      	movs	r0, #0
 8007b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007bf0 <_strtol_l.constprop.0+0x100>
 8007b0e:	460d      	mov	r5, r1
 8007b10:	462e      	mov	r6, r5
 8007b12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b16:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007b1a:	f017 0708 	ands.w	r7, r7, #8
 8007b1e:	d1f7      	bne.n	8007b10 <_strtol_l.constprop.0+0x20>
 8007b20:	2c2d      	cmp	r4, #45	; 0x2d
 8007b22:	d132      	bne.n	8007b8a <_strtol_l.constprop.0+0x9a>
 8007b24:	782c      	ldrb	r4, [r5, #0]
 8007b26:	2701      	movs	r7, #1
 8007b28:	1cb5      	adds	r5, r6, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d05b      	beq.n	8007be6 <_strtol_l.constprop.0+0xf6>
 8007b2e:	2b10      	cmp	r3, #16
 8007b30:	d109      	bne.n	8007b46 <_strtol_l.constprop.0+0x56>
 8007b32:	2c30      	cmp	r4, #48	; 0x30
 8007b34:	d107      	bne.n	8007b46 <_strtol_l.constprop.0+0x56>
 8007b36:	782c      	ldrb	r4, [r5, #0]
 8007b38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b3c:	2c58      	cmp	r4, #88	; 0x58
 8007b3e:	d14d      	bne.n	8007bdc <_strtol_l.constprop.0+0xec>
 8007b40:	786c      	ldrb	r4, [r5, #1]
 8007b42:	2310      	movs	r3, #16
 8007b44:	3502      	adds	r5, #2
 8007b46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007b4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b4e:	f04f 0e00 	mov.w	lr, #0
 8007b52:	fbb8 f9f3 	udiv	r9, r8, r3
 8007b56:	4676      	mov	r6, lr
 8007b58:	fb03 8a19 	mls	sl, r3, r9, r8
 8007b5c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007b60:	f1bc 0f09 	cmp.w	ip, #9
 8007b64:	d816      	bhi.n	8007b94 <_strtol_l.constprop.0+0xa4>
 8007b66:	4664      	mov	r4, ip
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	dd24      	ble.n	8007bb6 <_strtol_l.constprop.0+0xc6>
 8007b6c:	f1be 3fff 	cmp.w	lr, #4294967295
 8007b70:	d008      	beq.n	8007b84 <_strtol_l.constprop.0+0x94>
 8007b72:	45b1      	cmp	r9, r6
 8007b74:	d31c      	bcc.n	8007bb0 <_strtol_l.constprop.0+0xc0>
 8007b76:	d101      	bne.n	8007b7c <_strtol_l.constprop.0+0x8c>
 8007b78:	45a2      	cmp	sl, r4
 8007b7a:	db19      	blt.n	8007bb0 <_strtol_l.constprop.0+0xc0>
 8007b7c:	fb06 4603 	mla	r6, r6, r3, r4
 8007b80:	f04f 0e01 	mov.w	lr, #1
 8007b84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b88:	e7e8      	b.n	8007b5c <_strtol_l.constprop.0+0x6c>
 8007b8a:	2c2b      	cmp	r4, #43	; 0x2b
 8007b8c:	bf04      	itt	eq
 8007b8e:	782c      	ldrbeq	r4, [r5, #0]
 8007b90:	1cb5      	addeq	r5, r6, #2
 8007b92:	e7ca      	b.n	8007b2a <_strtol_l.constprop.0+0x3a>
 8007b94:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007b98:	f1bc 0f19 	cmp.w	ip, #25
 8007b9c:	d801      	bhi.n	8007ba2 <_strtol_l.constprop.0+0xb2>
 8007b9e:	3c37      	subs	r4, #55	; 0x37
 8007ba0:	e7e2      	b.n	8007b68 <_strtol_l.constprop.0+0x78>
 8007ba2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007ba6:	f1bc 0f19 	cmp.w	ip, #25
 8007baa:	d804      	bhi.n	8007bb6 <_strtol_l.constprop.0+0xc6>
 8007bac:	3c57      	subs	r4, #87	; 0x57
 8007bae:	e7db      	b.n	8007b68 <_strtol_l.constprop.0+0x78>
 8007bb0:	f04f 3eff 	mov.w	lr, #4294967295
 8007bb4:	e7e6      	b.n	8007b84 <_strtol_l.constprop.0+0x94>
 8007bb6:	f1be 3fff 	cmp.w	lr, #4294967295
 8007bba:	d105      	bne.n	8007bc8 <_strtol_l.constprop.0+0xd8>
 8007bbc:	2322      	movs	r3, #34	; 0x22
 8007bbe:	6003      	str	r3, [r0, #0]
 8007bc0:	4646      	mov	r6, r8
 8007bc2:	b942      	cbnz	r2, 8007bd6 <_strtol_l.constprop.0+0xe6>
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	e79e      	b.n	8007b06 <_strtol_l.constprop.0+0x16>
 8007bc8:	b107      	cbz	r7, 8007bcc <_strtol_l.constprop.0+0xdc>
 8007bca:	4276      	negs	r6, r6
 8007bcc:	2a00      	cmp	r2, #0
 8007bce:	d0f9      	beq.n	8007bc4 <_strtol_l.constprop.0+0xd4>
 8007bd0:	f1be 0f00 	cmp.w	lr, #0
 8007bd4:	d000      	beq.n	8007bd8 <_strtol_l.constprop.0+0xe8>
 8007bd6:	1e69      	subs	r1, r5, #1
 8007bd8:	6011      	str	r1, [r2, #0]
 8007bda:	e7f3      	b.n	8007bc4 <_strtol_l.constprop.0+0xd4>
 8007bdc:	2430      	movs	r4, #48	; 0x30
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1b1      	bne.n	8007b46 <_strtol_l.constprop.0+0x56>
 8007be2:	2308      	movs	r3, #8
 8007be4:	e7af      	b.n	8007b46 <_strtol_l.constprop.0+0x56>
 8007be6:	2c30      	cmp	r4, #48	; 0x30
 8007be8:	d0a5      	beq.n	8007b36 <_strtol_l.constprop.0+0x46>
 8007bea:	230a      	movs	r3, #10
 8007bec:	e7ab      	b.n	8007b46 <_strtol_l.constprop.0+0x56>
 8007bee:	bf00      	nop
 8007bf0:	0800ceb9 	.word	0x0800ceb9

08007bf4 <strtol>:
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	460a      	mov	r2, r1
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	4802      	ldr	r0, [pc, #8]	; (8007c04 <strtol+0x10>)
 8007bfc:	6800      	ldr	r0, [r0, #0]
 8007bfe:	f7ff bf77 	b.w	8007af0 <_strtol_l.constprop.0>
 8007c02:	bf00      	nop
 8007c04:	200000a0 	.word	0x200000a0

08007c08 <__cvt>:
 8007c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	ec55 4b10 	vmov	r4, r5, d0
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	460e      	mov	r6, r1
 8007c14:	4619      	mov	r1, r3
 8007c16:	462b      	mov	r3, r5
 8007c18:	bfbb      	ittet	lt
 8007c1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007c1e:	461d      	movlt	r5, r3
 8007c20:	2300      	movge	r3, #0
 8007c22:	232d      	movlt	r3, #45	; 0x2d
 8007c24:	700b      	strb	r3, [r1, #0]
 8007c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007c2c:	4691      	mov	r9, r2
 8007c2e:	f023 0820 	bic.w	r8, r3, #32
 8007c32:	bfbc      	itt	lt
 8007c34:	4622      	movlt	r2, r4
 8007c36:	4614      	movlt	r4, r2
 8007c38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c3c:	d005      	beq.n	8007c4a <__cvt+0x42>
 8007c3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007c42:	d100      	bne.n	8007c46 <__cvt+0x3e>
 8007c44:	3601      	adds	r6, #1
 8007c46:	2102      	movs	r1, #2
 8007c48:	e000      	b.n	8007c4c <__cvt+0x44>
 8007c4a:	2103      	movs	r1, #3
 8007c4c:	ab03      	add	r3, sp, #12
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	ab02      	add	r3, sp, #8
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	ec45 4b10 	vmov	d0, r4, r5
 8007c58:	4653      	mov	r3, sl
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	f000 fe34 	bl	80088c8 <_dtoa_r>
 8007c60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c64:	4607      	mov	r7, r0
 8007c66:	d102      	bne.n	8007c6e <__cvt+0x66>
 8007c68:	f019 0f01 	tst.w	r9, #1
 8007c6c:	d022      	beq.n	8007cb4 <__cvt+0xac>
 8007c6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c72:	eb07 0906 	add.w	r9, r7, r6
 8007c76:	d110      	bne.n	8007c9a <__cvt+0x92>
 8007c78:	783b      	ldrb	r3, [r7, #0]
 8007c7a:	2b30      	cmp	r3, #48	; 0x30
 8007c7c:	d10a      	bne.n	8007c94 <__cvt+0x8c>
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2300      	movs	r3, #0
 8007c82:	4620      	mov	r0, r4
 8007c84:	4629      	mov	r1, r5
 8007c86:	f7f8 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c8a:	b918      	cbnz	r0, 8007c94 <__cvt+0x8c>
 8007c8c:	f1c6 0601 	rsb	r6, r6, #1
 8007c90:	f8ca 6000 	str.w	r6, [sl]
 8007c94:	f8da 3000 	ldr.w	r3, [sl]
 8007c98:	4499      	add	r9, r3
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	f7f8 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ca6:	b108      	cbz	r0, 8007cac <__cvt+0xa4>
 8007ca8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cac:	2230      	movs	r2, #48	; 0x30
 8007cae:	9b03      	ldr	r3, [sp, #12]
 8007cb0:	454b      	cmp	r3, r9
 8007cb2:	d307      	bcc.n	8007cc4 <__cvt+0xbc>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cb8:	1bdb      	subs	r3, r3, r7
 8007cba:	4638      	mov	r0, r7
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	b004      	add	sp, #16
 8007cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc4:	1c59      	adds	r1, r3, #1
 8007cc6:	9103      	str	r1, [sp, #12]
 8007cc8:	701a      	strb	r2, [r3, #0]
 8007cca:	e7f0      	b.n	8007cae <__cvt+0xa6>

08007ccc <__exponent>:
 8007ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2900      	cmp	r1, #0
 8007cd2:	bfb8      	it	lt
 8007cd4:	4249      	neglt	r1, r1
 8007cd6:	f803 2b02 	strb.w	r2, [r3], #2
 8007cda:	bfb4      	ite	lt
 8007cdc:	222d      	movlt	r2, #45	; 0x2d
 8007cde:	222b      	movge	r2, #43	; 0x2b
 8007ce0:	2909      	cmp	r1, #9
 8007ce2:	7042      	strb	r2, [r0, #1]
 8007ce4:	dd2a      	ble.n	8007d3c <__exponent+0x70>
 8007ce6:	f10d 0207 	add.w	r2, sp, #7
 8007cea:	4617      	mov	r7, r2
 8007cec:	260a      	movs	r6, #10
 8007cee:	4694      	mov	ip, r2
 8007cf0:	fb91 f5f6 	sdiv	r5, r1, r6
 8007cf4:	fb06 1415 	mls	r4, r6, r5, r1
 8007cf8:	3430      	adds	r4, #48	; 0x30
 8007cfa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007cfe:	460c      	mov	r4, r1
 8007d00:	2c63      	cmp	r4, #99	; 0x63
 8007d02:	f102 32ff 	add.w	r2, r2, #4294967295
 8007d06:	4629      	mov	r1, r5
 8007d08:	dcf1      	bgt.n	8007cee <__exponent+0x22>
 8007d0a:	3130      	adds	r1, #48	; 0x30
 8007d0c:	f1ac 0402 	sub.w	r4, ip, #2
 8007d10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007d14:	1c41      	adds	r1, r0, #1
 8007d16:	4622      	mov	r2, r4
 8007d18:	42ba      	cmp	r2, r7
 8007d1a:	d30a      	bcc.n	8007d32 <__exponent+0x66>
 8007d1c:	f10d 0209 	add.w	r2, sp, #9
 8007d20:	eba2 020c 	sub.w	r2, r2, ip
 8007d24:	42bc      	cmp	r4, r7
 8007d26:	bf88      	it	hi
 8007d28:	2200      	movhi	r2, #0
 8007d2a:	4413      	add	r3, r2
 8007d2c:	1a18      	subs	r0, r3, r0
 8007d2e:	b003      	add	sp, #12
 8007d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d32:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007d36:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007d3a:	e7ed      	b.n	8007d18 <__exponent+0x4c>
 8007d3c:	2330      	movs	r3, #48	; 0x30
 8007d3e:	3130      	adds	r1, #48	; 0x30
 8007d40:	7083      	strb	r3, [r0, #2]
 8007d42:	70c1      	strb	r1, [r0, #3]
 8007d44:	1d03      	adds	r3, r0, #4
 8007d46:	e7f1      	b.n	8007d2c <__exponent+0x60>

08007d48 <_printf_float>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	ed2d 8b02 	vpush	{d8}
 8007d50:	b08d      	sub	sp, #52	; 0x34
 8007d52:	460c      	mov	r4, r1
 8007d54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d58:	4616      	mov	r6, r2
 8007d5a:	461f      	mov	r7, r3
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	f000 fcb5 	bl	80086cc <_localeconv_r>
 8007d62:	f8d0 a000 	ldr.w	sl, [r0]
 8007d66:	4650      	mov	r0, sl
 8007d68:	f7f8 fa82 	bl	8000270 <strlen>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	9305      	str	r3, [sp, #20]
 8007d74:	f8d8 3000 	ldr.w	r3, [r8]
 8007d78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d7c:	3307      	adds	r3, #7
 8007d7e:	f023 0307 	bic.w	r3, r3, #7
 8007d82:	f103 0208 	add.w	r2, r3, #8
 8007d86:	f8c8 2000 	str.w	r2, [r8]
 8007d8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d92:	9307      	str	r3, [sp, #28]
 8007d94:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d98:	ee08 0a10 	vmov	s16, r0
 8007d9c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007da4:	4b9e      	ldr	r3, [pc, #632]	; (8008020 <_printf_float+0x2d8>)
 8007da6:	f04f 32ff 	mov.w	r2, #4294967295
 8007daa:	f7f8 febf 	bl	8000b2c <__aeabi_dcmpun>
 8007dae:	bb88      	cbnz	r0, 8007e14 <_printf_float+0xcc>
 8007db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007db4:	4b9a      	ldr	r3, [pc, #616]	; (8008020 <_printf_float+0x2d8>)
 8007db6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dba:	f7f8 fe99 	bl	8000af0 <__aeabi_dcmple>
 8007dbe:	bb48      	cbnz	r0, 8007e14 <_printf_float+0xcc>
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	f7f8 fe88 	bl	8000adc <__aeabi_dcmplt>
 8007dcc:	b110      	cbz	r0, 8007dd4 <_printf_float+0x8c>
 8007dce:	232d      	movs	r3, #45	; 0x2d
 8007dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd4:	4a93      	ldr	r2, [pc, #588]	; (8008024 <_printf_float+0x2dc>)
 8007dd6:	4b94      	ldr	r3, [pc, #592]	; (8008028 <_printf_float+0x2e0>)
 8007dd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ddc:	bf94      	ite	ls
 8007dde:	4690      	movls	r8, r2
 8007de0:	4698      	movhi	r8, r3
 8007de2:	2303      	movs	r3, #3
 8007de4:	6123      	str	r3, [r4, #16]
 8007de6:	9b05      	ldr	r3, [sp, #20]
 8007de8:	f023 0304 	bic.w	r3, r3, #4
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	f04f 0900 	mov.w	r9, #0
 8007df2:	9700      	str	r7, [sp, #0]
 8007df4:	4633      	mov	r3, r6
 8007df6:	aa0b      	add	r2, sp, #44	; 0x2c
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4628      	mov	r0, r5
 8007dfc:	f000 f9da 	bl	80081b4 <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	f040 8090 	bne.w	8007f26 <_printf_float+0x1de>
 8007e06:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0a:	b00d      	add	sp, #52	; 0x34
 8007e0c:	ecbd 8b02 	vpop	{d8}
 8007e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e14:	4642      	mov	r2, r8
 8007e16:	464b      	mov	r3, r9
 8007e18:	4640      	mov	r0, r8
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	f7f8 fe86 	bl	8000b2c <__aeabi_dcmpun>
 8007e20:	b140      	cbz	r0, 8007e34 <_printf_float+0xec>
 8007e22:	464b      	mov	r3, r9
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	bfbc      	itt	lt
 8007e28:	232d      	movlt	r3, #45	; 0x2d
 8007e2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007e2e:	4a7f      	ldr	r2, [pc, #508]	; (800802c <_printf_float+0x2e4>)
 8007e30:	4b7f      	ldr	r3, [pc, #508]	; (8008030 <_printf_float+0x2e8>)
 8007e32:	e7d1      	b.n	8007dd8 <_printf_float+0x90>
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007e3a:	9206      	str	r2, [sp, #24]
 8007e3c:	1c5a      	adds	r2, r3, #1
 8007e3e:	d13f      	bne.n	8007ec0 <_printf_float+0x178>
 8007e40:	2306      	movs	r3, #6
 8007e42:	6063      	str	r3, [r4, #4]
 8007e44:	9b05      	ldr	r3, [sp, #20]
 8007e46:	6861      	ldr	r1, [r4, #4]
 8007e48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	9303      	str	r3, [sp, #12]
 8007e50:	ab0a      	add	r3, sp, #40	; 0x28
 8007e52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e56:	ab09      	add	r3, sp, #36	; 0x24
 8007e58:	ec49 8b10 	vmov	d0, r8, r9
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	6022      	str	r2, [r4, #0]
 8007e60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e64:	4628      	mov	r0, r5
 8007e66:	f7ff fecf 	bl	8007c08 <__cvt>
 8007e6a:	9b06      	ldr	r3, [sp, #24]
 8007e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e6e:	2b47      	cmp	r3, #71	; 0x47
 8007e70:	4680      	mov	r8, r0
 8007e72:	d108      	bne.n	8007e86 <_printf_float+0x13e>
 8007e74:	1cc8      	adds	r0, r1, #3
 8007e76:	db02      	blt.n	8007e7e <_printf_float+0x136>
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	4299      	cmp	r1, r3
 8007e7c:	dd41      	ble.n	8007f02 <_printf_float+0x1ba>
 8007e7e:	f1ab 0302 	sub.w	r3, fp, #2
 8007e82:	fa5f fb83 	uxtb.w	fp, r3
 8007e86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e8a:	d820      	bhi.n	8007ece <_printf_float+0x186>
 8007e8c:	3901      	subs	r1, #1
 8007e8e:	465a      	mov	r2, fp
 8007e90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e94:	9109      	str	r1, [sp, #36]	; 0x24
 8007e96:	f7ff ff19 	bl	8007ccc <__exponent>
 8007e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e9c:	1813      	adds	r3, r2, r0
 8007e9e:	2a01      	cmp	r2, #1
 8007ea0:	4681      	mov	r9, r0
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	dc02      	bgt.n	8007eac <_printf_float+0x164>
 8007ea6:	6822      	ldr	r2, [r4, #0]
 8007ea8:	07d2      	lsls	r2, r2, #31
 8007eaa:	d501      	bpl.n	8007eb0 <_printf_float+0x168>
 8007eac:	3301      	adds	r3, #1
 8007eae:	6123      	str	r3, [r4, #16]
 8007eb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d09c      	beq.n	8007df2 <_printf_float+0xaa>
 8007eb8:	232d      	movs	r3, #45	; 0x2d
 8007eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ebe:	e798      	b.n	8007df2 <_printf_float+0xaa>
 8007ec0:	9a06      	ldr	r2, [sp, #24]
 8007ec2:	2a47      	cmp	r2, #71	; 0x47
 8007ec4:	d1be      	bne.n	8007e44 <_printf_float+0xfc>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1bc      	bne.n	8007e44 <_printf_float+0xfc>
 8007eca:	2301      	movs	r3, #1
 8007ecc:	e7b9      	b.n	8007e42 <_printf_float+0xfa>
 8007ece:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007ed2:	d118      	bne.n	8007f06 <_printf_float+0x1be>
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	6863      	ldr	r3, [r4, #4]
 8007ed8:	dd0b      	ble.n	8007ef2 <_printf_float+0x1aa>
 8007eda:	6121      	str	r1, [r4, #16]
 8007edc:	b913      	cbnz	r3, 8007ee4 <_printf_float+0x19c>
 8007ede:	6822      	ldr	r2, [r4, #0]
 8007ee0:	07d0      	lsls	r0, r2, #31
 8007ee2:	d502      	bpl.n	8007eea <_printf_float+0x1a2>
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	440b      	add	r3, r1
 8007ee8:	6123      	str	r3, [r4, #16]
 8007eea:	65a1      	str	r1, [r4, #88]	; 0x58
 8007eec:	f04f 0900 	mov.w	r9, #0
 8007ef0:	e7de      	b.n	8007eb0 <_printf_float+0x168>
 8007ef2:	b913      	cbnz	r3, 8007efa <_printf_float+0x1b2>
 8007ef4:	6822      	ldr	r2, [r4, #0]
 8007ef6:	07d2      	lsls	r2, r2, #31
 8007ef8:	d501      	bpl.n	8007efe <_printf_float+0x1b6>
 8007efa:	3302      	adds	r3, #2
 8007efc:	e7f4      	b.n	8007ee8 <_printf_float+0x1a0>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e7f2      	b.n	8007ee8 <_printf_float+0x1a0>
 8007f02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f08:	4299      	cmp	r1, r3
 8007f0a:	db05      	blt.n	8007f18 <_printf_float+0x1d0>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	6121      	str	r1, [r4, #16]
 8007f10:	07d8      	lsls	r0, r3, #31
 8007f12:	d5ea      	bpl.n	8007eea <_printf_float+0x1a2>
 8007f14:	1c4b      	adds	r3, r1, #1
 8007f16:	e7e7      	b.n	8007ee8 <_printf_float+0x1a0>
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	bfd4      	ite	le
 8007f1c:	f1c1 0202 	rsble	r2, r1, #2
 8007f20:	2201      	movgt	r2, #1
 8007f22:	4413      	add	r3, r2
 8007f24:	e7e0      	b.n	8007ee8 <_printf_float+0x1a0>
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	055a      	lsls	r2, r3, #21
 8007f2a:	d407      	bmi.n	8007f3c <_printf_float+0x1f4>
 8007f2c:	6923      	ldr	r3, [r4, #16]
 8007f2e:	4642      	mov	r2, r8
 8007f30:	4631      	mov	r1, r6
 8007f32:	4628      	mov	r0, r5
 8007f34:	47b8      	blx	r7
 8007f36:	3001      	adds	r0, #1
 8007f38:	d12c      	bne.n	8007f94 <_printf_float+0x24c>
 8007f3a:	e764      	b.n	8007e06 <_printf_float+0xbe>
 8007f3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f40:	f240 80e0 	bls.w	8008104 <_printf_float+0x3bc>
 8007f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007f48:	2200      	movs	r2, #0
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f7f8 fdbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d034      	beq.n	8007fbe <_printf_float+0x276>
 8007f54:	4a37      	ldr	r2, [pc, #220]	; (8008034 <_printf_float+0x2ec>)
 8007f56:	2301      	movs	r3, #1
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b8      	blx	r7
 8007f5e:	3001      	adds	r0, #1
 8007f60:	f43f af51 	beq.w	8007e06 <_printf_float+0xbe>
 8007f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	db02      	blt.n	8007f72 <_printf_float+0x22a>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	07d8      	lsls	r0, r3, #31
 8007f70:	d510      	bpl.n	8007f94 <_printf_float+0x24c>
 8007f72:	ee18 3a10 	vmov	r3, s16
 8007f76:	4652      	mov	r2, sl
 8007f78:	4631      	mov	r1, r6
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	47b8      	blx	r7
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f43f af41 	beq.w	8007e06 <_printf_float+0xbe>
 8007f84:	f04f 0800 	mov.w	r8, #0
 8007f88:	f104 091a 	add.w	r9, r4, #26
 8007f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	4543      	cmp	r3, r8
 8007f92:	dc09      	bgt.n	8007fa8 <_printf_float+0x260>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	079b      	lsls	r3, r3, #30
 8007f98:	f100 8107 	bmi.w	80081aa <_printf_float+0x462>
 8007f9c:	68e0      	ldr	r0, [r4, #12]
 8007f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fa0:	4298      	cmp	r0, r3
 8007fa2:	bfb8      	it	lt
 8007fa4:	4618      	movlt	r0, r3
 8007fa6:	e730      	b.n	8007e0a <_printf_float+0xc2>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	464a      	mov	r2, r9
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f af27 	beq.w	8007e06 <_printf_float+0xbe>
 8007fb8:	f108 0801 	add.w	r8, r8, #1
 8007fbc:	e7e6      	b.n	8007f8c <_printf_float+0x244>
 8007fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	dc39      	bgt.n	8008038 <_printf_float+0x2f0>
 8007fc4:	4a1b      	ldr	r2, [pc, #108]	; (8008034 <_printf_float+0x2ec>)
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4628      	mov	r0, r5
 8007fcc:	47b8      	blx	r7
 8007fce:	3001      	adds	r0, #1
 8007fd0:	f43f af19 	beq.w	8007e06 <_printf_float+0xbe>
 8007fd4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	d102      	bne.n	8007fe2 <_printf_float+0x29a>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	07d9      	lsls	r1, r3, #31
 8007fe0:	d5d8      	bpl.n	8007f94 <_printf_float+0x24c>
 8007fe2:	ee18 3a10 	vmov	r3, s16
 8007fe6:	4652      	mov	r2, sl
 8007fe8:	4631      	mov	r1, r6
 8007fea:	4628      	mov	r0, r5
 8007fec:	47b8      	blx	r7
 8007fee:	3001      	adds	r0, #1
 8007ff0:	f43f af09 	beq.w	8007e06 <_printf_float+0xbe>
 8007ff4:	f04f 0900 	mov.w	r9, #0
 8007ff8:	f104 0a1a 	add.w	sl, r4, #26
 8007ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffe:	425b      	negs	r3, r3
 8008000:	454b      	cmp	r3, r9
 8008002:	dc01      	bgt.n	8008008 <_printf_float+0x2c0>
 8008004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008006:	e792      	b.n	8007f2e <_printf_float+0x1e6>
 8008008:	2301      	movs	r3, #1
 800800a:	4652      	mov	r2, sl
 800800c:	4631      	mov	r1, r6
 800800e:	4628      	mov	r0, r5
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	f43f aef7 	beq.w	8007e06 <_printf_float+0xbe>
 8008018:	f109 0901 	add.w	r9, r9, #1
 800801c:	e7ee      	b.n	8007ffc <_printf_float+0x2b4>
 800801e:	bf00      	nop
 8008020:	7fefffff 	.word	0x7fefffff
 8008024:	0800cfb9 	.word	0x0800cfb9
 8008028:	0800cfbd 	.word	0x0800cfbd
 800802c:	0800cfc1 	.word	0x0800cfc1
 8008030:	0800cfc5 	.word	0x0800cfc5
 8008034:	0800cfc9 	.word	0x0800cfc9
 8008038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800803a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800803c:	429a      	cmp	r2, r3
 800803e:	bfa8      	it	ge
 8008040:	461a      	movge	r2, r3
 8008042:	2a00      	cmp	r2, #0
 8008044:	4691      	mov	r9, r2
 8008046:	dc37      	bgt.n	80080b8 <_printf_float+0x370>
 8008048:	f04f 0b00 	mov.w	fp, #0
 800804c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008050:	f104 021a 	add.w	r2, r4, #26
 8008054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008056:	9305      	str	r3, [sp, #20]
 8008058:	eba3 0309 	sub.w	r3, r3, r9
 800805c:	455b      	cmp	r3, fp
 800805e:	dc33      	bgt.n	80080c8 <_printf_float+0x380>
 8008060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008064:	429a      	cmp	r2, r3
 8008066:	db3b      	blt.n	80080e0 <_printf_float+0x398>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	07da      	lsls	r2, r3, #31
 800806c:	d438      	bmi.n	80080e0 <_printf_float+0x398>
 800806e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008072:	eba2 0903 	sub.w	r9, r2, r3
 8008076:	9b05      	ldr	r3, [sp, #20]
 8008078:	1ad2      	subs	r2, r2, r3
 800807a:	4591      	cmp	r9, r2
 800807c:	bfa8      	it	ge
 800807e:	4691      	movge	r9, r2
 8008080:	f1b9 0f00 	cmp.w	r9, #0
 8008084:	dc35      	bgt.n	80080f2 <_printf_float+0x3aa>
 8008086:	f04f 0800 	mov.w	r8, #0
 800808a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800808e:	f104 0a1a 	add.w	sl, r4, #26
 8008092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008096:	1a9b      	subs	r3, r3, r2
 8008098:	eba3 0309 	sub.w	r3, r3, r9
 800809c:	4543      	cmp	r3, r8
 800809e:	f77f af79 	ble.w	8007f94 <_printf_float+0x24c>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4652      	mov	r2, sl
 80080a6:	4631      	mov	r1, r6
 80080a8:	4628      	mov	r0, r5
 80080aa:	47b8      	blx	r7
 80080ac:	3001      	adds	r0, #1
 80080ae:	f43f aeaa 	beq.w	8007e06 <_printf_float+0xbe>
 80080b2:	f108 0801 	add.w	r8, r8, #1
 80080b6:	e7ec      	b.n	8008092 <_printf_float+0x34a>
 80080b8:	4613      	mov	r3, r2
 80080ba:	4631      	mov	r1, r6
 80080bc:	4642      	mov	r2, r8
 80080be:	4628      	mov	r0, r5
 80080c0:	47b8      	blx	r7
 80080c2:	3001      	adds	r0, #1
 80080c4:	d1c0      	bne.n	8008048 <_printf_float+0x300>
 80080c6:	e69e      	b.n	8007e06 <_printf_float+0xbe>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	9205      	str	r2, [sp, #20]
 80080d0:	47b8      	blx	r7
 80080d2:	3001      	adds	r0, #1
 80080d4:	f43f ae97 	beq.w	8007e06 <_printf_float+0xbe>
 80080d8:	9a05      	ldr	r2, [sp, #20]
 80080da:	f10b 0b01 	add.w	fp, fp, #1
 80080de:	e7b9      	b.n	8008054 <_printf_float+0x30c>
 80080e0:	ee18 3a10 	vmov	r3, s16
 80080e4:	4652      	mov	r2, sl
 80080e6:	4631      	mov	r1, r6
 80080e8:	4628      	mov	r0, r5
 80080ea:	47b8      	blx	r7
 80080ec:	3001      	adds	r0, #1
 80080ee:	d1be      	bne.n	800806e <_printf_float+0x326>
 80080f0:	e689      	b.n	8007e06 <_printf_float+0xbe>
 80080f2:	9a05      	ldr	r2, [sp, #20]
 80080f4:	464b      	mov	r3, r9
 80080f6:	4442      	add	r2, r8
 80080f8:	4631      	mov	r1, r6
 80080fa:	4628      	mov	r0, r5
 80080fc:	47b8      	blx	r7
 80080fe:	3001      	adds	r0, #1
 8008100:	d1c1      	bne.n	8008086 <_printf_float+0x33e>
 8008102:	e680      	b.n	8007e06 <_printf_float+0xbe>
 8008104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008106:	2a01      	cmp	r2, #1
 8008108:	dc01      	bgt.n	800810e <_printf_float+0x3c6>
 800810a:	07db      	lsls	r3, r3, #31
 800810c:	d53a      	bpl.n	8008184 <_printf_float+0x43c>
 800810e:	2301      	movs	r3, #1
 8008110:	4642      	mov	r2, r8
 8008112:	4631      	mov	r1, r6
 8008114:	4628      	mov	r0, r5
 8008116:	47b8      	blx	r7
 8008118:	3001      	adds	r0, #1
 800811a:	f43f ae74 	beq.w	8007e06 <_printf_float+0xbe>
 800811e:	ee18 3a10 	vmov	r3, s16
 8008122:	4652      	mov	r2, sl
 8008124:	4631      	mov	r1, r6
 8008126:	4628      	mov	r0, r5
 8008128:	47b8      	blx	r7
 800812a:	3001      	adds	r0, #1
 800812c:	f43f ae6b 	beq.w	8007e06 <_printf_float+0xbe>
 8008130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008134:	2200      	movs	r2, #0
 8008136:	2300      	movs	r3, #0
 8008138:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800813c:	f7f8 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008140:	b9d8      	cbnz	r0, 800817a <_printf_float+0x432>
 8008142:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008146:	f108 0201 	add.w	r2, r8, #1
 800814a:	4631      	mov	r1, r6
 800814c:	4628      	mov	r0, r5
 800814e:	47b8      	blx	r7
 8008150:	3001      	adds	r0, #1
 8008152:	d10e      	bne.n	8008172 <_printf_float+0x42a>
 8008154:	e657      	b.n	8007e06 <_printf_float+0xbe>
 8008156:	2301      	movs	r3, #1
 8008158:	4652      	mov	r2, sl
 800815a:	4631      	mov	r1, r6
 800815c:	4628      	mov	r0, r5
 800815e:	47b8      	blx	r7
 8008160:	3001      	adds	r0, #1
 8008162:	f43f ae50 	beq.w	8007e06 <_printf_float+0xbe>
 8008166:	f108 0801 	add.w	r8, r8, #1
 800816a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800816c:	3b01      	subs	r3, #1
 800816e:	4543      	cmp	r3, r8
 8008170:	dcf1      	bgt.n	8008156 <_printf_float+0x40e>
 8008172:	464b      	mov	r3, r9
 8008174:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008178:	e6da      	b.n	8007f30 <_printf_float+0x1e8>
 800817a:	f04f 0800 	mov.w	r8, #0
 800817e:	f104 0a1a 	add.w	sl, r4, #26
 8008182:	e7f2      	b.n	800816a <_printf_float+0x422>
 8008184:	2301      	movs	r3, #1
 8008186:	4642      	mov	r2, r8
 8008188:	e7df      	b.n	800814a <_printf_float+0x402>
 800818a:	2301      	movs	r3, #1
 800818c:	464a      	mov	r2, r9
 800818e:	4631      	mov	r1, r6
 8008190:	4628      	mov	r0, r5
 8008192:	47b8      	blx	r7
 8008194:	3001      	adds	r0, #1
 8008196:	f43f ae36 	beq.w	8007e06 <_printf_float+0xbe>
 800819a:	f108 0801 	add.w	r8, r8, #1
 800819e:	68e3      	ldr	r3, [r4, #12]
 80081a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081a2:	1a5b      	subs	r3, r3, r1
 80081a4:	4543      	cmp	r3, r8
 80081a6:	dcf0      	bgt.n	800818a <_printf_float+0x442>
 80081a8:	e6f8      	b.n	8007f9c <_printf_float+0x254>
 80081aa:	f04f 0800 	mov.w	r8, #0
 80081ae:	f104 0919 	add.w	r9, r4, #25
 80081b2:	e7f4      	b.n	800819e <_printf_float+0x456>

080081b4 <_printf_common>:
 80081b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b8:	4616      	mov	r6, r2
 80081ba:	4699      	mov	r9, r3
 80081bc:	688a      	ldr	r2, [r1, #8]
 80081be:	690b      	ldr	r3, [r1, #16]
 80081c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081c4:	4293      	cmp	r3, r2
 80081c6:	bfb8      	it	lt
 80081c8:	4613      	movlt	r3, r2
 80081ca:	6033      	str	r3, [r6, #0]
 80081cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081d0:	4607      	mov	r7, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	b10a      	cbz	r2, 80081da <_printf_common+0x26>
 80081d6:	3301      	adds	r3, #1
 80081d8:	6033      	str	r3, [r6, #0]
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	0699      	lsls	r1, r3, #26
 80081de:	bf42      	ittt	mi
 80081e0:	6833      	ldrmi	r3, [r6, #0]
 80081e2:	3302      	addmi	r3, #2
 80081e4:	6033      	strmi	r3, [r6, #0]
 80081e6:	6825      	ldr	r5, [r4, #0]
 80081e8:	f015 0506 	ands.w	r5, r5, #6
 80081ec:	d106      	bne.n	80081fc <_printf_common+0x48>
 80081ee:	f104 0a19 	add.w	sl, r4, #25
 80081f2:	68e3      	ldr	r3, [r4, #12]
 80081f4:	6832      	ldr	r2, [r6, #0]
 80081f6:	1a9b      	subs	r3, r3, r2
 80081f8:	42ab      	cmp	r3, r5
 80081fa:	dc26      	bgt.n	800824a <_printf_common+0x96>
 80081fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008200:	1e13      	subs	r3, r2, #0
 8008202:	6822      	ldr	r2, [r4, #0]
 8008204:	bf18      	it	ne
 8008206:	2301      	movne	r3, #1
 8008208:	0692      	lsls	r2, r2, #26
 800820a:	d42b      	bmi.n	8008264 <_printf_common+0xb0>
 800820c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008210:	4649      	mov	r1, r9
 8008212:	4638      	mov	r0, r7
 8008214:	47c0      	blx	r8
 8008216:	3001      	adds	r0, #1
 8008218:	d01e      	beq.n	8008258 <_printf_common+0xa4>
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	6922      	ldr	r2, [r4, #16]
 800821e:	f003 0306 	and.w	r3, r3, #6
 8008222:	2b04      	cmp	r3, #4
 8008224:	bf02      	ittt	eq
 8008226:	68e5      	ldreq	r5, [r4, #12]
 8008228:	6833      	ldreq	r3, [r6, #0]
 800822a:	1aed      	subeq	r5, r5, r3
 800822c:	68a3      	ldr	r3, [r4, #8]
 800822e:	bf0c      	ite	eq
 8008230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008234:	2500      	movne	r5, #0
 8008236:	4293      	cmp	r3, r2
 8008238:	bfc4      	itt	gt
 800823a:	1a9b      	subgt	r3, r3, r2
 800823c:	18ed      	addgt	r5, r5, r3
 800823e:	2600      	movs	r6, #0
 8008240:	341a      	adds	r4, #26
 8008242:	42b5      	cmp	r5, r6
 8008244:	d11a      	bne.n	800827c <_printf_common+0xc8>
 8008246:	2000      	movs	r0, #0
 8008248:	e008      	b.n	800825c <_printf_common+0xa8>
 800824a:	2301      	movs	r3, #1
 800824c:	4652      	mov	r2, sl
 800824e:	4649      	mov	r1, r9
 8008250:	4638      	mov	r0, r7
 8008252:	47c0      	blx	r8
 8008254:	3001      	adds	r0, #1
 8008256:	d103      	bne.n	8008260 <_printf_common+0xac>
 8008258:	f04f 30ff 	mov.w	r0, #4294967295
 800825c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008260:	3501      	adds	r5, #1
 8008262:	e7c6      	b.n	80081f2 <_printf_common+0x3e>
 8008264:	18e1      	adds	r1, r4, r3
 8008266:	1c5a      	adds	r2, r3, #1
 8008268:	2030      	movs	r0, #48	; 0x30
 800826a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800826e:	4422      	add	r2, r4
 8008270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008278:	3302      	adds	r3, #2
 800827a:	e7c7      	b.n	800820c <_printf_common+0x58>
 800827c:	2301      	movs	r3, #1
 800827e:	4622      	mov	r2, r4
 8008280:	4649      	mov	r1, r9
 8008282:	4638      	mov	r0, r7
 8008284:	47c0      	blx	r8
 8008286:	3001      	adds	r0, #1
 8008288:	d0e6      	beq.n	8008258 <_printf_common+0xa4>
 800828a:	3601      	adds	r6, #1
 800828c:	e7d9      	b.n	8008242 <_printf_common+0x8e>
	...

08008290 <_printf_i>:
 8008290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008294:	7e0f      	ldrb	r7, [r1, #24]
 8008296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008298:	2f78      	cmp	r7, #120	; 0x78
 800829a:	4691      	mov	r9, r2
 800829c:	4680      	mov	r8, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	469a      	mov	sl, r3
 80082a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082a6:	d807      	bhi.n	80082b8 <_printf_i+0x28>
 80082a8:	2f62      	cmp	r7, #98	; 0x62
 80082aa:	d80a      	bhi.n	80082c2 <_printf_i+0x32>
 80082ac:	2f00      	cmp	r7, #0
 80082ae:	f000 80d4 	beq.w	800845a <_printf_i+0x1ca>
 80082b2:	2f58      	cmp	r7, #88	; 0x58
 80082b4:	f000 80c0 	beq.w	8008438 <_printf_i+0x1a8>
 80082b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80082c0:	e03a      	b.n	8008338 <_printf_i+0xa8>
 80082c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80082c6:	2b15      	cmp	r3, #21
 80082c8:	d8f6      	bhi.n	80082b8 <_printf_i+0x28>
 80082ca:	a101      	add	r1, pc, #4	; (adr r1, 80082d0 <_printf_i+0x40>)
 80082cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082d0:	08008329 	.word	0x08008329
 80082d4:	0800833d 	.word	0x0800833d
 80082d8:	080082b9 	.word	0x080082b9
 80082dc:	080082b9 	.word	0x080082b9
 80082e0:	080082b9 	.word	0x080082b9
 80082e4:	080082b9 	.word	0x080082b9
 80082e8:	0800833d 	.word	0x0800833d
 80082ec:	080082b9 	.word	0x080082b9
 80082f0:	080082b9 	.word	0x080082b9
 80082f4:	080082b9 	.word	0x080082b9
 80082f8:	080082b9 	.word	0x080082b9
 80082fc:	08008441 	.word	0x08008441
 8008300:	08008369 	.word	0x08008369
 8008304:	080083fb 	.word	0x080083fb
 8008308:	080082b9 	.word	0x080082b9
 800830c:	080082b9 	.word	0x080082b9
 8008310:	08008463 	.word	0x08008463
 8008314:	080082b9 	.word	0x080082b9
 8008318:	08008369 	.word	0x08008369
 800831c:	080082b9 	.word	0x080082b9
 8008320:	080082b9 	.word	0x080082b9
 8008324:	08008403 	.word	0x08008403
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	1d1a      	adds	r2, r3, #4
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	602a      	str	r2, [r5, #0]
 8008330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008338:	2301      	movs	r3, #1
 800833a:	e09f      	b.n	800847c <_printf_i+0x1ec>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	682b      	ldr	r3, [r5, #0]
 8008340:	0607      	lsls	r7, r0, #24
 8008342:	f103 0104 	add.w	r1, r3, #4
 8008346:	6029      	str	r1, [r5, #0]
 8008348:	d501      	bpl.n	800834e <_printf_i+0xbe>
 800834a:	681e      	ldr	r6, [r3, #0]
 800834c:	e003      	b.n	8008356 <_printf_i+0xc6>
 800834e:	0646      	lsls	r6, r0, #25
 8008350:	d5fb      	bpl.n	800834a <_printf_i+0xba>
 8008352:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008356:	2e00      	cmp	r6, #0
 8008358:	da03      	bge.n	8008362 <_printf_i+0xd2>
 800835a:	232d      	movs	r3, #45	; 0x2d
 800835c:	4276      	negs	r6, r6
 800835e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008362:	485a      	ldr	r0, [pc, #360]	; (80084cc <_printf_i+0x23c>)
 8008364:	230a      	movs	r3, #10
 8008366:	e012      	b.n	800838e <_printf_i+0xfe>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	6820      	ldr	r0, [r4, #0]
 800836c:	1d19      	adds	r1, r3, #4
 800836e:	6029      	str	r1, [r5, #0]
 8008370:	0605      	lsls	r5, r0, #24
 8008372:	d501      	bpl.n	8008378 <_printf_i+0xe8>
 8008374:	681e      	ldr	r6, [r3, #0]
 8008376:	e002      	b.n	800837e <_printf_i+0xee>
 8008378:	0641      	lsls	r1, r0, #25
 800837a:	d5fb      	bpl.n	8008374 <_printf_i+0xe4>
 800837c:	881e      	ldrh	r6, [r3, #0]
 800837e:	4853      	ldr	r0, [pc, #332]	; (80084cc <_printf_i+0x23c>)
 8008380:	2f6f      	cmp	r7, #111	; 0x6f
 8008382:	bf0c      	ite	eq
 8008384:	2308      	moveq	r3, #8
 8008386:	230a      	movne	r3, #10
 8008388:	2100      	movs	r1, #0
 800838a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800838e:	6865      	ldr	r5, [r4, #4]
 8008390:	60a5      	str	r5, [r4, #8]
 8008392:	2d00      	cmp	r5, #0
 8008394:	bfa2      	ittt	ge
 8008396:	6821      	ldrge	r1, [r4, #0]
 8008398:	f021 0104 	bicge.w	r1, r1, #4
 800839c:	6021      	strge	r1, [r4, #0]
 800839e:	b90e      	cbnz	r6, 80083a4 <_printf_i+0x114>
 80083a0:	2d00      	cmp	r5, #0
 80083a2:	d04b      	beq.n	800843c <_printf_i+0x1ac>
 80083a4:	4615      	mov	r5, r2
 80083a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80083aa:	fb03 6711 	mls	r7, r3, r1, r6
 80083ae:	5dc7      	ldrb	r7, [r0, r7]
 80083b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083b4:	4637      	mov	r7, r6
 80083b6:	42bb      	cmp	r3, r7
 80083b8:	460e      	mov	r6, r1
 80083ba:	d9f4      	bls.n	80083a6 <_printf_i+0x116>
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d10b      	bne.n	80083d8 <_printf_i+0x148>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	07de      	lsls	r6, r3, #31
 80083c4:	d508      	bpl.n	80083d8 <_printf_i+0x148>
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	6861      	ldr	r1, [r4, #4]
 80083ca:	4299      	cmp	r1, r3
 80083cc:	bfde      	ittt	le
 80083ce:	2330      	movle	r3, #48	; 0x30
 80083d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083d8:	1b52      	subs	r2, r2, r5
 80083da:	6122      	str	r2, [r4, #16]
 80083dc:	f8cd a000 	str.w	sl, [sp]
 80083e0:	464b      	mov	r3, r9
 80083e2:	aa03      	add	r2, sp, #12
 80083e4:	4621      	mov	r1, r4
 80083e6:	4640      	mov	r0, r8
 80083e8:	f7ff fee4 	bl	80081b4 <_printf_common>
 80083ec:	3001      	adds	r0, #1
 80083ee:	d14a      	bne.n	8008486 <_printf_i+0x1f6>
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	b004      	add	sp, #16
 80083f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	f043 0320 	orr.w	r3, r3, #32
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	4833      	ldr	r0, [pc, #204]	; (80084d0 <_printf_i+0x240>)
 8008404:	2778      	movs	r7, #120	; 0x78
 8008406:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	6829      	ldr	r1, [r5, #0]
 800840e:	061f      	lsls	r7, r3, #24
 8008410:	f851 6b04 	ldr.w	r6, [r1], #4
 8008414:	d402      	bmi.n	800841c <_printf_i+0x18c>
 8008416:	065f      	lsls	r7, r3, #25
 8008418:	bf48      	it	mi
 800841a:	b2b6      	uxthmi	r6, r6
 800841c:	07df      	lsls	r7, r3, #31
 800841e:	bf48      	it	mi
 8008420:	f043 0320 	orrmi.w	r3, r3, #32
 8008424:	6029      	str	r1, [r5, #0]
 8008426:	bf48      	it	mi
 8008428:	6023      	strmi	r3, [r4, #0]
 800842a:	b91e      	cbnz	r6, 8008434 <_printf_i+0x1a4>
 800842c:	6823      	ldr	r3, [r4, #0]
 800842e:	f023 0320 	bic.w	r3, r3, #32
 8008432:	6023      	str	r3, [r4, #0]
 8008434:	2310      	movs	r3, #16
 8008436:	e7a7      	b.n	8008388 <_printf_i+0xf8>
 8008438:	4824      	ldr	r0, [pc, #144]	; (80084cc <_printf_i+0x23c>)
 800843a:	e7e4      	b.n	8008406 <_printf_i+0x176>
 800843c:	4615      	mov	r5, r2
 800843e:	e7bd      	b.n	80083bc <_printf_i+0x12c>
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	6826      	ldr	r6, [r4, #0]
 8008444:	6961      	ldr	r1, [r4, #20]
 8008446:	1d18      	adds	r0, r3, #4
 8008448:	6028      	str	r0, [r5, #0]
 800844a:	0635      	lsls	r5, r6, #24
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	d501      	bpl.n	8008454 <_printf_i+0x1c4>
 8008450:	6019      	str	r1, [r3, #0]
 8008452:	e002      	b.n	800845a <_printf_i+0x1ca>
 8008454:	0670      	lsls	r0, r6, #25
 8008456:	d5fb      	bpl.n	8008450 <_printf_i+0x1c0>
 8008458:	8019      	strh	r1, [r3, #0]
 800845a:	2300      	movs	r3, #0
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	4615      	mov	r5, r2
 8008460:	e7bc      	b.n	80083dc <_printf_i+0x14c>
 8008462:	682b      	ldr	r3, [r5, #0]
 8008464:	1d1a      	adds	r2, r3, #4
 8008466:	602a      	str	r2, [r5, #0]
 8008468:	681d      	ldr	r5, [r3, #0]
 800846a:	6862      	ldr	r2, [r4, #4]
 800846c:	2100      	movs	r1, #0
 800846e:	4628      	mov	r0, r5
 8008470:	f7f7 feae 	bl	80001d0 <memchr>
 8008474:	b108      	cbz	r0, 800847a <_printf_i+0x1ea>
 8008476:	1b40      	subs	r0, r0, r5
 8008478:	6060      	str	r0, [r4, #4]
 800847a:	6863      	ldr	r3, [r4, #4]
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	2300      	movs	r3, #0
 8008480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008484:	e7aa      	b.n	80083dc <_printf_i+0x14c>
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	462a      	mov	r2, r5
 800848a:	4649      	mov	r1, r9
 800848c:	4640      	mov	r0, r8
 800848e:	47d0      	blx	sl
 8008490:	3001      	adds	r0, #1
 8008492:	d0ad      	beq.n	80083f0 <_printf_i+0x160>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	079b      	lsls	r3, r3, #30
 8008498:	d413      	bmi.n	80084c2 <_printf_i+0x232>
 800849a:	68e0      	ldr	r0, [r4, #12]
 800849c:	9b03      	ldr	r3, [sp, #12]
 800849e:	4298      	cmp	r0, r3
 80084a0:	bfb8      	it	lt
 80084a2:	4618      	movlt	r0, r3
 80084a4:	e7a6      	b.n	80083f4 <_printf_i+0x164>
 80084a6:	2301      	movs	r3, #1
 80084a8:	4632      	mov	r2, r6
 80084aa:	4649      	mov	r1, r9
 80084ac:	4640      	mov	r0, r8
 80084ae:	47d0      	blx	sl
 80084b0:	3001      	adds	r0, #1
 80084b2:	d09d      	beq.n	80083f0 <_printf_i+0x160>
 80084b4:	3501      	adds	r5, #1
 80084b6:	68e3      	ldr	r3, [r4, #12]
 80084b8:	9903      	ldr	r1, [sp, #12]
 80084ba:	1a5b      	subs	r3, r3, r1
 80084bc:	42ab      	cmp	r3, r5
 80084be:	dcf2      	bgt.n	80084a6 <_printf_i+0x216>
 80084c0:	e7eb      	b.n	800849a <_printf_i+0x20a>
 80084c2:	2500      	movs	r5, #0
 80084c4:	f104 0619 	add.w	r6, r4, #25
 80084c8:	e7f5      	b.n	80084b6 <_printf_i+0x226>
 80084ca:	bf00      	nop
 80084cc:	0800cfcb 	.word	0x0800cfcb
 80084d0:	0800cfdc 	.word	0x0800cfdc

080084d4 <std>:
 80084d4:	2300      	movs	r3, #0
 80084d6:	b510      	push	{r4, lr}
 80084d8:	4604      	mov	r4, r0
 80084da:	e9c0 3300 	strd	r3, r3, [r0]
 80084de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084e2:	6083      	str	r3, [r0, #8]
 80084e4:	8181      	strh	r1, [r0, #12]
 80084e6:	6643      	str	r3, [r0, #100]	; 0x64
 80084e8:	81c2      	strh	r2, [r0, #14]
 80084ea:	6183      	str	r3, [r0, #24]
 80084ec:	4619      	mov	r1, r3
 80084ee:	2208      	movs	r2, #8
 80084f0:	305c      	adds	r0, #92	; 0x5c
 80084f2:	f000 f8e2 	bl	80086ba <memset>
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <std+0x38>)
 80084f8:	6263      	str	r3, [r4, #36]	; 0x24
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <std+0x3c>)
 80084fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <std+0x40>)
 8008500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008502:	4b05      	ldr	r3, [pc, #20]	; (8008518 <std+0x44>)
 8008504:	6224      	str	r4, [r4, #32]
 8008506:	6323      	str	r3, [r4, #48]	; 0x30
 8008508:	bd10      	pop	{r4, pc}
 800850a:	bf00      	nop
 800850c:	08008635 	.word	0x08008635
 8008510:	08008657 	.word	0x08008657
 8008514:	0800868f 	.word	0x0800868f
 8008518:	080086b3 	.word	0x080086b3

0800851c <stdio_exit_handler>:
 800851c:	4a02      	ldr	r2, [pc, #8]	; (8008528 <stdio_exit_handler+0xc>)
 800851e:	4903      	ldr	r1, [pc, #12]	; (800852c <stdio_exit_handler+0x10>)
 8008520:	4803      	ldr	r0, [pc, #12]	; (8008530 <stdio_exit_handler+0x14>)
 8008522:	f000 b869 	b.w	80085f8 <_fwalk_sglue>
 8008526:	bf00      	nop
 8008528:	20000048 	.word	0x20000048
 800852c:	08009eb1 	.word	0x08009eb1
 8008530:	20000054 	.word	0x20000054

08008534 <cleanup_stdio>:
 8008534:	6841      	ldr	r1, [r0, #4]
 8008536:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <cleanup_stdio+0x34>)
 8008538:	4299      	cmp	r1, r3
 800853a:	b510      	push	{r4, lr}
 800853c:	4604      	mov	r4, r0
 800853e:	d001      	beq.n	8008544 <cleanup_stdio+0x10>
 8008540:	f001 fcb6 	bl	8009eb0 <_fflush_r>
 8008544:	68a1      	ldr	r1, [r4, #8]
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <cleanup_stdio+0x38>)
 8008548:	4299      	cmp	r1, r3
 800854a:	d002      	beq.n	8008552 <cleanup_stdio+0x1e>
 800854c:	4620      	mov	r0, r4
 800854e:	f001 fcaf 	bl	8009eb0 <_fflush_r>
 8008552:	68e1      	ldr	r1, [r4, #12]
 8008554:	4b06      	ldr	r3, [pc, #24]	; (8008570 <cleanup_stdio+0x3c>)
 8008556:	4299      	cmp	r1, r3
 8008558:	d004      	beq.n	8008564 <cleanup_stdio+0x30>
 800855a:	4620      	mov	r0, r4
 800855c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008560:	f001 bca6 	b.w	8009eb0 <_fflush_r>
 8008564:	bd10      	pop	{r4, pc}
 8008566:	bf00      	nop
 8008568:	20000cb4 	.word	0x20000cb4
 800856c:	20000d1c 	.word	0x20000d1c
 8008570:	20000d84 	.word	0x20000d84

08008574 <global_stdio_init.part.0>:
 8008574:	b510      	push	{r4, lr}
 8008576:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <global_stdio_init.part.0+0x30>)
 8008578:	4c0b      	ldr	r4, [pc, #44]	; (80085a8 <global_stdio_init.part.0+0x34>)
 800857a:	4a0c      	ldr	r2, [pc, #48]	; (80085ac <global_stdio_init.part.0+0x38>)
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	4620      	mov	r0, r4
 8008580:	2200      	movs	r2, #0
 8008582:	2104      	movs	r1, #4
 8008584:	f7ff ffa6 	bl	80084d4 <std>
 8008588:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800858c:	2201      	movs	r2, #1
 800858e:	2109      	movs	r1, #9
 8008590:	f7ff ffa0 	bl	80084d4 <std>
 8008594:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008598:	2202      	movs	r2, #2
 800859a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859e:	2112      	movs	r1, #18
 80085a0:	f7ff bf98 	b.w	80084d4 <std>
 80085a4:	20000dec 	.word	0x20000dec
 80085a8:	20000cb4 	.word	0x20000cb4
 80085ac:	0800851d 	.word	0x0800851d

080085b0 <__sfp_lock_acquire>:
 80085b0:	4801      	ldr	r0, [pc, #4]	; (80085b8 <__sfp_lock_acquire+0x8>)
 80085b2:	f000 b8ff 	b.w	80087b4 <__retarget_lock_acquire_recursive>
 80085b6:	bf00      	nop
 80085b8:	20000df5 	.word	0x20000df5

080085bc <__sfp_lock_release>:
 80085bc:	4801      	ldr	r0, [pc, #4]	; (80085c4 <__sfp_lock_release+0x8>)
 80085be:	f000 b8fa 	b.w	80087b6 <__retarget_lock_release_recursive>
 80085c2:	bf00      	nop
 80085c4:	20000df5 	.word	0x20000df5

080085c8 <__sinit>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	4604      	mov	r4, r0
 80085cc:	f7ff fff0 	bl	80085b0 <__sfp_lock_acquire>
 80085d0:	6a23      	ldr	r3, [r4, #32]
 80085d2:	b11b      	cbz	r3, 80085dc <__sinit+0x14>
 80085d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d8:	f7ff bff0 	b.w	80085bc <__sfp_lock_release>
 80085dc:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <__sinit+0x28>)
 80085de:	6223      	str	r3, [r4, #32]
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <__sinit+0x2c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1f5      	bne.n	80085d4 <__sinit+0xc>
 80085e8:	f7ff ffc4 	bl	8008574 <global_stdio_init.part.0>
 80085ec:	e7f2      	b.n	80085d4 <__sinit+0xc>
 80085ee:	bf00      	nop
 80085f0:	08008535 	.word	0x08008535
 80085f4:	20000dec 	.word	0x20000dec

080085f8 <_fwalk_sglue>:
 80085f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085fc:	4607      	mov	r7, r0
 80085fe:	4688      	mov	r8, r1
 8008600:	4614      	mov	r4, r2
 8008602:	2600      	movs	r6, #0
 8008604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008608:	f1b9 0901 	subs.w	r9, r9, #1
 800860c:	d505      	bpl.n	800861a <_fwalk_sglue+0x22>
 800860e:	6824      	ldr	r4, [r4, #0]
 8008610:	2c00      	cmp	r4, #0
 8008612:	d1f7      	bne.n	8008604 <_fwalk_sglue+0xc>
 8008614:	4630      	mov	r0, r6
 8008616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d907      	bls.n	8008630 <_fwalk_sglue+0x38>
 8008620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008624:	3301      	adds	r3, #1
 8008626:	d003      	beq.n	8008630 <_fwalk_sglue+0x38>
 8008628:	4629      	mov	r1, r5
 800862a:	4638      	mov	r0, r7
 800862c:	47c0      	blx	r8
 800862e:	4306      	orrs	r6, r0
 8008630:	3568      	adds	r5, #104	; 0x68
 8008632:	e7e9      	b.n	8008608 <_fwalk_sglue+0x10>

08008634 <__sread>:
 8008634:	b510      	push	{r4, lr}
 8008636:	460c      	mov	r4, r1
 8008638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800863c:	f000 f86c 	bl	8008718 <_read_r>
 8008640:	2800      	cmp	r0, #0
 8008642:	bfab      	itete	ge
 8008644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008646:	89a3      	ldrhlt	r3, [r4, #12]
 8008648:	181b      	addge	r3, r3, r0
 800864a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800864e:	bfac      	ite	ge
 8008650:	6563      	strge	r3, [r4, #84]	; 0x54
 8008652:	81a3      	strhlt	r3, [r4, #12]
 8008654:	bd10      	pop	{r4, pc}

08008656 <__swrite>:
 8008656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800865a:	461f      	mov	r7, r3
 800865c:	898b      	ldrh	r3, [r1, #12]
 800865e:	05db      	lsls	r3, r3, #23
 8008660:	4605      	mov	r5, r0
 8008662:	460c      	mov	r4, r1
 8008664:	4616      	mov	r6, r2
 8008666:	d505      	bpl.n	8008674 <__swrite+0x1e>
 8008668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800866c:	2302      	movs	r3, #2
 800866e:	2200      	movs	r2, #0
 8008670:	f000 f840 	bl	80086f4 <_lseek_r>
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800867a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800867e:	81a3      	strh	r3, [r4, #12]
 8008680:	4632      	mov	r2, r6
 8008682:	463b      	mov	r3, r7
 8008684:	4628      	mov	r0, r5
 8008686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800868a:	f000 b857 	b.w	800873c <_write_r>

0800868e <__sseek>:
 800868e:	b510      	push	{r4, lr}
 8008690:	460c      	mov	r4, r1
 8008692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008696:	f000 f82d 	bl	80086f4 <_lseek_r>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	bf15      	itete	ne
 80086a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80086a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086aa:	81a3      	strheq	r3, [r4, #12]
 80086ac:	bf18      	it	ne
 80086ae:	81a3      	strhne	r3, [r4, #12]
 80086b0:	bd10      	pop	{r4, pc}

080086b2 <__sclose>:
 80086b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b6:	f000 b80d 	b.w	80086d4 <_close_r>

080086ba <memset>:
 80086ba:	4402      	add	r2, r0
 80086bc:	4603      	mov	r3, r0
 80086be:	4293      	cmp	r3, r2
 80086c0:	d100      	bne.n	80086c4 <memset+0xa>
 80086c2:	4770      	bx	lr
 80086c4:	f803 1b01 	strb.w	r1, [r3], #1
 80086c8:	e7f9      	b.n	80086be <memset+0x4>
	...

080086cc <_localeconv_r>:
 80086cc:	4800      	ldr	r0, [pc, #0]	; (80086d0 <_localeconv_r+0x4>)
 80086ce:	4770      	bx	lr
 80086d0:	20000194 	.word	0x20000194

080086d4 <_close_r>:
 80086d4:	b538      	push	{r3, r4, r5, lr}
 80086d6:	4d06      	ldr	r5, [pc, #24]	; (80086f0 <_close_r+0x1c>)
 80086d8:	2300      	movs	r3, #0
 80086da:	4604      	mov	r4, r0
 80086dc:	4608      	mov	r0, r1
 80086de:	602b      	str	r3, [r5, #0]
 80086e0:	f7fc ff08 	bl	80054f4 <_close>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_close_r+0x1a>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_close_r+0x1a>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	20000df0 	.word	0x20000df0

080086f4 <_lseek_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4d07      	ldr	r5, [pc, #28]	; (8008714 <_lseek_r+0x20>)
 80086f8:	4604      	mov	r4, r0
 80086fa:	4608      	mov	r0, r1
 80086fc:	4611      	mov	r1, r2
 80086fe:	2200      	movs	r2, #0
 8008700:	602a      	str	r2, [r5, #0]
 8008702:	461a      	mov	r2, r3
 8008704:	f7fc ff00 	bl	8005508 <_lseek>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_lseek_r+0x1e>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_lseek_r+0x1e>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	20000df0 	.word	0x20000df0

08008718 <_read_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4d07      	ldr	r5, [pc, #28]	; (8008738 <_read_r+0x20>)
 800871c:	4604      	mov	r4, r0
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	2200      	movs	r2, #0
 8008724:	602a      	str	r2, [r5, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7fc fec6 	bl	80054b8 <_read>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_read_r+0x1e>
 8008730:	682b      	ldr	r3, [r5, #0]
 8008732:	b103      	cbz	r3, 8008736 <_read_r+0x1e>
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	20000df0 	.word	0x20000df0

0800873c <_write_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d07      	ldr	r5, [pc, #28]	; (800875c <_write_r+0x20>)
 8008740:	4604      	mov	r4, r0
 8008742:	4608      	mov	r0, r1
 8008744:	4611      	mov	r1, r2
 8008746:	2200      	movs	r2, #0
 8008748:	602a      	str	r2, [r5, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	f7fc fec4 	bl	80054d8 <_write>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_write_r+0x1e>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_write_r+0x1e>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	20000df0 	.word	0x20000df0

08008760 <__errno>:
 8008760:	4b01      	ldr	r3, [pc, #4]	; (8008768 <__errno+0x8>)
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	200000a0 	.word	0x200000a0

0800876c <__libc_init_array>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4d0d      	ldr	r5, [pc, #52]	; (80087a4 <__libc_init_array+0x38>)
 8008770:	4c0d      	ldr	r4, [pc, #52]	; (80087a8 <__libc_init_array+0x3c>)
 8008772:	1b64      	subs	r4, r4, r5
 8008774:	10a4      	asrs	r4, r4, #2
 8008776:	2600      	movs	r6, #0
 8008778:	42a6      	cmp	r6, r4
 800877a:	d109      	bne.n	8008790 <__libc_init_array+0x24>
 800877c:	4d0b      	ldr	r5, [pc, #44]	; (80087ac <__libc_init_array+0x40>)
 800877e:	4c0c      	ldr	r4, [pc, #48]	; (80087b0 <__libc_init_array+0x44>)
 8008780:	f004 fb6a 	bl	800ce58 <_init>
 8008784:	1b64      	subs	r4, r4, r5
 8008786:	10a4      	asrs	r4, r4, #2
 8008788:	2600      	movs	r6, #0
 800878a:	42a6      	cmp	r6, r4
 800878c:	d105      	bne.n	800879a <__libc_init_array+0x2e>
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	f855 3b04 	ldr.w	r3, [r5], #4
 8008794:	4798      	blx	r3
 8008796:	3601      	adds	r6, #1
 8008798:	e7ee      	b.n	8008778 <__libc_init_array+0xc>
 800879a:	f855 3b04 	ldr.w	r3, [r5], #4
 800879e:	4798      	blx	r3
 80087a0:	3601      	adds	r6, #1
 80087a2:	e7f2      	b.n	800878a <__libc_init_array+0x1e>
 80087a4:	0800d438 	.word	0x0800d438
 80087a8:	0800d438 	.word	0x0800d438
 80087ac:	0800d438 	.word	0x0800d438
 80087b0:	0800d43c 	.word	0x0800d43c

080087b4 <__retarget_lock_acquire_recursive>:
 80087b4:	4770      	bx	lr

080087b6 <__retarget_lock_release_recursive>:
 80087b6:	4770      	bx	lr

080087b8 <quorem>:
 80087b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087bc:	6903      	ldr	r3, [r0, #16]
 80087be:	690c      	ldr	r4, [r1, #16]
 80087c0:	42a3      	cmp	r3, r4
 80087c2:	4607      	mov	r7, r0
 80087c4:	db7e      	blt.n	80088c4 <quorem+0x10c>
 80087c6:	3c01      	subs	r4, #1
 80087c8:	f101 0814 	add.w	r8, r1, #20
 80087cc:	f100 0514 	add.w	r5, r0, #20
 80087d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087de:	3301      	adds	r3, #1
 80087e0:	429a      	cmp	r2, r3
 80087e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80087ee:	d331      	bcc.n	8008854 <quorem+0x9c>
 80087f0:	f04f 0e00 	mov.w	lr, #0
 80087f4:	4640      	mov	r0, r8
 80087f6:	46ac      	mov	ip, r5
 80087f8:	46f2      	mov	sl, lr
 80087fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80087fe:	b293      	uxth	r3, r2
 8008800:	fb06 e303 	mla	r3, r6, r3, lr
 8008804:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008808:	0c1a      	lsrs	r2, r3, #16
 800880a:	b29b      	uxth	r3, r3
 800880c:	ebaa 0303 	sub.w	r3, sl, r3
 8008810:	f8dc a000 	ldr.w	sl, [ip]
 8008814:	fa13 f38a 	uxtah	r3, r3, sl
 8008818:	fb06 220e 	mla	r2, r6, lr, r2
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	9b00      	ldr	r3, [sp, #0]
 8008820:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008824:	b292      	uxth	r2, r2
 8008826:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800882a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800882e:	f8bd 3000 	ldrh.w	r3, [sp]
 8008832:	4581      	cmp	r9, r0
 8008834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008838:	f84c 3b04 	str.w	r3, [ip], #4
 800883c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008840:	d2db      	bcs.n	80087fa <quorem+0x42>
 8008842:	f855 300b 	ldr.w	r3, [r5, fp]
 8008846:	b92b      	cbnz	r3, 8008854 <quorem+0x9c>
 8008848:	9b01      	ldr	r3, [sp, #4]
 800884a:	3b04      	subs	r3, #4
 800884c:	429d      	cmp	r5, r3
 800884e:	461a      	mov	r2, r3
 8008850:	d32c      	bcc.n	80088ac <quorem+0xf4>
 8008852:	613c      	str	r4, [r7, #16]
 8008854:	4638      	mov	r0, r7
 8008856:	f001 f9a5 	bl	8009ba4 <__mcmp>
 800885a:	2800      	cmp	r0, #0
 800885c:	db22      	blt.n	80088a4 <quorem+0xec>
 800885e:	3601      	adds	r6, #1
 8008860:	4629      	mov	r1, r5
 8008862:	2000      	movs	r0, #0
 8008864:	f858 2b04 	ldr.w	r2, [r8], #4
 8008868:	f8d1 c000 	ldr.w	ip, [r1]
 800886c:	b293      	uxth	r3, r2
 800886e:	1ac3      	subs	r3, r0, r3
 8008870:	0c12      	lsrs	r2, r2, #16
 8008872:	fa13 f38c 	uxtah	r3, r3, ip
 8008876:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800887a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800887e:	b29b      	uxth	r3, r3
 8008880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008884:	45c1      	cmp	r9, r8
 8008886:	f841 3b04 	str.w	r3, [r1], #4
 800888a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800888e:	d2e9      	bcs.n	8008864 <quorem+0xac>
 8008890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008894:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008898:	b922      	cbnz	r2, 80088a4 <quorem+0xec>
 800889a:	3b04      	subs	r3, #4
 800889c:	429d      	cmp	r5, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	d30a      	bcc.n	80088b8 <quorem+0x100>
 80088a2:	613c      	str	r4, [r7, #16]
 80088a4:	4630      	mov	r0, r6
 80088a6:	b003      	add	sp, #12
 80088a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ac:	6812      	ldr	r2, [r2, #0]
 80088ae:	3b04      	subs	r3, #4
 80088b0:	2a00      	cmp	r2, #0
 80088b2:	d1ce      	bne.n	8008852 <quorem+0x9a>
 80088b4:	3c01      	subs	r4, #1
 80088b6:	e7c9      	b.n	800884c <quorem+0x94>
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	3b04      	subs	r3, #4
 80088bc:	2a00      	cmp	r2, #0
 80088be:	d1f0      	bne.n	80088a2 <quorem+0xea>
 80088c0:	3c01      	subs	r4, #1
 80088c2:	e7eb      	b.n	800889c <quorem+0xe4>
 80088c4:	2000      	movs	r0, #0
 80088c6:	e7ee      	b.n	80088a6 <quorem+0xee>

080088c8 <_dtoa_r>:
 80088c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088cc:	ed2d 8b04 	vpush	{d8-d9}
 80088d0:	69c5      	ldr	r5, [r0, #28]
 80088d2:	b093      	sub	sp, #76	; 0x4c
 80088d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80088d8:	ec57 6b10 	vmov	r6, r7, d0
 80088dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088e0:	9107      	str	r1, [sp, #28]
 80088e2:	4604      	mov	r4, r0
 80088e4:	920a      	str	r2, [sp, #40]	; 0x28
 80088e6:	930d      	str	r3, [sp, #52]	; 0x34
 80088e8:	b975      	cbnz	r5, 8008908 <_dtoa_r+0x40>
 80088ea:	2010      	movs	r0, #16
 80088ec:	f000 fe2a 	bl	8009544 <malloc>
 80088f0:	4602      	mov	r2, r0
 80088f2:	61e0      	str	r0, [r4, #28]
 80088f4:	b920      	cbnz	r0, 8008900 <_dtoa_r+0x38>
 80088f6:	4bae      	ldr	r3, [pc, #696]	; (8008bb0 <_dtoa_r+0x2e8>)
 80088f8:	21ef      	movs	r1, #239	; 0xef
 80088fa:	48ae      	ldr	r0, [pc, #696]	; (8008bb4 <_dtoa_r+0x2ec>)
 80088fc:	f001 fb1e 	bl	8009f3c <__assert_func>
 8008900:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008904:	6005      	str	r5, [r0, #0]
 8008906:	60c5      	str	r5, [r0, #12]
 8008908:	69e3      	ldr	r3, [r4, #28]
 800890a:	6819      	ldr	r1, [r3, #0]
 800890c:	b151      	cbz	r1, 8008924 <_dtoa_r+0x5c>
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	604a      	str	r2, [r1, #4]
 8008912:	2301      	movs	r3, #1
 8008914:	4093      	lsls	r3, r2
 8008916:	608b      	str	r3, [r1, #8]
 8008918:	4620      	mov	r0, r4
 800891a:	f000 ff07 	bl	800972c <_Bfree>
 800891e:	69e3      	ldr	r3, [r4, #28]
 8008920:	2200      	movs	r2, #0
 8008922:	601a      	str	r2, [r3, #0]
 8008924:	1e3b      	subs	r3, r7, #0
 8008926:	bfbb      	ittet	lt
 8008928:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800892c:	9303      	strlt	r3, [sp, #12]
 800892e:	2300      	movge	r3, #0
 8008930:	2201      	movlt	r2, #1
 8008932:	bfac      	ite	ge
 8008934:	f8c8 3000 	strge.w	r3, [r8]
 8008938:	f8c8 2000 	strlt.w	r2, [r8]
 800893c:	4b9e      	ldr	r3, [pc, #632]	; (8008bb8 <_dtoa_r+0x2f0>)
 800893e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008942:	ea33 0308 	bics.w	r3, r3, r8
 8008946:	d11b      	bne.n	8008980 <_dtoa_r+0xb8>
 8008948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800894a:	f242 730f 	movw	r3, #9999	; 0x270f
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008954:	4333      	orrs	r3, r6
 8008956:	f000 8593 	beq.w	8009480 <_dtoa_r+0xbb8>
 800895a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800895c:	b963      	cbnz	r3, 8008978 <_dtoa_r+0xb0>
 800895e:	4b97      	ldr	r3, [pc, #604]	; (8008bbc <_dtoa_r+0x2f4>)
 8008960:	e027      	b.n	80089b2 <_dtoa_r+0xea>
 8008962:	4b97      	ldr	r3, [pc, #604]	; (8008bc0 <_dtoa_r+0x2f8>)
 8008964:	9300      	str	r3, [sp, #0]
 8008966:	3308      	adds	r3, #8
 8008968:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	9800      	ldr	r0, [sp, #0]
 800896e:	b013      	add	sp, #76	; 0x4c
 8008970:	ecbd 8b04 	vpop	{d8-d9}
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	4b90      	ldr	r3, [pc, #576]	; (8008bbc <_dtoa_r+0x2f4>)
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	3303      	adds	r3, #3
 800897e:	e7f3      	b.n	8008968 <_dtoa_r+0xa0>
 8008980:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008984:	2200      	movs	r2, #0
 8008986:	ec51 0b17 	vmov	r0, r1, d7
 800898a:	eeb0 8a47 	vmov.f32	s16, s14
 800898e:	eef0 8a67 	vmov.f32	s17, s15
 8008992:	2300      	movs	r3, #0
 8008994:	f7f8 f898 	bl	8000ac8 <__aeabi_dcmpeq>
 8008998:	4681      	mov	r9, r0
 800899a:	b160      	cbz	r0, 80089b6 <_dtoa_r+0xee>
 800899c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800899e:	2301      	movs	r3, #1
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f000 8568 	beq.w	800947a <_dtoa_r+0xbb2>
 80089aa:	4b86      	ldr	r3, [pc, #536]	; (8008bc4 <_dtoa_r+0x2fc>)
 80089ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	e7da      	b.n	800896c <_dtoa_r+0xa4>
 80089b6:	aa10      	add	r2, sp, #64	; 0x40
 80089b8:	a911      	add	r1, sp, #68	; 0x44
 80089ba:	4620      	mov	r0, r4
 80089bc:	eeb0 0a48 	vmov.f32	s0, s16
 80089c0:	eef0 0a68 	vmov.f32	s1, s17
 80089c4:	f001 f994 	bl	8009cf0 <__d2b>
 80089c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80089cc:	4682      	mov	sl, r0
 80089ce:	2d00      	cmp	r5, #0
 80089d0:	d07f      	beq.n	8008ad2 <_dtoa_r+0x20a>
 80089d2:	ee18 3a90 	vmov	r3, s17
 80089d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80089de:	ec51 0b18 	vmov	r0, r1, d8
 80089e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80089e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80089ee:	4619      	mov	r1, r3
 80089f0:	2200      	movs	r2, #0
 80089f2:	4b75      	ldr	r3, [pc, #468]	; (8008bc8 <_dtoa_r+0x300>)
 80089f4:	f7f7 fc48 	bl	8000288 <__aeabi_dsub>
 80089f8:	a367      	add	r3, pc, #412	; (adr r3, 8008b98 <_dtoa_r+0x2d0>)
 80089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fe:	f7f7 fdfb 	bl	80005f8 <__aeabi_dmul>
 8008a02:	a367      	add	r3, pc, #412	; (adr r3, 8008ba0 <_dtoa_r+0x2d8>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f7f7 fc40 	bl	800028c <__adddf3>
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	4628      	mov	r0, r5
 8008a10:	460f      	mov	r7, r1
 8008a12:	f7f7 fd87 	bl	8000524 <__aeabi_i2d>
 8008a16:	a364      	add	r3, pc, #400	; (adr r3, 8008ba8 <_dtoa_r+0x2e0>)
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f7f7 fdec 	bl	80005f8 <__aeabi_dmul>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f7 fc30 	bl	800028c <__adddf3>
 8008a2c:	4606      	mov	r6, r0
 8008a2e:	460f      	mov	r7, r1
 8008a30:	f7f8 f892 	bl	8000b58 <__aeabi_d2iz>
 8008a34:	2200      	movs	r2, #0
 8008a36:	4683      	mov	fp, r0
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	4639      	mov	r1, r7
 8008a3e:	f7f8 f84d 	bl	8000adc <__aeabi_dcmplt>
 8008a42:	b148      	cbz	r0, 8008a58 <_dtoa_r+0x190>
 8008a44:	4658      	mov	r0, fp
 8008a46:	f7f7 fd6d 	bl	8000524 <__aeabi_i2d>
 8008a4a:	4632      	mov	r2, r6
 8008a4c:	463b      	mov	r3, r7
 8008a4e:	f7f8 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a52:	b908      	cbnz	r0, 8008a58 <_dtoa_r+0x190>
 8008a54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a58:	f1bb 0f16 	cmp.w	fp, #22
 8008a5c:	d857      	bhi.n	8008b0e <_dtoa_r+0x246>
 8008a5e:	4b5b      	ldr	r3, [pc, #364]	; (8008bcc <_dtoa_r+0x304>)
 8008a60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	ec51 0b18 	vmov	r0, r1, d8
 8008a6c:	f7f8 f836 	bl	8000adc <__aeabi_dcmplt>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d04e      	beq.n	8008b12 <_dtoa_r+0x24a>
 8008a74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a78:	2300      	movs	r3, #0
 8008a7a:	930c      	str	r3, [sp, #48]	; 0x30
 8008a7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a7e:	1b5b      	subs	r3, r3, r5
 8008a80:	1e5a      	subs	r2, r3, #1
 8008a82:	bf45      	ittet	mi
 8008a84:	f1c3 0301 	rsbmi	r3, r3, #1
 8008a88:	9305      	strmi	r3, [sp, #20]
 8008a8a:	2300      	movpl	r3, #0
 8008a8c:	2300      	movmi	r3, #0
 8008a8e:	9206      	str	r2, [sp, #24]
 8008a90:	bf54      	ite	pl
 8008a92:	9305      	strpl	r3, [sp, #20]
 8008a94:	9306      	strmi	r3, [sp, #24]
 8008a96:	f1bb 0f00 	cmp.w	fp, #0
 8008a9a:	db3c      	blt.n	8008b16 <_dtoa_r+0x24e>
 8008a9c:	9b06      	ldr	r3, [sp, #24]
 8008a9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008aa2:	445b      	add	r3, fp
 8008aa4:	9306      	str	r3, [sp, #24]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	9308      	str	r3, [sp, #32]
 8008aaa:	9b07      	ldr	r3, [sp, #28]
 8008aac:	2b09      	cmp	r3, #9
 8008aae:	d868      	bhi.n	8008b82 <_dtoa_r+0x2ba>
 8008ab0:	2b05      	cmp	r3, #5
 8008ab2:	bfc4      	itt	gt
 8008ab4:	3b04      	subgt	r3, #4
 8008ab6:	9307      	strgt	r3, [sp, #28]
 8008ab8:	9b07      	ldr	r3, [sp, #28]
 8008aba:	f1a3 0302 	sub.w	r3, r3, #2
 8008abe:	bfcc      	ite	gt
 8008ac0:	2500      	movgt	r5, #0
 8008ac2:	2501      	movle	r5, #1
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	f200 8085 	bhi.w	8008bd4 <_dtoa_r+0x30c>
 8008aca:	e8df f003 	tbb	[pc, r3]
 8008ace:	3b2e      	.short	0x3b2e
 8008ad0:	5839      	.short	0x5839
 8008ad2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ad6:	441d      	add	r5, r3
 8008ad8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008adc:	2b20      	cmp	r3, #32
 8008ade:	bfc1      	itttt	gt
 8008ae0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ae4:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ae8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008aec:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008af0:	bfd6      	itet	le
 8008af2:	f1c3 0320 	rsble	r3, r3, #32
 8008af6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008afa:	fa06 f003 	lslle.w	r0, r6, r3
 8008afe:	f7f7 fd01 	bl	8000504 <__aeabi_ui2d>
 8008b02:	2201      	movs	r2, #1
 8008b04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008b08:	3d01      	subs	r5, #1
 8008b0a:	920e      	str	r2, [sp, #56]	; 0x38
 8008b0c:	e76f      	b.n	80089ee <_dtoa_r+0x126>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e7b3      	b.n	8008a7a <_dtoa_r+0x1b2>
 8008b12:	900c      	str	r0, [sp, #48]	; 0x30
 8008b14:	e7b2      	b.n	8008a7c <_dtoa_r+0x1b4>
 8008b16:	9b05      	ldr	r3, [sp, #20]
 8008b18:	eba3 030b 	sub.w	r3, r3, fp
 8008b1c:	9305      	str	r3, [sp, #20]
 8008b1e:	f1cb 0300 	rsb	r3, fp, #0
 8008b22:	9308      	str	r3, [sp, #32]
 8008b24:	2300      	movs	r3, #0
 8008b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b28:	e7bf      	b.n	8008aaa <_dtoa_r+0x1e2>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	dc52      	bgt.n	8008bda <_dtoa_r+0x312>
 8008b34:	2301      	movs	r3, #1
 8008b36:	9301      	str	r3, [sp, #4]
 8008b38:	9304      	str	r3, [sp, #16]
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	920a      	str	r2, [sp, #40]	; 0x28
 8008b3e:	e00b      	b.n	8008b58 <_dtoa_r+0x290>
 8008b40:	2301      	movs	r3, #1
 8008b42:	e7f3      	b.n	8008b2c <_dtoa_r+0x264>
 8008b44:	2300      	movs	r3, #0
 8008b46:	9309      	str	r3, [sp, #36]	; 0x24
 8008b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b4a:	445b      	add	r3, fp
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	9304      	str	r3, [sp, #16]
 8008b54:	bfb8      	it	lt
 8008b56:	2301      	movlt	r3, #1
 8008b58:	69e0      	ldr	r0, [r4, #28]
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	f102 0614 	add.w	r6, r2, #20
 8008b62:	429e      	cmp	r6, r3
 8008b64:	d93d      	bls.n	8008be2 <_dtoa_r+0x31a>
 8008b66:	6041      	str	r1, [r0, #4]
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 fd9f 	bl	80096ac <_Balloc>
 8008b6e:	9000      	str	r0, [sp, #0]
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d139      	bne.n	8008be8 <_dtoa_r+0x320>
 8008b74:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <_dtoa_r+0x308>)
 8008b76:	4602      	mov	r2, r0
 8008b78:	f240 11af 	movw	r1, #431	; 0x1af
 8008b7c:	e6bd      	b.n	80088fa <_dtoa_r+0x32>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e7e1      	b.n	8008b46 <_dtoa_r+0x27e>
 8008b82:	2501      	movs	r5, #1
 8008b84:	2300      	movs	r3, #0
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	9509      	str	r5, [sp, #36]	; 0x24
 8008b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	2200      	movs	r2, #0
 8008b94:	2312      	movs	r3, #18
 8008b96:	e7d1      	b.n	8008b3c <_dtoa_r+0x274>
 8008b98:	636f4361 	.word	0x636f4361
 8008b9c:	3fd287a7 	.word	0x3fd287a7
 8008ba0:	8b60c8b3 	.word	0x8b60c8b3
 8008ba4:	3fc68a28 	.word	0x3fc68a28
 8008ba8:	509f79fb 	.word	0x509f79fb
 8008bac:	3fd34413 	.word	0x3fd34413
 8008bb0:	0800cffa 	.word	0x0800cffa
 8008bb4:	0800d011 	.word	0x0800d011
 8008bb8:	7ff00000 	.word	0x7ff00000
 8008bbc:	0800cff6 	.word	0x0800cff6
 8008bc0:	0800cfed 	.word	0x0800cfed
 8008bc4:	0800cfca 	.word	0x0800cfca
 8008bc8:	3ff80000 	.word	0x3ff80000
 8008bcc:	0800d100 	.word	0x0800d100
 8008bd0:	0800d069 	.word	0x0800d069
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd8:	e7d7      	b.n	8008b8a <_dtoa_r+0x2c2>
 8008bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	9304      	str	r3, [sp, #16]
 8008be0:	e7ba      	b.n	8008b58 <_dtoa_r+0x290>
 8008be2:	3101      	adds	r1, #1
 8008be4:	0052      	lsls	r2, r2, #1
 8008be6:	e7ba      	b.n	8008b5e <_dtoa_r+0x296>
 8008be8:	69e3      	ldr	r3, [r4, #28]
 8008bea:	9a00      	ldr	r2, [sp, #0]
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	9b04      	ldr	r3, [sp, #16]
 8008bf0:	2b0e      	cmp	r3, #14
 8008bf2:	f200 80a8 	bhi.w	8008d46 <_dtoa_r+0x47e>
 8008bf6:	2d00      	cmp	r5, #0
 8008bf8:	f000 80a5 	beq.w	8008d46 <_dtoa_r+0x47e>
 8008bfc:	f1bb 0f00 	cmp.w	fp, #0
 8008c00:	dd38      	ble.n	8008c74 <_dtoa_r+0x3ac>
 8008c02:	4bc0      	ldr	r3, [pc, #768]	; (8008f04 <_dtoa_r+0x63c>)
 8008c04:	f00b 020f 	and.w	r2, fp, #15
 8008c08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008c10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008c14:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008c18:	d019      	beq.n	8008c4e <_dtoa_r+0x386>
 8008c1a:	4bbb      	ldr	r3, [pc, #748]	; (8008f08 <_dtoa_r+0x640>)
 8008c1c:	ec51 0b18 	vmov	r0, r1, d8
 8008c20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c24:	f7f7 fe12 	bl	800084c <__aeabi_ddiv>
 8008c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c2c:	f008 080f 	and.w	r8, r8, #15
 8008c30:	2503      	movs	r5, #3
 8008c32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008f08 <_dtoa_r+0x640>
 8008c36:	f1b8 0f00 	cmp.w	r8, #0
 8008c3a:	d10a      	bne.n	8008c52 <_dtoa_r+0x38a>
 8008c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c40:	4632      	mov	r2, r6
 8008c42:	463b      	mov	r3, r7
 8008c44:	f7f7 fe02 	bl	800084c <__aeabi_ddiv>
 8008c48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c4c:	e02b      	b.n	8008ca6 <_dtoa_r+0x3de>
 8008c4e:	2502      	movs	r5, #2
 8008c50:	e7ef      	b.n	8008c32 <_dtoa_r+0x36a>
 8008c52:	f018 0f01 	tst.w	r8, #1
 8008c56:	d008      	beq.n	8008c6a <_dtoa_r+0x3a2>
 8008c58:	4630      	mov	r0, r6
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008c60:	f7f7 fcca 	bl	80005f8 <__aeabi_dmul>
 8008c64:	3501      	adds	r5, #1
 8008c66:	4606      	mov	r6, r0
 8008c68:	460f      	mov	r7, r1
 8008c6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c6e:	f109 0908 	add.w	r9, r9, #8
 8008c72:	e7e0      	b.n	8008c36 <_dtoa_r+0x36e>
 8008c74:	f000 809f 	beq.w	8008db6 <_dtoa_r+0x4ee>
 8008c78:	f1cb 0600 	rsb	r6, fp, #0
 8008c7c:	4ba1      	ldr	r3, [pc, #644]	; (8008f04 <_dtoa_r+0x63c>)
 8008c7e:	4fa2      	ldr	r7, [pc, #648]	; (8008f08 <_dtoa_r+0x640>)
 8008c80:	f006 020f 	and.w	r2, r6, #15
 8008c84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	ec51 0b18 	vmov	r0, r1, d8
 8008c90:	f7f7 fcb2 	bl	80005f8 <__aeabi_dmul>
 8008c94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c98:	1136      	asrs	r6, r6, #4
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2502      	movs	r5, #2
 8008c9e:	2e00      	cmp	r6, #0
 8008ca0:	d17e      	bne.n	8008da0 <_dtoa_r+0x4d8>
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1d0      	bne.n	8008c48 <_dtoa_r+0x380>
 8008ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ca8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	f000 8084 	beq.w	8008dba <_dtoa_r+0x4f2>
 8008cb2:	4b96      	ldr	r3, [pc, #600]	; (8008f0c <_dtoa_r+0x644>)
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4640      	mov	r0, r8
 8008cb8:	4649      	mov	r1, r9
 8008cba:	f7f7 ff0f 	bl	8000adc <__aeabi_dcmplt>
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	d07b      	beq.n	8008dba <_dtoa_r+0x4f2>
 8008cc2:	9b04      	ldr	r3, [sp, #16]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d078      	beq.n	8008dba <_dtoa_r+0x4f2>
 8008cc8:	9b01      	ldr	r3, [sp, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dd39      	ble.n	8008d42 <_dtoa_r+0x47a>
 8008cce:	4b90      	ldr	r3, [pc, #576]	; (8008f10 <_dtoa_r+0x648>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	f7f7 fc8f 	bl	80005f8 <__aeabi_dmul>
 8008cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cde:	9e01      	ldr	r6, [sp, #4]
 8008ce0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008ce4:	3501      	adds	r5, #1
 8008ce6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008cea:	4628      	mov	r0, r5
 8008cec:	f7f7 fc1a 	bl	8000524 <__aeabi_i2d>
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	464b      	mov	r3, r9
 8008cf4:	f7f7 fc80 	bl	80005f8 <__aeabi_dmul>
 8008cf8:	4b86      	ldr	r3, [pc, #536]	; (8008f14 <_dtoa_r+0x64c>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f7f7 fac6 	bl	800028c <__adddf3>
 8008d00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008d04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d08:	9303      	str	r3, [sp, #12]
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	d158      	bne.n	8008dc0 <_dtoa_r+0x4f8>
 8008d0e:	4b82      	ldr	r3, [pc, #520]	; (8008f18 <_dtoa_r+0x650>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	4640      	mov	r0, r8
 8008d14:	4649      	mov	r1, r9
 8008d16:	f7f7 fab7 	bl	8000288 <__aeabi_dsub>
 8008d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d1e:	4680      	mov	r8, r0
 8008d20:	4689      	mov	r9, r1
 8008d22:	f7f7 fef9 	bl	8000b18 <__aeabi_dcmpgt>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	f040 8296 	bne.w	8009258 <_dtoa_r+0x990>
 8008d2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d30:	4640      	mov	r0, r8
 8008d32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d36:	4649      	mov	r1, r9
 8008d38:	f7f7 fed0 	bl	8000adc <__aeabi_dcmplt>
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	f040 8289 	bne.w	8009254 <_dtoa_r+0x98c>
 8008d42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f2c0 814e 	blt.w	8008fea <_dtoa_r+0x722>
 8008d4e:	f1bb 0f0e 	cmp.w	fp, #14
 8008d52:	f300 814a 	bgt.w	8008fea <_dtoa_r+0x722>
 8008d56:	4b6b      	ldr	r3, [pc, #428]	; (8008f04 <_dtoa_r+0x63c>)
 8008d58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f280 80dc 	bge.w	8008f20 <_dtoa_r+0x658>
 8008d68:	9b04      	ldr	r3, [sp, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	f300 80d8 	bgt.w	8008f20 <_dtoa_r+0x658>
 8008d70:	f040 826f 	bne.w	8009252 <_dtoa_r+0x98a>
 8008d74:	4b68      	ldr	r3, [pc, #416]	; (8008f18 <_dtoa_r+0x650>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	4640      	mov	r0, r8
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	f7f7 fc3c 	bl	80005f8 <__aeabi_dmul>
 8008d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d84:	f7f7 febe 	bl	8000b04 <__aeabi_dcmpge>
 8008d88:	9e04      	ldr	r6, [sp, #16]
 8008d8a:	4637      	mov	r7, r6
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	f040 8245 	bne.w	800921c <_dtoa_r+0x954>
 8008d92:	9d00      	ldr	r5, [sp, #0]
 8008d94:	2331      	movs	r3, #49	; 0x31
 8008d96:	f805 3b01 	strb.w	r3, [r5], #1
 8008d9a:	f10b 0b01 	add.w	fp, fp, #1
 8008d9e:	e241      	b.n	8009224 <_dtoa_r+0x95c>
 8008da0:	07f2      	lsls	r2, r6, #31
 8008da2:	d505      	bpl.n	8008db0 <_dtoa_r+0x4e8>
 8008da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da8:	f7f7 fc26 	bl	80005f8 <__aeabi_dmul>
 8008dac:	3501      	adds	r5, #1
 8008dae:	2301      	movs	r3, #1
 8008db0:	1076      	asrs	r6, r6, #1
 8008db2:	3708      	adds	r7, #8
 8008db4:	e773      	b.n	8008c9e <_dtoa_r+0x3d6>
 8008db6:	2502      	movs	r5, #2
 8008db8:	e775      	b.n	8008ca6 <_dtoa_r+0x3de>
 8008dba:	9e04      	ldr	r6, [sp, #16]
 8008dbc:	465f      	mov	r7, fp
 8008dbe:	e792      	b.n	8008ce6 <_dtoa_r+0x41e>
 8008dc0:	9900      	ldr	r1, [sp, #0]
 8008dc2:	4b50      	ldr	r3, [pc, #320]	; (8008f04 <_dtoa_r+0x63c>)
 8008dc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dc8:	4431      	add	r1, r6
 8008dca:	9102      	str	r1, [sp, #8]
 8008dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008dce:	eeb0 9a47 	vmov.f32	s18, s14
 8008dd2:	eef0 9a67 	vmov.f32	s19, s15
 8008dd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008dda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008dde:	2900      	cmp	r1, #0
 8008de0:	d044      	beq.n	8008e6c <_dtoa_r+0x5a4>
 8008de2:	494e      	ldr	r1, [pc, #312]	; (8008f1c <_dtoa_r+0x654>)
 8008de4:	2000      	movs	r0, #0
 8008de6:	f7f7 fd31 	bl	800084c <__aeabi_ddiv>
 8008dea:	ec53 2b19 	vmov	r2, r3, d9
 8008dee:	f7f7 fa4b 	bl	8000288 <__aeabi_dsub>
 8008df2:	9d00      	ldr	r5, [sp, #0]
 8008df4:	ec41 0b19 	vmov	d9, r0, r1
 8008df8:	4649      	mov	r1, r9
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	f7f7 feac 	bl	8000b58 <__aeabi_d2iz>
 8008e00:	4606      	mov	r6, r0
 8008e02:	f7f7 fb8f 	bl	8000524 <__aeabi_i2d>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4640      	mov	r0, r8
 8008e0c:	4649      	mov	r1, r9
 8008e0e:	f7f7 fa3b 	bl	8000288 <__aeabi_dsub>
 8008e12:	3630      	adds	r6, #48	; 0x30
 8008e14:	f805 6b01 	strb.w	r6, [r5], #1
 8008e18:	ec53 2b19 	vmov	r2, r3, d9
 8008e1c:	4680      	mov	r8, r0
 8008e1e:	4689      	mov	r9, r1
 8008e20:	f7f7 fe5c 	bl	8000adc <__aeabi_dcmplt>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d164      	bne.n	8008ef2 <_dtoa_r+0x62a>
 8008e28:	4642      	mov	r2, r8
 8008e2a:	464b      	mov	r3, r9
 8008e2c:	4937      	ldr	r1, [pc, #220]	; (8008f0c <_dtoa_r+0x644>)
 8008e2e:	2000      	movs	r0, #0
 8008e30:	f7f7 fa2a 	bl	8000288 <__aeabi_dsub>
 8008e34:	ec53 2b19 	vmov	r2, r3, d9
 8008e38:	f7f7 fe50 	bl	8000adc <__aeabi_dcmplt>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	f040 80b6 	bne.w	8008fae <_dtoa_r+0x6e6>
 8008e42:	9b02      	ldr	r3, [sp, #8]
 8008e44:	429d      	cmp	r5, r3
 8008e46:	f43f af7c 	beq.w	8008d42 <_dtoa_r+0x47a>
 8008e4a:	4b31      	ldr	r3, [pc, #196]	; (8008f10 <_dtoa_r+0x648>)
 8008e4c:	ec51 0b19 	vmov	r0, r1, d9
 8008e50:	2200      	movs	r2, #0
 8008e52:	f7f7 fbd1 	bl	80005f8 <__aeabi_dmul>
 8008e56:	4b2e      	ldr	r3, [pc, #184]	; (8008f10 <_dtoa_r+0x648>)
 8008e58:	ec41 0b19 	vmov	d9, r0, r1
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4649      	mov	r1, r9
 8008e62:	f7f7 fbc9 	bl	80005f8 <__aeabi_dmul>
 8008e66:	4680      	mov	r8, r0
 8008e68:	4689      	mov	r9, r1
 8008e6a:	e7c5      	b.n	8008df8 <_dtoa_r+0x530>
 8008e6c:	ec51 0b17 	vmov	r0, r1, d7
 8008e70:	f7f7 fbc2 	bl	80005f8 <__aeabi_dmul>
 8008e74:	9b02      	ldr	r3, [sp, #8]
 8008e76:	9d00      	ldr	r5, [sp, #0]
 8008e78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e7a:	ec41 0b19 	vmov	d9, r0, r1
 8008e7e:	4649      	mov	r1, r9
 8008e80:	4640      	mov	r0, r8
 8008e82:	f7f7 fe69 	bl	8000b58 <__aeabi_d2iz>
 8008e86:	4606      	mov	r6, r0
 8008e88:	f7f7 fb4c 	bl	8000524 <__aeabi_i2d>
 8008e8c:	3630      	adds	r6, #48	; 0x30
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 f9f7 	bl	8000288 <__aeabi_dsub>
 8008e9a:	f805 6b01 	strb.w	r6, [r5], #1
 8008e9e:	9b02      	ldr	r3, [sp, #8]
 8008ea0:	429d      	cmp	r5, r3
 8008ea2:	4680      	mov	r8, r0
 8008ea4:	4689      	mov	r9, r1
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	d124      	bne.n	8008ef6 <_dtoa_r+0x62e>
 8008eac:	4b1b      	ldr	r3, [pc, #108]	; (8008f1c <_dtoa_r+0x654>)
 8008eae:	ec51 0b19 	vmov	r0, r1, d9
 8008eb2:	f7f7 f9eb 	bl	800028c <__adddf3>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4640      	mov	r0, r8
 8008ebc:	4649      	mov	r1, r9
 8008ebe:	f7f7 fe2b 	bl	8000b18 <__aeabi_dcmpgt>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d173      	bne.n	8008fae <_dtoa_r+0x6e6>
 8008ec6:	ec53 2b19 	vmov	r2, r3, d9
 8008eca:	4914      	ldr	r1, [pc, #80]	; (8008f1c <_dtoa_r+0x654>)
 8008ecc:	2000      	movs	r0, #0
 8008ece:	f7f7 f9db 	bl	8000288 <__aeabi_dsub>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 fdff 	bl	8000adc <__aeabi_dcmplt>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f43f af2f 	beq.w	8008d42 <_dtoa_r+0x47a>
 8008ee4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ee6:	1e6b      	subs	r3, r5, #1
 8008ee8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008eea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008eee:	2b30      	cmp	r3, #48	; 0x30
 8008ef0:	d0f8      	beq.n	8008ee4 <_dtoa_r+0x61c>
 8008ef2:	46bb      	mov	fp, r7
 8008ef4:	e04a      	b.n	8008f8c <_dtoa_r+0x6c4>
 8008ef6:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <_dtoa_r+0x648>)
 8008ef8:	f7f7 fb7e 	bl	80005f8 <__aeabi_dmul>
 8008efc:	4680      	mov	r8, r0
 8008efe:	4689      	mov	r9, r1
 8008f00:	e7bd      	b.n	8008e7e <_dtoa_r+0x5b6>
 8008f02:	bf00      	nop
 8008f04:	0800d100 	.word	0x0800d100
 8008f08:	0800d0d8 	.word	0x0800d0d8
 8008f0c:	3ff00000 	.word	0x3ff00000
 8008f10:	40240000 	.word	0x40240000
 8008f14:	401c0000 	.word	0x401c0000
 8008f18:	40140000 	.word	0x40140000
 8008f1c:	3fe00000 	.word	0x3fe00000
 8008f20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f24:	9d00      	ldr	r5, [sp, #0]
 8008f26:	4642      	mov	r2, r8
 8008f28:	464b      	mov	r3, r9
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	4639      	mov	r1, r7
 8008f2e:	f7f7 fc8d 	bl	800084c <__aeabi_ddiv>
 8008f32:	f7f7 fe11 	bl	8000b58 <__aeabi_d2iz>
 8008f36:	9001      	str	r0, [sp, #4]
 8008f38:	f7f7 faf4 	bl	8000524 <__aeabi_i2d>
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	464b      	mov	r3, r9
 8008f40:	f7f7 fb5a 	bl	80005f8 <__aeabi_dmul>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4630      	mov	r0, r6
 8008f4a:	4639      	mov	r1, r7
 8008f4c:	f7f7 f99c 	bl	8000288 <__aeabi_dsub>
 8008f50:	9e01      	ldr	r6, [sp, #4]
 8008f52:	9f04      	ldr	r7, [sp, #16]
 8008f54:	3630      	adds	r6, #48	; 0x30
 8008f56:	f805 6b01 	strb.w	r6, [r5], #1
 8008f5a:	9e00      	ldr	r6, [sp, #0]
 8008f5c:	1bae      	subs	r6, r5, r6
 8008f5e:	42b7      	cmp	r7, r6
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	d134      	bne.n	8008fd0 <_dtoa_r+0x708>
 8008f66:	f7f7 f991 	bl	800028c <__adddf3>
 8008f6a:	4642      	mov	r2, r8
 8008f6c:	464b      	mov	r3, r9
 8008f6e:	4606      	mov	r6, r0
 8008f70:	460f      	mov	r7, r1
 8008f72:	f7f7 fdd1 	bl	8000b18 <__aeabi_dcmpgt>
 8008f76:	b9c8      	cbnz	r0, 8008fac <_dtoa_r+0x6e4>
 8008f78:	4642      	mov	r2, r8
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	4639      	mov	r1, r7
 8008f80:	f7f7 fda2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f84:	b110      	cbz	r0, 8008f8c <_dtoa_r+0x6c4>
 8008f86:	9b01      	ldr	r3, [sp, #4]
 8008f88:	07db      	lsls	r3, r3, #31
 8008f8a:	d40f      	bmi.n	8008fac <_dtoa_r+0x6e4>
 8008f8c:	4651      	mov	r1, sl
 8008f8e:	4620      	mov	r0, r4
 8008f90:	f000 fbcc 	bl	800972c <_Bfree>
 8008f94:	2300      	movs	r3, #0
 8008f96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f98:	702b      	strb	r3, [r5, #0]
 8008f9a:	f10b 0301 	add.w	r3, fp, #1
 8008f9e:	6013      	str	r3, [r2, #0]
 8008fa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f43f ace2 	beq.w	800896c <_dtoa_r+0xa4>
 8008fa8:	601d      	str	r5, [r3, #0]
 8008faa:	e4df      	b.n	800896c <_dtoa_r+0xa4>
 8008fac:	465f      	mov	r7, fp
 8008fae:	462b      	mov	r3, r5
 8008fb0:	461d      	mov	r5, r3
 8008fb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fb6:	2a39      	cmp	r2, #57	; 0x39
 8008fb8:	d106      	bne.n	8008fc8 <_dtoa_r+0x700>
 8008fba:	9a00      	ldr	r2, [sp, #0]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d1f7      	bne.n	8008fb0 <_dtoa_r+0x6e8>
 8008fc0:	9900      	ldr	r1, [sp, #0]
 8008fc2:	2230      	movs	r2, #48	; 0x30
 8008fc4:	3701      	adds	r7, #1
 8008fc6:	700a      	strb	r2, [r1, #0]
 8008fc8:	781a      	ldrb	r2, [r3, #0]
 8008fca:	3201      	adds	r2, #1
 8008fcc:	701a      	strb	r2, [r3, #0]
 8008fce:	e790      	b.n	8008ef2 <_dtoa_r+0x62a>
 8008fd0:	4ba3      	ldr	r3, [pc, #652]	; (8009260 <_dtoa_r+0x998>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f7f7 fb10 	bl	80005f8 <__aeabi_dmul>
 8008fd8:	2200      	movs	r2, #0
 8008fda:	2300      	movs	r3, #0
 8008fdc:	4606      	mov	r6, r0
 8008fde:	460f      	mov	r7, r1
 8008fe0:	f7f7 fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d09e      	beq.n	8008f26 <_dtoa_r+0x65e>
 8008fe8:	e7d0      	b.n	8008f8c <_dtoa_r+0x6c4>
 8008fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fec:	2a00      	cmp	r2, #0
 8008fee:	f000 80ca 	beq.w	8009186 <_dtoa_r+0x8be>
 8008ff2:	9a07      	ldr	r2, [sp, #28]
 8008ff4:	2a01      	cmp	r2, #1
 8008ff6:	f300 80ad 	bgt.w	8009154 <_dtoa_r+0x88c>
 8008ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ffc:	2a00      	cmp	r2, #0
 8008ffe:	f000 80a5 	beq.w	800914c <_dtoa_r+0x884>
 8009002:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009006:	9e08      	ldr	r6, [sp, #32]
 8009008:	9d05      	ldr	r5, [sp, #20]
 800900a:	9a05      	ldr	r2, [sp, #20]
 800900c:	441a      	add	r2, r3
 800900e:	9205      	str	r2, [sp, #20]
 8009010:	9a06      	ldr	r2, [sp, #24]
 8009012:	2101      	movs	r1, #1
 8009014:	441a      	add	r2, r3
 8009016:	4620      	mov	r0, r4
 8009018:	9206      	str	r2, [sp, #24]
 800901a:	f000 fc3d 	bl	8009898 <__i2b>
 800901e:	4607      	mov	r7, r0
 8009020:	b165      	cbz	r5, 800903c <_dtoa_r+0x774>
 8009022:	9b06      	ldr	r3, [sp, #24]
 8009024:	2b00      	cmp	r3, #0
 8009026:	dd09      	ble.n	800903c <_dtoa_r+0x774>
 8009028:	42ab      	cmp	r3, r5
 800902a:	9a05      	ldr	r2, [sp, #20]
 800902c:	bfa8      	it	ge
 800902e:	462b      	movge	r3, r5
 8009030:	1ad2      	subs	r2, r2, r3
 8009032:	9205      	str	r2, [sp, #20]
 8009034:	9a06      	ldr	r2, [sp, #24]
 8009036:	1aed      	subs	r5, r5, r3
 8009038:	1ad3      	subs	r3, r2, r3
 800903a:	9306      	str	r3, [sp, #24]
 800903c:	9b08      	ldr	r3, [sp, #32]
 800903e:	b1f3      	cbz	r3, 800907e <_dtoa_r+0x7b6>
 8009040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 80a3 	beq.w	800918e <_dtoa_r+0x8c6>
 8009048:	2e00      	cmp	r6, #0
 800904a:	dd10      	ble.n	800906e <_dtoa_r+0x7a6>
 800904c:	4639      	mov	r1, r7
 800904e:	4632      	mov	r2, r6
 8009050:	4620      	mov	r0, r4
 8009052:	f000 fce1 	bl	8009a18 <__pow5mult>
 8009056:	4652      	mov	r2, sl
 8009058:	4601      	mov	r1, r0
 800905a:	4607      	mov	r7, r0
 800905c:	4620      	mov	r0, r4
 800905e:	f000 fc31 	bl	80098c4 <__multiply>
 8009062:	4651      	mov	r1, sl
 8009064:	4680      	mov	r8, r0
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fb60 	bl	800972c <_Bfree>
 800906c:	46c2      	mov	sl, r8
 800906e:	9b08      	ldr	r3, [sp, #32]
 8009070:	1b9a      	subs	r2, r3, r6
 8009072:	d004      	beq.n	800907e <_dtoa_r+0x7b6>
 8009074:	4651      	mov	r1, sl
 8009076:	4620      	mov	r0, r4
 8009078:	f000 fcce 	bl	8009a18 <__pow5mult>
 800907c:	4682      	mov	sl, r0
 800907e:	2101      	movs	r1, #1
 8009080:	4620      	mov	r0, r4
 8009082:	f000 fc09 	bl	8009898 <__i2b>
 8009086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009088:	2b00      	cmp	r3, #0
 800908a:	4606      	mov	r6, r0
 800908c:	f340 8081 	ble.w	8009192 <_dtoa_r+0x8ca>
 8009090:	461a      	mov	r2, r3
 8009092:	4601      	mov	r1, r0
 8009094:	4620      	mov	r0, r4
 8009096:	f000 fcbf 	bl	8009a18 <__pow5mult>
 800909a:	9b07      	ldr	r3, [sp, #28]
 800909c:	2b01      	cmp	r3, #1
 800909e:	4606      	mov	r6, r0
 80090a0:	dd7a      	ble.n	8009198 <_dtoa_r+0x8d0>
 80090a2:	f04f 0800 	mov.w	r8, #0
 80090a6:	6933      	ldr	r3, [r6, #16]
 80090a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090ac:	6918      	ldr	r0, [r3, #16]
 80090ae:	f000 fba5 	bl	80097fc <__hi0bits>
 80090b2:	f1c0 0020 	rsb	r0, r0, #32
 80090b6:	9b06      	ldr	r3, [sp, #24]
 80090b8:	4418      	add	r0, r3
 80090ba:	f010 001f 	ands.w	r0, r0, #31
 80090be:	f000 8094 	beq.w	80091ea <_dtoa_r+0x922>
 80090c2:	f1c0 0320 	rsb	r3, r0, #32
 80090c6:	2b04      	cmp	r3, #4
 80090c8:	f340 8085 	ble.w	80091d6 <_dtoa_r+0x90e>
 80090cc:	9b05      	ldr	r3, [sp, #20]
 80090ce:	f1c0 001c 	rsb	r0, r0, #28
 80090d2:	4403      	add	r3, r0
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	9b06      	ldr	r3, [sp, #24]
 80090d8:	4403      	add	r3, r0
 80090da:	4405      	add	r5, r0
 80090dc:	9306      	str	r3, [sp, #24]
 80090de:	9b05      	ldr	r3, [sp, #20]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dd05      	ble.n	80090f0 <_dtoa_r+0x828>
 80090e4:	4651      	mov	r1, sl
 80090e6:	461a      	mov	r2, r3
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 fcef 	bl	8009acc <__lshift>
 80090ee:	4682      	mov	sl, r0
 80090f0:	9b06      	ldr	r3, [sp, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	dd05      	ble.n	8009102 <_dtoa_r+0x83a>
 80090f6:	4631      	mov	r1, r6
 80090f8:	461a      	mov	r2, r3
 80090fa:	4620      	mov	r0, r4
 80090fc:	f000 fce6 	bl	8009acc <__lshift>
 8009100:	4606      	mov	r6, r0
 8009102:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009104:	2b00      	cmp	r3, #0
 8009106:	d072      	beq.n	80091ee <_dtoa_r+0x926>
 8009108:	4631      	mov	r1, r6
 800910a:	4650      	mov	r0, sl
 800910c:	f000 fd4a 	bl	8009ba4 <__mcmp>
 8009110:	2800      	cmp	r0, #0
 8009112:	da6c      	bge.n	80091ee <_dtoa_r+0x926>
 8009114:	2300      	movs	r3, #0
 8009116:	4651      	mov	r1, sl
 8009118:	220a      	movs	r2, #10
 800911a:	4620      	mov	r0, r4
 800911c:	f000 fb28 	bl	8009770 <__multadd>
 8009120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009122:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009126:	4682      	mov	sl, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	f000 81b0 	beq.w	800948e <_dtoa_r+0xbc6>
 800912e:	2300      	movs	r3, #0
 8009130:	4639      	mov	r1, r7
 8009132:	220a      	movs	r2, #10
 8009134:	4620      	mov	r0, r4
 8009136:	f000 fb1b 	bl	8009770 <__multadd>
 800913a:	9b01      	ldr	r3, [sp, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	4607      	mov	r7, r0
 8009140:	f300 8096 	bgt.w	8009270 <_dtoa_r+0x9a8>
 8009144:	9b07      	ldr	r3, [sp, #28]
 8009146:	2b02      	cmp	r3, #2
 8009148:	dc59      	bgt.n	80091fe <_dtoa_r+0x936>
 800914a:	e091      	b.n	8009270 <_dtoa_r+0x9a8>
 800914c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800914e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009152:	e758      	b.n	8009006 <_dtoa_r+0x73e>
 8009154:	9b04      	ldr	r3, [sp, #16]
 8009156:	1e5e      	subs	r6, r3, #1
 8009158:	9b08      	ldr	r3, [sp, #32]
 800915a:	42b3      	cmp	r3, r6
 800915c:	bfbf      	itttt	lt
 800915e:	9b08      	ldrlt	r3, [sp, #32]
 8009160:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009162:	9608      	strlt	r6, [sp, #32]
 8009164:	1af3      	sublt	r3, r6, r3
 8009166:	bfb4      	ite	lt
 8009168:	18d2      	addlt	r2, r2, r3
 800916a:	1b9e      	subge	r6, r3, r6
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	bfbc      	itt	lt
 8009170:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009172:	2600      	movlt	r6, #0
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfb7      	itett	lt
 8009178:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800917c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009180:	1a9d      	sublt	r5, r3, r2
 8009182:	2300      	movlt	r3, #0
 8009184:	e741      	b.n	800900a <_dtoa_r+0x742>
 8009186:	9e08      	ldr	r6, [sp, #32]
 8009188:	9d05      	ldr	r5, [sp, #20]
 800918a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800918c:	e748      	b.n	8009020 <_dtoa_r+0x758>
 800918e:	9a08      	ldr	r2, [sp, #32]
 8009190:	e770      	b.n	8009074 <_dtoa_r+0x7ac>
 8009192:	9b07      	ldr	r3, [sp, #28]
 8009194:	2b01      	cmp	r3, #1
 8009196:	dc19      	bgt.n	80091cc <_dtoa_r+0x904>
 8009198:	9b02      	ldr	r3, [sp, #8]
 800919a:	b9bb      	cbnz	r3, 80091cc <_dtoa_r+0x904>
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091a2:	b99b      	cbnz	r3, 80091cc <_dtoa_r+0x904>
 80091a4:	9b03      	ldr	r3, [sp, #12]
 80091a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091aa:	0d1b      	lsrs	r3, r3, #20
 80091ac:	051b      	lsls	r3, r3, #20
 80091ae:	b183      	cbz	r3, 80091d2 <_dtoa_r+0x90a>
 80091b0:	9b05      	ldr	r3, [sp, #20]
 80091b2:	3301      	adds	r3, #1
 80091b4:	9305      	str	r3, [sp, #20]
 80091b6:	9b06      	ldr	r3, [sp, #24]
 80091b8:	3301      	adds	r3, #1
 80091ba:	9306      	str	r3, [sp, #24]
 80091bc:	f04f 0801 	mov.w	r8, #1
 80091c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f47f af6f 	bne.w	80090a6 <_dtoa_r+0x7de>
 80091c8:	2001      	movs	r0, #1
 80091ca:	e774      	b.n	80090b6 <_dtoa_r+0x7ee>
 80091cc:	f04f 0800 	mov.w	r8, #0
 80091d0:	e7f6      	b.n	80091c0 <_dtoa_r+0x8f8>
 80091d2:	4698      	mov	r8, r3
 80091d4:	e7f4      	b.n	80091c0 <_dtoa_r+0x8f8>
 80091d6:	d082      	beq.n	80090de <_dtoa_r+0x816>
 80091d8:	9a05      	ldr	r2, [sp, #20]
 80091da:	331c      	adds	r3, #28
 80091dc:	441a      	add	r2, r3
 80091de:	9205      	str	r2, [sp, #20]
 80091e0:	9a06      	ldr	r2, [sp, #24]
 80091e2:	441a      	add	r2, r3
 80091e4:	441d      	add	r5, r3
 80091e6:	9206      	str	r2, [sp, #24]
 80091e8:	e779      	b.n	80090de <_dtoa_r+0x816>
 80091ea:	4603      	mov	r3, r0
 80091ec:	e7f4      	b.n	80091d8 <_dtoa_r+0x910>
 80091ee:	9b04      	ldr	r3, [sp, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	dc37      	bgt.n	8009264 <_dtoa_r+0x99c>
 80091f4:	9b07      	ldr	r3, [sp, #28]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	dd34      	ble.n	8009264 <_dtoa_r+0x99c>
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	9301      	str	r3, [sp, #4]
 80091fe:	9b01      	ldr	r3, [sp, #4]
 8009200:	b963      	cbnz	r3, 800921c <_dtoa_r+0x954>
 8009202:	4631      	mov	r1, r6
 8009204:	2205      	movs	r2, #5
 8009206:	4620      	mov	r0, r4
 8009208:	f000 fab2 	bl	8009770 <__multadd>
 800920c:	4601      	mov	r1, r0
 800920e:	4606      	mov	r6, r0
 8009210:	4650      	mov	r0, sl
 8009212:	f000 fcc7 	bl	8009ba4 <__mcmp>
 8009216:	2800      	cmp	r0, #0
 8009218:	f73f adbb 	bgt.w	8008d92 <_dtoa_r+0x4ca>
 800921c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921e:	9d00      	ldr	r5, [sp, #0]
 8009220:	ea6f 0b03 	mvn.w	fp, r3
 8009224:	f04f 0800 	mov.w	r8, #0
 8009228:	4631      	mov	r1, r6
 800922a:	4620      	mov	r0, r4
 800922c:	f000 fa7e 	bl	800972c <_Bfree>
 8009230:	2f00      	cmp	r7, #0
 8009232:	f43f aeab 	beq.w	8008f8c <_dtoa_r+0x6c4>
 8009236:	f1b8 0f00 	cmp.w	r8, #0
 800923a:	d005      	beq.n	8009248 <_dtoa_r+0x980>
 800923c:	45b8      	cmp	r8, r7
 800923e:	d003      	beq.n	8009248 <_dtoa_r+0x980>
 8009240:	4641      	mov	r1, r8
 8009242:	4620      	mov	r0, r4
 8009244:	f000 fa72 	bl	800972c <_Bfree>
 8009248:	4639      	mov	r1, r7
 800924a:	4620      	mov	r0, r4
 800924c:	f000 fa6e 	bl	800972c <_Bfree>
 8009250:	e69c      	b.n	8008f8c <_dtoa_r+0x6c4>
 8009252:	2600      	movs	r6, #0
 8009254:	4637      	mov	r7, r6
 8009256:	e7e1      	b.n	800921c <_dtoa_r+0x954>
 8009258:	46bb      	mov	fp, r7
 800925a:	4637      	mov	r7, r6
 800925c:	e599      	b.n	8008d92 <_dtoa_r+0x4ca>
 800925e:	bf00      	nop
 8009260:	40240000 	.word	0x40240000
 8009264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 80c8 	beq.w	80093fc <_dtoa_r+0xb34>
 800926c:	9b04      	ldr	r3, [sp, #16]
 800926e:	9301      	str	r3, [sp, #4]
 8009270:	2d00      	cmp	r5, #0
 8009272:	dd05      	ble.n	8009280 <_dtoa_r+0x9b8>
 8009274:	4639      	mov	r1, r7
 8009276:	462a      	mov	r2, r5
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fc27 	bl	8009acc <__lshift>
 800927e:	4607      	mov	r7, r0
 8009280:	f1b8 0f00 	cmp.w	r8, #0
 8009284:	d05b      	beq.n	800933e <_dtoa_r+0xa76>
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	4620      	mov	r0, r4
 800928a:	f000 fa0f 	bl	80096ac <_Balloc>
 800928e:	4605      	mov	r5, r0
 8009290:	b928      	cbnz	r0, 800929e <_dtoa_r+0x9d6>
 8009292:	4b83      	ldr	r3, [pc, #524]	; (80094a0 <_dtoa_r+0xbd8>)
 8009294:	4602      	mov	r2, r0
 8009296:	f240 21ef 	movw	r1, #751	; 0x2ef
 800929a:	f7ff bb2e 	b.w	80088fa <_dtoa_r+0x32>
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	3202      	adds	r2, #2
 80092a2:	0092      	lsls	r2, r2, #2
 80092a4:	f107 010c 	add.w	r1, r7, #12
 80092a8:	300c      	adds	r0, #12
 80092aa:	f000 fe39 	bl	8009f20 <memcpy>
 80092ae:	2201      	movs	r2, #1
 80092b0:	4629      	mov	r1, r5
 80092b2:	4620      	mov	r0, r4
 80092b4:	f000 fc0a 	bl	8009acc <__lshift>
 80092b8:	9b00      	ldr	r3, [sp, #0]
 80092ba:	3301      	adds	r3, #1
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092c2:	4413      	add	r3, r2
 80092c4:	9308      	str	r3, [sp, #32]
 80092c6:	9b02      	ldr	r3, [sp, #8]
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	46b8      	mov	r8, r7
 80092ce:	9306      	str	r3, [sp, #24]
 80092d0:	4607      	mov	r7, r0
 80092d2:	9b04      	ldr	r3, [sp, #16]
 80092d4:	4631      	mov	r1, r6
 80092d6:	3b01      	subs	r3, #1
 80092d8:	4650      	mov	r0, sl
 80092da:	9301      	str	r3, [sp, #4]
 80092dc:	f7ff fa6c 	bl	80087b8 <quorem>
 80092e0:	4641      	mov	r1, r8
 80092e2:	9002      	str	r0, [sp, #8]
 80092e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80092e8:	4650      	mov	r0, sl
 80092ea:	f000 fc5b 	bl	8009ba4 <__mcmp>
 80092ee:	463a      	mov	r2, r7
 80092f0:	9005      	str	r0, [sp, #20]
 80092f2:	4631      	mov	r1, r6
 80092f4:	4620      	mov	r0, r4
 80092f6:	f000 fc71 	bl	8009bdc <__mdiff>
 80092fa:	68c2      	ldr	r2, [r0, #12]
 80092fc:	4605      	mov	r5, r0
 80092fe:	bb02      	cbnz	r2, 8009342 <_dtoa_r+0xa7a>
 8009300:	4601      	mov	r1, r0
 8009302:	4650      	mov	r0, sl
 8009304:	f000 fc4e 	bl	8009ba4 <__mcmp>
 8009308:	4602      	mov	r2, r0
 800930a:	4629      	mov	r1, r5
 800930c:	4620      	mov	r0, r4
 800930e:	9209      	str	r2, [sp, #36]	; 0x24
 8009310:	f000 fa0c 	bl	800972c <_Bfree>
 8009314:	9b07      	ldr	r3, [sp, #28]
 8009316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009318:	9d04      	ldr	r5, [sp, #16]
 800931a:	ea43 0102 	orr.w	r1, r3, r2
 800931e:	9b06      	ldr	r3, [sp, #24]
 8009320:	4319      	orrs	r1, r3
 8009322:	d110      	bne.n	8009346 <_dtoa_r+0xa7e>
 8009324:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009328:	d029      	beq.n	800937e <_dtoa_r+0xab6>
 800932a:	9b05      	ldr	r3, [sp, #20]
 800932c:	2b00      	cmp	r3, #0
 800932e:	dd02      	ble.n	8009336 <_dtoa_r+0xa6e>
 8009330:	9b02      	ldr	r3, [sp, #8]
 8009332:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009336:	9b01      	ldr	r3, [sp, #4]
 8009338:	f883 9000 	strb.w	r9, [r3]
 800933c:	e774      	b.n	8009228 <_dtoa_r+0x960>
 800933e:	4638      	mov	r0, r7
 8009340:	e7ba      	b.n	80092b8 <_dtoa_r+0x9f0>
 8009342:	2201      	movs	r2, #1
 8009344:	e7e1      	b.n	800930a <_dtoa_r+0xa42>
 8009346:	9b05      	ldr	r3, [sp, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	db04      	blt.n	8009356 <_dtoa_r+0xa8e>
 800934c:	9907      	ldr	r1, [sp, #28]
 800934e:	430b      	orrs	r3, r1
 8009350:	9906      	ldr	r1, [sp, #24]
 8009352:	430b      	orrs	r3, r1
 8009354:	d120      	bne.n	8009398 <_dtoa_r+0xad0>
 8009356:	2a00      	cmp	r2, #0
 8009358:	dded      	ble.n	8009336 <_dtoa_r+0xa6e>
 800935a:	4651      	mov	r1, sl
 800935c:	2201      	movs	r2, #1
 800935e:	4620      	mov	r0, r4
 8009360:	f000 fbb4 	bl	8009acc <__lshift>
 8009364:	4631      	mov	r1, r6
 8009366:	4682      	mov	sl, r0
 8009368:	f000 fc1c 	bl	8009ba4 <__mcmp>
 800936c:	2800      	cmp	r0, #0
 800936e:	dc03      	bgt.n	8009378 <_dtoa_r+0xab0>
 8009370:	d1e1      	bne.n	8009336 <_dtoa_r+0xa6e>
 8009372:	f019 0f01 	tst.w	r9, #1
 8009376:	d0de      	beq.n	8009336 <_dtoa_r+0xa6e>
 8009378:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800937c:	d1d8      	bne.n	8009330 <_dtoa_r+0xa68>
 800937e:	9a01      	ldr	r2, [sp, #4]
 8009380:	2339      	movs	r3, #57	; 0x39
 8009382:	7013      	strb	r3, [r2, #0]
 8009384:	462b      	mov	r3, r5
 8009386:	461d      	mov	r5, r3
 8009388:	3b01      	subs	r3, #1
 800938a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800938e:	2a39      	cmp	r2, #57	; 0x39
 8009390:	d06c      	beq.n	800946c <_dtoa_r+0xba4>
 8009392:	3201      	adds	r2, #1
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	e747      	b.n	8009228 <_dtoa_r+0x960>
 8009398:	2a00      	cmp	r2, #0
 800939a:	dd07      	ble.n	80093ac <_dtoa_r+0xae4>
 800939c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80093a0:	d0ed      	beq.n	800937e <_dtoa_r+0xab6>
 80093a2:	9a01      	ldr	r2, [sp, #4]
 80093a4:	f109 0301 	add.w	r3, r9, #1
 80093a8:	7013      	strb	r3, [r2, #0]
 80093aa:	e73d      	b.n	8009228 <_dtoa_r+0x960>
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	9a08      	ldr	r2, [sp, #32]
 80093b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d043      	beq.n	8009440 <_dtoa_r+0xb78>
 80093b8:	4651      	mov	r1, sl
 80093ba:	2300      	movs	r3, #0
 80093bc:	220a      	movs	r2, #10
 80093be:	4620      	mov	r0, r4
 80093c0:	f000 f9d6 	bl	8009770 <__multadd>
 80093c4:	45b8      	cmp	r8, r7
 80093c6:	4682      	mov	sl, r0
 80093c8:	f04f 0300 	mov.w	r3, #0
 80093cc:	f04f 020a 	mov.w	r2, #10
 80093d0:	4641      	mov	r1, r8
 80093d2:	4620      	mov	r0, r4
 80093d4:	d107      	bne.n	80093e6 <_dtoa_r+0xb1e>
 80093d6:	f000 f9cb 	bl	8009770 <__multadd>
 80093da:	4680      	mov	r8, r0
 80093dc:	4607      	mov	r7, r0
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	3301      	adds	r3, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	e775      	b.n	80092d2 <_dtoa_r+0xa0a>
 80093e6:	f000 f9c3 	bl	8009770 <__multadd>
 80093ea:	4639      	mov	r1, r7
 80093ec:	4680      	mov	r8, r0
 80093ee:	2300      	movs	r3, #0
 80093f0:	220a      	movs	r2, #10
 80093f2:	4620      	mov	r0, r4
 80093f4:	f000 f9bc 	bl	8009770 <__multadd>
 80093f8:	4607      	mov	r7, r0
 80093fa:	e7f0      	b.n	80093de <_dtoa_r+0xb16>
 80093fc:	9b04      	ldr	r3, [sp, #16]
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	9d00      	ldr	r5, [sp, #0]
 8009402:	4631      	mov	r1, r6
 8009404:	4650      	mov	r0, sl
 8009406:	f7ff f9d7 	bl	80087b8 <quorem>
 800940a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800940e:	9b00      	ldr	r3, [sp, #0]
 8009410:	f805 9b01 	strb.w	r9, [r5], #1
 8009414:	1aea      	subs	r2, r5, r3
 8009416:	9b01      	ldr	r3, [sp, #4]
 8009418:	4293      	cmp	r3, r2
 800941a:	dd07      	ble.n	800942c <_dtoa_r+0xb64>
 800941c:	4651      	mov	r1, sl
 800941e:	2300      	movs	r3, #0
 8009420:	220a      	movs	r2, #10
 8009422:	4620      	mov	r0, r4
 8009424:	f000 f9a4 	bl	8009770 <__multadd>
 8009428:	4682      	mov	sl, r0
 800942a:	e7ea      	b.n	8009402 <_dtoa_r+0xb3a>
 800942c:	9b01      	ldr	r3, [sp, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	bfc8      	it	gt
 8009432:	461d      	movgt	r5, r3
 8009434:	9b00      	ldr	r3, [sp, #0]
 8009436:	bfd8      	it	le
 8009438:	2501      	movle	r5, #1
 800943a:	441d      	add	r5, r3
 800943c:	f04f 0800 	mov.w	r8, #0
 8009440:	4651      	mov	r1, sl
 8009442:	2201      	movs	r2, #1
 8009444:	4620      	mov	r0, r4
 8009446:	f000 fb41 	bl	8009acc <__lshift>
 800944a:	4631      	mov	r1, r6
 800944c:	4682      	mov	sl, r0
 800944e:	f000 fba9 	bl	8009ba4 <__mcmp>
 8009452:	2800      	cmp	r0, #0
 8009454:	dc96      	bgt.n	8009384 <_dtoa_r+0xabc>
 8009456:	d102      	bne.n	800945e <_dtoa_r+0xb96>
 8009458:	f019 0f01 	tst.w	r9, #1
 800945c:	d192      	bne.n	8009384 <_dtoa_r+0xabc>
 800945e:	462b      	mov	r3, r5
 8009460:	461d      	mov	r5, r3
 8009462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009466:	2a30      	cmp	r2, #48	; 0x30
 8009468:	d0fa      	beq.n	8009460 <_dtoa_r+0xb98>
 800946a:	e6dd      	b.n	8009228 <_dtoa_r+0x960>
 800946c:	9a00      	ldr	r2, [sp, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d189      	bne.n	8009386 <_dtoa_r+0xabe>
 8009472:	f10b 0b01 	add.w	fp, fp, #1
 8009476:	2331      	movs	r3, #49	; 0x31
 8009478:	e796      	b.n	80093a8 <_dtoa_r+0xae0>
 800947a:	4b0a      	ldr	r3, [pc, #40]	; (80094a4 <_dtoa_r+0xbdc>)
 800947c:	f7ff ba99 	b.w	80089b2 <_dtoa_r+0xea>
 8009480:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009482:	2b00      	cmp	r3, #0
 8009484:	f47f aa6d 	bne.w	8008962 <_dtoa_r+0x9a>
 8009488:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <_dtoa_r+0xbe0>)
 800948a:	f7ff ba92 	b.w	80089b2 <_dtoa_r+0xea>
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	dcb5      	bgt.n	8009400 <_dtoa_r+0xb38>
 8009494:	9b07      	ldr	r3, [sp, #28]
 8009496:	2b02      	cmp	r3, #2
 8009498:	f73f aeb1 	bgt.w	80091fe <_dtoa_r+0x936>
 800949c:	e7b0      	b.n	8009400 <_dtoa_r+0xb38>
 800949e:	bf00      	nop
 80094a0:	0800d069 	.word	0x0800d069
 80094a4:	0800cfc9 	.word	0x0800cfc9
 80094a8:	0800cfed 	.word	0x0800cfed

080094ac <_free_r>:
 80094ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094ae:	2900      	cmp	r1, #0
 80094b0:	d044      	beq.n	800953c <_free_r+0x90>
 80094b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b6:	9001      	str	r0, [sp, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f1a1 0404 	sub.w	r4, r1, #4
 80094be:	bfb8      	it	lt
 80094c0:	18e4      	addlt	r4, r4, r3
 80094c2:	f000 f8e7 	bl	8009694 <__malloc_lock>
 80094c6:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <_free_r+0x94>)
 80094c8:	9801      	ldr	r0, [sp, #4]
 80094ca:	6813      	ldr	r3, [r2, #0]
 80094cc:	b933      	cbnz	r3, 80094dc <_free_r+0x30>
 80094ce:	6063      	str	r3, [r4, #4]
 80094d0:	6014      	str	r4, [r2, #0]
 80094d2:	b003      	add	sp, #12
 80094d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094d8:	f000 b8e2 	b.w	80096a0 <__malloc_unlock>
 80094dc:	42a3      	cmp	r3, r4
 80094de:	d908      	bls.n	80094f2 <_free_r+0x46>
 80094e0:	6825      	ldr	r5, [r4, #0]
 80094e2:	1961      	adds	r1, r4, r5
 80094e4:	428b      	cmp	r3, r1
 80094e6:	bf01      	itttt	eq
 80094e8:	6819      	ldreq	r1, [r3, #0]
 80094ea:	685b      	ldreq	r3, [r3, #4]
 80094ec:	1949      	addeq	r1, r1, r5
 80094ee:	6021      	streq	r1, [r4, #0]
 80094f0:	e7ed      	b.n	80094ce <_free_r+0x22>
 80094f2:	461a      	mov	r2, r3
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	b10b      	cbz	r3, 80094fc <_free_r+0x50>
 80094f8:	42a3      	cmp	r3, r4
 80094fa:	d9fa      	bls.n	80094f2 <_free_r+0x46>
 80094fc:	6811      	ldr	r1, [r2, #0]
 80094fe:	1855      	adds	r5, r2, r1
 8009500:	42a5      	cmp	r5, r4
 8009502:	d10b      	bne.n	800951c <_free_r+0x70>
 8009504:	6824      	ldr	r4, [r4, #0]
 8009506:	4421      	add	r1, r4
 8009508:	1854      	adds	r4, r2, r1
 800950a:	42a3      	cmp	r3, r4
 800950c:	6011      	str	r1, [r2, #0]
 800950e:	d1e0      	bne.n	80094d2 <_free_r+0x26>
 8009510:	681c      	ldr	r4, [r3, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	6053      	str	r3, [r2, #4]
 8009516:	440c      	add	r4, r1
 8009518:	6014      	str	r4, [r2, #0]
 800951a:	e7da      	b.n	80094d2 <_free_r+0x26>
 800951c:	d902      	bls.n	8009524 <_free_r+0x78>
 800951e:	230c      	movs	r3, #12
 8009520:	6003      	str	r3, [r0, #0]
 8009522:	e7d6      	b.n	80094d2 <_free_r+0x26>
 8009524:	6825      	ldr	r5, [r4, #0]
 8009526:	1961      	adds	r1, r4, r5
 8009528:	428b      	cmp	r3, r1
 800952a:	bf04      	itt	eq
 800952c:	6819      	ldreq	r1, [r3, #0]
 800952e:	685b      	ldreq	r3, [r3, #4]
 8009530:	6063      	str	r3, [r4, #4]
 8009532:	bf04      	itt	eq
 8009534:	1949      	addeq	r1, r1, r5
 8009536:	6021      	streq	r1, [r4, #0]
 8009538:	6054      	str	r4, [r2, #4]
 800953a:	e7ca      	b.n	80094d2 <_free_r+0x26>
 800953c:	b003      	add	sp, #12
 800953e:	bd30      	pop	{r4, r5, pc}
 8009540:	20000df8 	.word	0x20000df8

08009544 <malloc>:
 8009544:	4b02      	ldr	r3, [pc, #8]	; (8009550 <malloc+0xc>)
 8009546:	4601      	mov	r1, r0
 8009548:	6818      	ldr	r0, [r3, #0]
 800954a:	f000 b823 	b.w	8009594 <_malloc_r>
 800954e:	bf00      	nop
 8009550:	200000a0 	.word	0x200000a0

08009554 <sbrk_aligned>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	4e0e      	ldr	r6, [pc, #56]	; (8009590 <sbrk_aligned+0x3c>)
 8009558:	460c      	mov	r4, r1
 800955a:	6831      	ldr	r1, [r6, #0]
 800955c:	4605      	mov	r5, r0
 800955e:	b911      	cbnz	r1, 8009566 <sbrk_aligned+0x12>
 8009560:	f000 fcce 	bl	8009f00 <_sbrk_r>
 8009564:	6030      	str	r0, [r6, #0]
 8009566:	4621      	mov	r1, r4
 8009568:	4628      	mov	r0, r5
 800956a:	f000 fcc9 	bl	8009f00 <_sbrk_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	d00a      	beq.n	8009588 <sbrk_aligned+0x34>
 8009572:	1cc4      	adds	r4, r0, #3
 8009574:	f024 0403 	bic.w	r4, r4, #3
 8009578:	42a0      	cmp	r0, r4
 800957a:	d007      	beq.n	800958c <sbrk_aligned+0x38>
 800957c:	1a21      	subs	r1, r4, r0
 800957e:	4628      	mov	r0, r5
 8009580:	f000 fcbe 	bl	8009f00 <_sbrk_r>
 8009584:	3001      	adds	r0, #1
 8009586:	d101      	bne.n	800958c <sbrk_aligned+0x38>
 8009588:	f04f 34ff 	mov.w	r4, #4294967295
 800958c:	4620      	mov	r0, r4
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	20000dfc 	.word	0x20000dfc

08009594 <_malloc_r>:
 8009594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009598:	1ccd      	adds	r5, r1, #3
 800959a:	f025 0503 	bic.w	r5, r5, #3
 800959e:	3508      	adds	r5, #8
 80095a0:	2d0c      	cmp	r5, #12
 80095a2:	bf38      	it	cc
 80095a4:	250c      	movcc	r5, #12
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	4607      	mov	r7, r0
 80095aa:	db01      	blt.n	80095b0 <_malloc_r+0x1c>
 80095ac:	42a9      	cmp	r1, r5
 80095ae:	d905      	bls.n	80095bc <_malloc_r+0x28>
 80095b0:	230c      	movs	r3, #12
 80095b2:	603b      	str	r3, [r7, #0]
 80095b4:	2600      	movs	r6, #0
 80095b6:	4630      	mov	r0, r6
 80095b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009690 <_malloc_r+0xfc>
 80095c0:	f000 f868 	bl	8009694 <__malloc_lock>
 80095c4:	f8d8 3000 	ldr.w	r3, [r8]
 80095c8:	461c      	mov	r4, r3
 80095ca:	bb5c      	cbnz	r4, 8009624 <_malloc_r+0x90>
 80095cc:	4629      	mov	r1, r5
 80095ce:	4638      	mov	r0, r7
 80095d0:	f7ff ffc0 	bl	8009554 <sbrk_aligned>
 80095d4:	1c43      	adds	r3, r0, #1
 80095d6:	4604      	mov	r4, r0
 80095d8:	d155      	bne.n	8009686 <_malloc_r+0xf2>
 80095da:	f8d8 4000 	ldr.w	r4, [r8]
 80095de:	4626      	mov	r6, r4
 80095e0:	2e00      	cmp	r6, #0
 80095e2:	d145      	bne.n	8009670 <_malloc_r+0xdc>
 80095e4:	2c00      	cmp	r4, #0
 80095e6:	d048      	beq.n	800967a <_malloc_r+0xe6>
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	4631      	mov	r1, r6
 80095ec:	4638      	mov	r0, r7
 80095ee:	eb04 0903 	add.w	r9, r4, r3
 80095f2:	f000 fc85 	bl	8009f00 <_sbrk_r>
 80095f6:	4581      	cmp	r9, r0
 80095f8:	d13f      	bne.n	800967a <_malloc_r+0xe6>
 80095fa:	6821      	ldr	r1, [r4, #0]
 80095fc:	1a6d      	subs	r5, r5, r1
 80095fe:	4629      	mov	r1, r5
 8009600:	4638      	mov	r0, r7
 8009602:	f7ff ffa7 	bl	8009554 <sbrk_aligned>
 8009606:	3001      	adds	r0, #1
 8009608:	d037      	beq.n	800967a <_malloc_r+0xe6>
 800960a:	6823      	ldr	r3, [r4, #0]
 800960c:	442b      	add	r3, r5
 800960e:	6023      	str	r3, [r4, #0]
 8009610:	f8d8 3000 	ldr.w	r3, [r8]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d038      	beq.n	800968a <_malloc_r+0xf6>
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	42a2      	cmp	r2, r4
 800961c:	d12b      	bne.n	8009676 <_malloc_r+0xe2>
 800961e:	2200      	movs	r2, #0
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	e00f      	b.n	8009644 <_malloc_r+0xb0>
 8009624:	6822      	ldr	r2, [r4, #0]
 8009626:	1b52      	subs	r2, r2, r5
 8009628:	d41f      	bmi.n	800966a <_malloc_r+0xd6>
 800962a:	2a0b      	cmp	r2, #11
 800962c:	d917      	bls.n	800965e <_malloc_r+0xca>
 800962e:	1961      	adds	r1, r4, r5
 8009630:	42a3      	cmp	r3, r4
 8009632:	6025      	str	r5, [r4, #0]
 8009634:	bf18      	it	ne
 8009636:	6059      	strne	r1, [r3, #4]
 8009638:	6863      	ldr	r3, [r4, #4]
 800963a:	bf08      	it	eq
 800963c:	f8c8 1000 	streq.w	r1, [r8]
 8009640:	5162      	str	r2, [r4, r5]
 8009642:	604b      	str	r3, [r1, #4]
 8009644:	4638      	mov	r0, r7
 8009646:	f104 060b 	add.w	r6, r4, #11
 800964a:	f000 f829 	bl	80096a0 <__malloc_unlock>
 800964e:	f026 0607 	bic.w	r6, r6, #7
 8009652:	1d23      	adds	r3, r4, #4
 8009654:	1af2      	subs	r2, r6, r3
 8009656:	d0ae      	beq.n	80095b6 <_malloc_r+0x22>
 8009658:	1b9b      	subs	r3, r3, r6
 800965a:	50a3      	str	r3, [r4, r2]
 800965c:	e7ab      	b.n	80095b6 <_malloc_r+0x22>
 800965e:	42a3      	cmp	r3, r4
 8009660:	6862      	ldr	r2, [r4, #4]
 8009662:	d1dd      	bne.n	8009620 <_malloc_r+0x8c>
 8009664:	f8c8 2000 	str.w	r2, [r8]
 8009668:	e7ec      	b.n	8009644 <_malloc_r+0xb0>
 800966a:	4623      	mov	r3, r4
 800966c:	6864      	ldr	r4, [r4, #4]
 800966e:	e7ac      	b.n	80095ca <_malloc_r+0x36>
 8009670:	4634      	mov	r4, r6
 8009672:	6876      	ldr	r6, [r6, #4]
 8009674:	e7b4      	b.n	80095e0 <_malloc_r+0x4c>
 8009676:	4613      	mov	r3, r2
 8009678:	e7cc      	b.n	8009614 <_malloc_r+0x80>
 800967a:	230c      	movs	r3, #12
 800967c:	603b      	str	r3, [r7, #0]
 800967e:	4638      	mov	r0, r7
 8009680:	f000 f80e 	bl	80096a0 <__malloc_unlock>
 8009684:	e797      	b.n	80095b6 <_malloc_r+0x22>
 8009686:	6025      	str	r5, [r4, #0]
 8009688:	e7dc      	b.n	8009644 <_malloc_r+0xb0>
 800968a:	605b      	str	r3, [r3, #4]
 800968c:	deff      	udf	#255	; 0xff
 800968e:	bf00      	nop
 8009690:	20000df8 	.word	0x20000df8

08009694 <__malloc_lock>:
 8009694:	4801      	ldr	r0, [pc, #4]	; (800969c <__malloc_lock+0x8>)
 8009696:	f7ff b88d 	b.w	80087b4 <__retarget_lock_acquire_recursive>
 800969a:	bf00      	nop
 800969c:	20000df4 	.word	0x20000df4

080096a0 <__malloc_unlock>:
 80096a0:	4801      	ldr	r0, [pc, #4]	; (80096a8 <__malloc_unlock+0x8>)
 80096a2:	f7ff b888 	b.w	80087b6 <__retarget_lock_release_recursive>
 80096a6:	bf00      	nop
 80096a8:	20000df4 	.word	0x20000df4

080096ac <_Balloc>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	69c6      	ldr	r6, [r0, #28]
 80096b0:	4604      	mov	r4, r0
 80096b2:	460d      	mov	r5, r1
 80096b4:	b976      	cbnz	r6, 80096d4 <_Balloc+0x28>
 80096b6:	2010      	movs	r0, #16
 80096b8:	f7ff ff44 	bl	8009544 <malloc>
 80096bc:	4602      	mov	r2, r0
 80096be:	61e0      	str	r0, [r4, #28]
 80096c0:	b920      	cbnz	r0, 80096cc <_Balloc+0x20>
 80096c2:	4b18      	ldr	r3, [pc, #96]	; (8009724 <_Balloc+0x78>)
 80096c4:	4818      	ldr	r0, [pc, #96]	; (8009728 <_Balloc+0x7c>)
 80096c6:	216b      	movs	r1, #107	; 0x6b
 80096c8:	f000 fc38 	bl	8009f3c <__assert_func>
 80096cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096d0:	6006      	str	r6, [r0, #0]
 80096d2:	60c6      	str	r6, [r0, #12]
 80096d4:	69e6      	ldr	r6, [r4, #28]
 80096d6:	68f3      	ldr	r3, [r6, #12]
 80096d8:	b183      	cbz	r3, 80096fc <_Balloc+0x50>
 80096da:	69e3      	ldr	r3, [r4, #28]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096e2:	b9b8      	cbnz	r0, 8009714 <_Balloc+0x68>
 80096e4:	2101      	movs	r1, #1
 80096e6:	fa01 f605 	lsl.w	r6, r1, r5
 80096ea:	1d72      	adds	r2, r6, #5
 80096ec:	0092      	lsls	r2, r2, #2
 80096ee:	4620      	mov	r0, r4
 80096f0:	f000 fc42 	bl	8009f78 <_calloc_r>
 80096f4:	b160      	cbz	r0, 8009710 <_Balloc+0x64>
 80096f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096fa:	e00e      	b.n	800971a <_Balloc+0x6e>
 80096fc:	2221      	movs	r2, #33	; 0x21
 80096fe:	2104      	movs	r1, #4
 8009700:	4620      	mov	r0, r4
 8009702:	f000 fc39 	bl	8009f78 <_calloc_r>
 8009706:	69e3      	ldr	r3, [r4, #28]
 8009708:	60f0      	str	r0, [r6, #12]
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e4      	bne.n	80096da <_Balloc+0x2e>
 8009710:	2000      	movs	r0, #0
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	6802      	ldr	r2, [r0, #0]
 8009716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800971a:	2300      	movs	r3, #0
 800971c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009720:	e7f7      	b.n	8009712 <_Balloc+0x66>
 8009722:	bf00      	nop
 8009724:	0800cffa 	.word	0x0800cffa
 8009728:	0800d07a 	.word	0x0800d07a

0800972c <_Bfree>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	69c6      	ldr	r6, [r0, #28]
 8009730:	4605      	mov	r5, r0
 8009732:	460c      	mov	r4, r1
 8009734:	b976      	cbnz	r6, 8009754 <_Bfree+0x28>
 8009736:	2010      	movs	r0, #16
 8009738:	f7ff ff04 	bl	8009544 <malloc>
 800973c:	4602      	mov	r2, r0
 800973e:	61e8      	str	r0, [r5, #28]
 8009740:	b920      	cbnz	r0, 800974c <_Bfree+0x20>
 8009742:	4b09      	ldr	r3, [pc, #36]	; (8009768 <_Bfree+0x3c>)
 8009744:	4809      	ldr	r0, [pc, #36]	; (800976c <_Bfree+0x40>)
 8009746:	218f      	movs	r1, #143	; 0x8f
 8009748:	f000 fbf8 	bl	8009f3c <__assert_func>
 800974c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009750:	6006      	str	r6, [r0, #0]
 8009752:	60c6      	str	r6, [r0, #12]
 8009754:	b13c      	cbz	r4, 8009766 <_Bfree+0x3a>
 8009756:	69eb      	ldr	r3, [r5, #28]
 8009758:	6862      	ldr	r2, [r4, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009760:	6021      	str	r1, [r4, #0]
 8009762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009766:	bd70      	pop	{r4, r5, r6, pc}
 8009768:	0800cffa 	.word	0x0800cffa
 800976c:	0800d07a 	.word	0x0800d07a

08009770 <__multadd>:
 8009770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009774:	690d      	ldr	r5, [r1, #16]
 8009776:	4607      	mov	r7, r0
 8009778:	460c      	mov	r4, r1
 800977a:	461e      	mov	r6, r3
 800977c:	f101 0c14 	add.w	ip, r1, #20
 8009780:	2000      	movs	r0, #0
 8009782:	f8dc 3000 	ldr.w	r3, [ip]
 8009786:	b299      	uxth	r1, r3
 8009788:	fb02 6101 	mla	r1, r2, r1, r6
 800978c:	0c1e      	lsrs	r6, r3, #16
 800978e:	0c0b      	lsrs	r3, r1, #16
 8009790:	fb02 3306 	mla	r3, r2, r6, r3
 8009794:	b289      	uxth	r1, r1
 8009796:	3001      	adds	r0, #1
 8009798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800979c:	4285      	cmp	r5, r0
 800979e:	f84c 1b04 	str.w	r1, [ip], #4
 80097a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097a6:	dcec      	bgt.n	8009782 <__multadd+0x12>
 80097a8:	b30e      	cbz	r6, 80097ee <__multadd+0x7e>
 80097aa:	68a3      	ldr	r3, [r4, #8]
 80097ac:	42ab      	cmp	r3, r5
 80097ae:	dc19      	bgt.n	80097e4 <__multadd+0x74>
 80097b0:	6861      	ldr	r1, [r4, #4]
 80097b2:	4638      	mov	r0, r7
 80097b4:	3101      	adds	r1, #1
 80097b6:	f7ff ff79 	bl	80096ac <_Balloc>
 80097ba:	4680      	mov	r8, r0
 80097bc:	b928      	cbnz	r0, 80097ca <__multadd+0x5a>
 80097be:	4602      	mov	r2, r0
 80097c0:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <__multadd+0x84>)
 80097c2:	480d      	ldr	r0, [pc, #52]	; (80097f8 <__multadd+0x88>)
 80097c4:	21ba      	movs	r1, #186	; 0xba
 80097c6:	f000 fbb9 	bl	8009f3c <__assert_func>
 80097ca:	6922      	ldr	r2, [r4, #16]
 80097cc:	3202      	adds	r2, #2
 80097ce:	f104 010c 	add.w	r1, r4, #12
 80097d2:	0092      	lsls	r2, r2, #2
 80097d4:	300c      	adds	r0, #12
 80097d6:	f000 fba3 	bl	8009f20 <memcpy>
 80097da:	4621      	mov	r1, r4
 80097dc:	4638      	mov	r0, r7
 80097de:	f7ff ffa5 	bl	800972c <_Bfree>
 80097e2:	4644      	mov	r4, r8
 80097e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097e8:	3501      	adds	r5, #1
 80097ea:	615e      	str	r6, [r3, #20]
 80097ec:	6125      	str	r5, [r4, #16]
 80097ee:	4620      	mov	r0, r4
 80097f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097f4:	0800d069 	.word	0x0800d069
 80097f8:	0800d07a 	.word	0x0800d07a

080097fc <__hi0bits>:
 80097fc:	0c03      	lsrs	r3, r0, #16
 80097fe:	041b      	lsls	r3, r3, #16
 8009800:	b9d3      	cbnz	r3, 8009838 <__hi0bits+0x3c>
 8009802:	0400      	lsls	r0, r0, #16
 8009804:	2310      	movs	r3, #16
 8009806:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800980a:	bf04      	itt	eq
 800980c:	0200      	lsleq	r0, r0, #8
 800980e:	3308      	addeq	r3, #8
 8009810:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009814:	bf04      	itt	eq
 8009816:	0100      	lsleq	r0, r0, #4
 8009818:	3304      	addeq	r3, #4
 800981a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800981e:	bf04      	itt	eq
 8009820:	0080      	lsleq	r0, r0, #2
 8009822:	3302      	addeq	r3, #2
 8009824:	2800      	cmp	r0, #0
 8009826:	db05      	blt.n	8009834 <__hi0bits+0x38>
 8009828:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800982c:	f103 0301 	add.w	r3, r3, #1
 8009830:	bf08      	it	eq
 8009832:	2320      	moveq	r3, #32
 8009834:	4618      	mov	r0, r3
 8009836:	4770      	bx	lr
 8009838:	2300      	movs	r3, #0
 800983a:	e7e4      	b.n	8009806 <__hi0bits+0xa>

0800983c <__lo0bits>:
 800983c:	6803      	ldr	r3, [r0, #0]
 800983e:	f013 0207 	ands.w	r2, r3, #7
 8009842:	d00c      	beq.n	800985e <__lo0bits+0x22>
 8009844:	07d9      	lsls	r1, r3, #31
 8009846:	d422      	bmi.n	800988e <__lo0bits+0x52>
 8009848:	079a      	lsls	r2, r3, #30
 800984a:	bf49      	itett	mi
 800984c:	085b      	lsrmi	r3, r3, #1
 800984e:	089b      	lsrpl	r3, r3, #2
 8009850:	6003      	strmi	r3, [r0, #0]
 8009852:	2201      	movmi	r2, #1
 8009854:	bf5c      	itt	pl
 8009856:	6003      	strpl	r3, [r0, #0]
 8009858:	2202      	movpl	r2, #2
 800985a:	4610      	mov	r0, r2
 800985c:	4770      	bx	lr
 800985e:	b299      	uxth	r1, r3
 8009860:	b909      	cbnz	r1, 8009866 <__lo0bits+0x2a>
 8009862:	0c1b      	lsrs	r3, r3, #16
 8009864:	2210      	movs	r2, #16
 8009866:	b2d9      	uxtb	r1, r3
 8009868:	b909      	cbnz	r1, 800986e <__lo0bits+0x32>
 800986a:	3208      	adds	r2, #8
 800986c:	0a1b      	lsrs	r3, r3, #8
 800986e:	0719      	lsls	r1, r3, #28
 8009870:	bf04      	itt	eq
 8009872:	091b      	lsreq	r3, r3, #4
 8009874:	3204      	addeq	r2, #4
 8009876:	0799      	lsls	r1, r3, #30
 8009878:	bf04      	itt	eq
 800987a:	089b      	lsreq	r3, r3, #2
 800987c:	3202      	addeq	r2, #2
 800987e:	07d9      	lsls	r1, r3, #31
 8009880:	d403      	bmi.n	800988a <__lo0bits+0x4e>
 8009882:	085b      	lsrs	r3, r3, #1
 8009884:	f102 0201 	add.w	r2, r2, #1
 8009888:	d003      	beq.n	8009892 <__lo0bits+0x56>
 800988a:	6003      	str	r3, [r0, #0]
 800988c:	e7e5      	b.n	800985a <__lo0bits+0x1e>
 800988e:	2200      	movs	r2, #0
 8009890:	e7e3      	b.n	800985a <__lo0bits+0x1e>
 8009892:	2220      	movs	r2, #32
 8009894:	e7e1      	b.n	800985a <__lo0bits+0x1e>
	...

08009898 <__i2b>:
 8009898:	b510      	push	{r4, lr}
 800989a:	460c      	mov	r4, r1
 800989c:	2101      	movs	r1, #1
 800989e:	f7ff ff05 	bl	80096ac <_Balloc>
 80098a2:	4602      	mov	r2, r0
 80098a4:	b928      	cbnz	r0, 80098b2 <__i2b+0x1a>
 80098a6:	4b05      	ldr	r3, [pc, #20]	; (80098bc <__i2b+0x24>)
 80098a8:	4805      	ldr	r0, [pc, #20]	; (80098c0 <__i2b+0x28>)
 80098aa:	f240 1145 	movw	r1, #325	; 0x145
 80098ae:	f000 fb45 	bl	8009f3c <__assert_func>
 80098b2:	2301      	movs	r3, #1
 80098b4:	6144      	str	r4, [r0, #20]
 80098b6:	6103      	str	r3, [r0, #16]
 80098b8:	bd10      	pop	{r4, pc}
 80098ba:	bf00      	nop
 80098bc:	0800d069 	.word	0x0800d069
 80098c0:	0800d07a 	.word	0x0800d07a

080098c4 <__multiply>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	4691      	mov	r9, r2
 80098ca:	690a      	ldr	r2, [r1, #16]
 80098cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	bfb8      	it	lt
 80098d4:	460b      	movlt	r3, r1
 80098d6:	460c      	mov	r4, r1
 80098d8:	bfbc      	itt	lt
 80098da:	464c      	movlt	r4, r9
 80098dc:	4699      	movlt	r9, r3
 80098de:	6927      	ldr	r7, [r4, #16]
 80098e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098e4:	68a3      	ldr	r3, [r4, #8]
 80098e6:	6861      	ldr	r1, [r4, #4]
 80098e8:	eb07 060a 	add.w	r6, r7, sl
 80098ec:	42b3      	cmp	r3, r6
 80098ee:	b085      	sub	sp, #20
 80098f0:	bfb8      	it	lt
 80098f2:	3101      	addlt	r1, #1
 80098f4:	f7ff feda 	bl	80096ac <_Balloc>
 80098f8:	b930      	cbnz	r0, 8009908 <__multiply+0x44>
 80098fa:	4602      	mov	r2, r0
 80098fc:	4b44      	ldr	r3, [pc, #272]	; (8009a10 <__multiply+0x14c>)
 80098fe:	4845      	ldr	r0, [pc, #276]	; (8009a14 <__multiply+0x150>)
 8009900:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009904:	f000 fb1a 	bl	8009f3c <__assert_func>
 8009908:	f100 0514 	add.w	r5, r0, #20
 800990c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009910:	462b      	mov	r3, r5
 8009912:	2200      	movs	r2, #0
 8009914:	4543      	cmp	r3, r8
 8009916:	d321      	bcc.n	800995c <__multiply+0x98>
 8009918:	f104 0314 	add.w	r3, r4, #20
 800991c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009920:	f109 0314 	add.w	r3, r9, #20
 8009924:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009928:	9202      	str	r2, [sp, #8]
 800992a:	1b3a      	subs	r2, r7, r4
 800992c:	3a15      	subs	r2, #21
 800992e:	f022 0203 	bic.w	r2, r2, #3
 8009932:	3204      	adds	r2, #4
 8009934:	f104 0115 	add.w	r1, r4, #21
 8009938:	428f      	cmp	r7, r1
 800993a:	bf38      	it	cc
 800993c:	2204      	movcc	r2, #4
 800993e:	9201      	str	r2, [sp, #4]
 8009940:	9a02      	ldr	r2, [sp, #8]
 8009942:	9303      	str	r3, [sp, #12]
 8009944:	429a      	cmp	r2, r3
 8009946:	d80c      	bhi.n	8009962 <__multiply+0x9e>
 8009948:	2e00      	cmp	r6, #0
 800994a:	dd03      	ble.n	8009954 <__multiply+0x90>
 800994c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009950:	2b00      	cmp	r3, #0
 8009952:	d05b      	beq.n	8009a0c <__multiply+0x148>
 8009954:	6106      	str	r6, [r0, #16]
 8009956:	b005      	add	sp, #20
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	f843 2b04 	str.w	r2, [r3], #4
 8009960:	e7d8      	b.n	8009914 <__multiply+0x50>
 8009962:	f8b3 a000 	ldrh.w	sl, [r3]
 8009966:	f1ba 0f00 	cmp.w	sl, #0
 800996a:	d024      	beq.n	80099b6 <__multiply+0xf2>
 800996c:	f104 0e14 	add.w	lr, r4, #20
 8009970:	46a9      	mov	r9, r5
 8009972:	f04f 0c00 	mov.w	ip, #0
 8009976:	f85e 2b04 	ldr.w	r2, [lr], #4
 800997a:	f8d9 1000 	ldr.w	r1, [r9]
 800997e:	fa1f fb82 	uxth.w	fp, r2
 8009982:	b289      	uxth	r1, r1
 8009984:	fb0a 110b 	mla	r1, sl, fp, r1
 8009988:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800998c:	f8d9 2000 	ldr.w	r2, [r9]
 8009990:	4461      	add	r1, ip
 8009992:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009996:	fb0a c20b 	mla	r2, sl, fp, ip
 800999a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800999e:	b289      	uxth	r1, r1
 80099a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099a4:	4577      	cmp	r7, lr
 80099a6:	f849 1b04 	str.w	r1, [r9], #4
 80099aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099ae:	d8e2      	bhi.n	8009976 <__multiply+0xb2>
 80099b0:	9a01      	ldr	r2, [sp, #4]
 80099b2:	f845 c002 	str.w	ip, [r5, r2]
 80099b6:	9a03      	ldr	r2, [sp, #12]
 80099b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099bc:	3304      	adds	r3, #4
 80099be:	f1b9 0f00 	cmp.w	r9, #0
 80099c2:	d021      	beq.n	8009a08 <__multiply+0x144>
 80099c4:	6829      	ldr	r1, [r5, #0]
 80099c6:	f104 0c14 	add.w	ip, r4, #20
 80099ca:	46ae      	mov	lr, r5
 80099cc:	f04f 0a00 	mov.w	sl, #0
 80099d0:	f8bc b000 	ldrh.w	fp, [ip]
 80099d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099d8:	fb09 220b 	mla	r2, r9, fp, r2
 80099dc:	4452      	add	r2, sl
 80099de:	b289      	uxth	r1, r1
 80099e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099e4:	f84e 1b04 	str.w	r1, [lr], #4
 80099e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80099ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099f0:	f8be 1000 	ldrh.w	r1, [lr]
 80099f4:	fb09 110a 	mla	r1, r9, sl, r1
 80099f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80099fc:	4567      	cmp	r7, ip
 80099fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a02:	d8e5      	bhi.n	80099d0 <__multiply+0x10c>
 8009a04:	9a01      	ldr	r2, [sp, #4]
 8009a06:	50a9      	str	r1, [r5, r2]
 8009a08:	3504      	adds	r5, #4
 8009a0a:	e799      	b.n	8009940 <__multiply+0x7c>
 8009a0c:	3e01      	subs	r6, #1
 8009a0e:	e79b      	b.n	8009948 <__multiply+0x84>
 8009a10:	0800d069 	.word	0x0800d069
 8009a14:	0800d07a 	.word	0x0800d07a

08009a18 <__pow5mult>:
 8009a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a1c:	4615      	mov	r5, r2
 8009a1e:	f012 0203 	ands.w	r2, r2, #3
 8009a22:	4606      	mov	r6, r0
 8009a24:	460f      	mov	r7, r1
 8009a26:	d007      	beq.n	8009a38 <__pow5mult+0x20>
 8009a28:	4c25      	ldr	r4, [pc, #148]	; (8009ac0 <__pow5mult+0xa8>)
 8009a2a:	3a01      	subs	r2, #1
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a32:	f7ff fe9d 	bl	8009770 <__multadd>
 8009a36:	4607      	mov	r7, r0
 8009a38:	10ad      	asrs	r5, r5, #2
 8009a3a:	d03d      	beq.n	8009ab8 <__pow5mult+0xa0>
 8009a3c:	69f4      	ldr	r4, [r6, #28]
 8009a3e:	b97c      	cbnz	r4, 8009a60 <__pow5mult+0x48>
 8009a40:	2010      	movs	r0, #16
 8009a42:	f7ff fd7f 	bl	8009544 <malloc>
 8009a46:	4602      	mov	r2, r0
 8009a48:	61f0      	str	r0, [r6, #28]
 8009a4a:	b928      	cbnz	r0, 8009a58 <__pow5mult+0x40>
 8009a4c:	4b1d      	ldr	r3, [pc, #116]	; (8009ac4 <__pow5mult+0xac>)
 8009a4e:	481e      	ldr	r0, [pc, #120]	; (8009ac8 <__pow5mult+0xb0>)
 8009a50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009a54:	f000 fa72 	bl	8009f3c <__assert_func>
 8009a58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a5c:	6004      	str	r4, [r0, #0]
 8009a5e:	60c4      	str	r4, [r0, #12]
 8009a60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009a64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a68:	b94c      	cbnz	r4, 8009a7e <__pow5mult+0x66>
 8009a6a:	f240 2171 	movw	r1, #625	; 0x271
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7ff ff12 	bl	8009898 <__i2b>
 8009a74:	2300      	movs	r3, #0
 8009a76:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	6003      	str	r3, [r0, #0]
 8009a7e:	f04f 0900 	mov.w	r9, #0
 8009a82:	07eb      	lsls	r3, r5, #31
 8009a84:	d50a      	bpl.n	8009a9c <__pow5mult+0x84>
 8009a86:	4639      	mov	r1, r7
 8009a88:	4622      	mov	r2, r4
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	f7ff ff1a 	bl	80098c4 <__multiply>
 8009a90:	4639      	mov	r1, r7
 8009a92:	4680      	mov	r8, r0
 8009a94:	4630      	mov	r0, r6
 8009a96:	f7ff fe49 	bl	800972c <_Bfree>
 8009a9a:	4647      	mov	r7, r8
 8009a9c:	106d      	asrs	r5, r5, #1
 8009a9e:	d00b      	beq.n	8009ab8 <__pow5mult+0xa0>
 8009aa0:	6820      	ldr	r0, [r4, #0]
 8009aa2:	b938      	cbnz	r0, 8009ab4 <__pow5mult+0x9c>
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	4621      	mov	r1, r4
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	f7ff ff0b 	bl	80098c4 <__multiply>
 8009aae:	6020      	str	r0, [r4, #0]
 8009ab0:	f8c0 9000 	str.w	r9, [r0]
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	e7e4      	b.n	8009a82 <__pow5mult+0x6a>
 8009ab8:	4638      	mov	r0, r7
 8009aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009abe:	bf00      	nop
 8009ac0:	0800d1c8 	.word	0x0800d1c8
 8009ac4:	0800cffa 	.word	0x0800cffa
 8009ac8:	0800d07a 	.word	0x0800d07a

08009acc <__lshift>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	460c      	mov	r4, r1
 8009ad2:	6849      	ldr	r1, [r1, #4]
 8009ad4:	6923      	ldr	r3, [r4, #16]
 8009ad6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	4607      	mov	r7, r0
 8009ade:	4691      	mov	r9, r2
 8009ae0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ae4:	f108 0601 	add.w	r6, r8, #1
 8009ae8:	42b3      	cmp	r3, r6
 8009aea:	db0b      	blt.n	8009b04 <__lshift+0x38>
 8009aec:	4638      	mov	r0, r7
 8009aee:	f7ff fddd 	bl	80096ac <_Balloc>
 8009af2:	4605      	mov	r5, r0
 8009af4:	b948      	cbnz	r0, 8009b0a <__lshift+0x3e>
 8009af6:	4602      	mov	r2, r0
 8009af8:	4b28      	ldr	r3, [pc, #160]	; (8009b9c <__lshift+0xd0>)
 8009afa:	4829      	ldr	r0, [pc, #164]	; (8009ba0 <__lshift+0xd4>)
 8009afc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b00:	f000 fa1c 	bl	8009f3c <__assert_func>
 8009b04:	3101      	adds	r1, #1
 8009b06:	005b      	lsls	r3, r3, #1
 8009b08:	e7ee      	b.n	8009ae8 <__lshift+0x1c>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f100 0114 	add.w	r1, r0, #20
 8009b10:	f100 0210 	add.w	r2, r0, #16
 8009b14:	4618      	mov	r0, r3
 8009b16:	4553      	cmp	r3, sl
 8009b18:	db33      	blt.n	8009b82 <__lshift+0xb6>
 8009b1a:	6920      	ldr	r0, [r4, #16]
 8009b1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b20:	f104 0314 	add.w	r3, r4, #20
 8009b24:	f019 091f 	ands.w	r9, r9, #31
 8009b28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b30:	d02b      	beq.n	8009b8a <__lshift+0xbe>
 8009b32:	f1c9 0e20 	rsb	lr, r9, #32
 8009b36:	468a      	mov	sl, r1
 8009b38:	2200      	movs	r2, #0
 8009b3a:	6818      	ldr	r0, [r3, #0]
 8009b3c:	fa00 f009 	lsl.w	r0, r0, r9
 8009b40:	4310      	orrs	r0, r2
 8009b42:	f84a 0b04 	str.w	r0, [sl], #4
 8009b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b4a:	459c      	cmp	ip, r3
 8009b4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b50:	d8f3      	bhi.n	8009b3a <__lshift+0x6e>
 8009b52:	ebac 0304 	sub.w	r3, ip, r4
 8009b56:	3b15      	subs	r3, #21
 8009b58:	f023 0303 	bic.w	r3, r3, #3
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	f104 0015 	add.w	r0, r4, #21
 8009b62:	4584      	cmp	ip, r0
 8009b64:	bf38      	it	cc
 8009b66:	2304      	movcc	r3, #4
 8009b68:	50ca      	str	r2, [r1, r3]
 8009b6a:	b10a      	cbz	r2, 8009b70 <__lshift+0xa4>
 8009b6c:	f108 0602 	add.w	r6, r8, #2
 8009b70:	3e01      	subs	r6, #1
 8009b72:	4638      	mov	r0, r7
 8009b74:	612e      	str	r6, [r5, #16]
 8009b76:	4621      	mov	r1, r4
 8009b78:	f7ff fdd8 	bl	800972c <_Bfree>
 8009b7c:	4628      	mov	r0, r5
 8009b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b82:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b86:	3301      	adds	r3, #1
 8009b88:	e7c5      	b.n	8009b16 <__lshift+0x4a>
 8009b8a:	3904      	subs	r1, #4
 8009b8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b90:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b94:	459c      	cmp	ip, r3
 8009b96:	d8f9      	bhi.n	8009b8c <__lshift+0xc0>
 8009b98:	e7ea      	b.n	8009b70 <__lshift+0xa4>
 8009b9a:	bf00      	nop
 8009b9c:	0800d069 	.word	0x0800d069
 8009ba0:	0800d07a 	.word	0x0800d07a

08009ba4 <__mcmp>:
 8009ba4:	b530      	push	{r4, r5, lr}
 8009ba6:	6902      	ldr	r2, [r0, #16]
 8009ba8:	690c      	ldr	r4, [r1, #16]
 8009baa:	1b12      	subs	r2, r2, r4
 8009bac:	d10e      	bne.n	8009bcc <__mcmp+0x28>
 8009bae:	f100 0314 	add.w	r3, r0, #20
 8009bb2:	3114      	adds	r1, #20
 8009bb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009bc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bc4:	42a5      	cmp	r5, r4
 8009bc6:	d003      	beq.n	8009bd0 <__mcmp+0x2c>
 8009bc8:	d305      	bcc.n	8009bd6 <__mcmp+0x32>
 8009bca:	2201      	movs	r2, #1
 8009bcc:	4610      	mov	r0, r2
 8009bce:	bd30      	pop	{r4, r5, pc}
 8009bd0:	4283      	cmp	r3, r0
 8009bd2:	d3f3      	bcc.n	8009bbc <__mcmp+0x18>
 8009bd4:	e7fa      	b.n	8009bcc <__mcmp+0x28>
 8009bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bda:	e7f7      	b.n	8009bcc <__mcmp+0x28>

08009bdc <__mdiff>:
 8009bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	460c      	mov	r4, r1
 8009be2:	4606      	mov	r6, r0
 8009be4:	4611      	mov	r1, r2
 8009be6:	4620      	mov	r0, r4
 8009be8:	4690      	mov	r8, r2
 8009bea:	f7ff ffdb 	bl	8009ba4 <__mcmp>
 8009bee:	1e05      	subs	r5, r0, #0
 8009bf0:	d110      	bne.n	8009c14 <__mdiff+0x38>
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	4630      	mov	r0, r6
 8009bf6:	f7ff fd59 	bl	80096ac <_Balloc>
 8009bfa:	b930      	cbnz	r0, 8009c0a <__mdiff+0x2e>
 8009bfc:	4b3a      	ldr	r3, [pc, #232]	; (8009ce8 <__mdiff+0x10c>)
 8009bfe:	4602      	mov	r2, r0
 8009c00:	f240 2137 	movw	r1, #567	; 0x237
 8009c04:	4839      	ldr	r0, [pc, #228]	; (8009cec <__mdiff+0x110>)
 8009c06:	f000 f999 	bl	8009f3c <__assert_func>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c14:	bfa4      	itt	ge
 8009c16:	4643      	movge	r3, r8
 8009c18:	46a0      	movge	r8, r4
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c20:	bfa6      	itte	ge
 8009c22:	461c      	movge	r4, r3
 8009c24:	2500      	movge	r5, #0
 8009c26:	2501      	movlt	r5, #1
 8009c28:	f7ff fd40 	bl	80096ac <_Balloc>
 8009c2c:	b920      	cbnz	r0, 8009c38 <__mdiff+0x5c>
 8009c2e:	4b2e      	ldr	r3, [pc, #184]	; (8009ce8 <__mdiff+0x10c>)
 8009c30:	4602      	mov	r2, r0
 8009c32:	f240 2145 	movw	r1, #581	; 0x245
 8009c36:	e7e5      	b.n	8009c04 <__mdiff+0x28>
 8009c38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c3c:	6926      	ldr	r6, [r4, #16]
 8009c3e:	60c5      	str	r5, [r0, #12]
 8009c40:	f104 0914 	add.w	r9, r4, #20
 8009c44:	f108 0514 	add.w	r5, r8, #20
 8009c48:	f100 0e14 	add.w	lr, r0, #20
 8009c4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c54:	f108 0210 	add.w	r2, r8, #16
 8009c58:	46f2      	mov	sl, lr
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c64:	fa11 f88b 	uxtah	r8, r1, fp
 8009c68:	b299      	uxth	r1, r3
 8009c6a:	0c1b      	lsrs	r3, r3, #16
 8009c6c:	eba8 0801 	sub.w	r8, r8, r1
 8009c70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c78:	fa1f f888 	uxth.w	r8, r8
 8009c7c:	1419      	asrs	r1, r3, #16
 8009c7e:	454e      	cmp	r6, r9
 8009c80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c84:	f84a 3b04 	str.w	r3, [sl], #4
 8009c88:	d8e8      	bhi.n	8009c5c <__mdiff+0x80>
 8009c8a:	1b33      	subs	r3, r6, r4
 8009c8c:	3b15      	subs	r3, #21
 8009c8e:	f023 0303 	bic.w	r3, r3, #3
 8009c92:	3304      	adds	r3, #4
 8009c94:	3415      	adds	r4, #21
 8009c96:	42a6      	cmp	r6, r4
 8009c98:	bf38      	it	cc
 8009c9a:	2304      	movcc	r3, #4
 8009c9c:	441d      	add	r5, r3
 8009c9e:	4473      	add	r3, lr
 8009ca0:	469e      	mov	lr, r3
 8009ca2:	462e      	mov	r6, r5
 8009ca4:	4566      	cmp	r6, ip
 8009ca6:	d30e      	bcc.n	8009cc6 <__mdiff+0xea>
 8009ca8:	f10c 0203 	add.w	r2, ip, #3
 8009cac:	1b52      	subs	r2, r2, r5
 8009cae:	f022 0203 	bic.w	r2, r2, #3
 8009cb2:	3d03      	subs	r5, #3
 8009cb4:	45ac      	cmp	ip, r5
 8009cb6:	bf38      	it	cc
 8009cb8:	2200      	movcc	r2, #0
 8009cba:	4413      	add	r3, r2
 8009cbc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009cc0:	b17a      	cbz	r2, 8009ce2 <__mdiff+0x106>
 8009cc2:	6107      	str	r7, [r0, #16]
 8009cc4:	e7a4      	b.n	8009c10 <__mdiff+0x34>
 8009cc6:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cca:	fa11 f288 	uxtah	r2, r1, r8
 8009cce:	1414      	asrs	r4, r2, #16
 8009cd0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cd4:	b292      	uxth	r2, r2
 8009cd6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cda:	f84e 2b04 	str.w	r2, [lr], #4
 8009cde:	1421      	asrs	r1, r4, #16
 8009ce0:	e7e0      	b.n	8009ca4 <__mdiff+0xc8>
 8009ce2:	3f01      	subs	r7, #1
 8009ce4:	e7ea      	b.n	8009cbc <__mdiff+0xe0>
 8009ce6:	bf00      	nop
 8009ce8:	0800d069 	.word	0x0800d069
 8009cec:	0800d07a 	.word	0x0800d07a

08009cf0 <__d2b>:
 8009cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cf4:	460f      	mov	r7, r1
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	ec59 8b10 	vmov	r8, r9, d0
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	f7ff fcd5 	bl	80096ac <_Balloc>
 8009d02:	4604      	mov	r4, r0
 8009d04:	b930      	cbnz	r0, 8009d14 <__d2b+0x24>
 8009d06:	4602      	mov	r2, r0
 8009d08:	4b24      	ldr	r3, [pc, #144]	; (8009d9c <__d2b+0xac>)
 8009d0a:	4825      	ldr	r0, [pc, #148]	; (8009da0 <__d2b+0xb0>)
 8009d0c:	f240 310f 	movw	r1, #783	; 0x30f
 8009d10:	f000 f914 	bl	8009f3c <__assert_func>
 8009d14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d1c:	bb2d      	cbnz	r5, 8009d6a <__d2b+0x7a>
 8009d1e:	9301      	str	r3, [sp, #4]
 8009d20:	f1b8 0300 	subs.w	r3, r8, #0
 8009d24:	d026      	beq.n	8009d74 <__d2b+0x84>
 8009d26:	4668      	mov	r0, sp
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	f7ff fd87 	bl	800983c <__lo0bits>
 8009d2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d32:	b1e8      	cbz	r0, 8009d70 <__d2b+0x80>
 8009d34:	f1c0 0320 	rsb	r3, r0, #32
 8009d38:	fa02 f303 	lsl.w	r3, r2, r3
 8009d3c:	430b      	orrs	r3, r1
 8009d3e:	40c2      	lsrs	r2, r0
 8009d40:	6163      	str	r3, [r4, #20]
 8009d42:	9201      	str	r2, [sp, #4]
 8009d44:	9b01      	ldr	r3, [sp, #4]
 8009d46:	61a3      	str	r3, [r4, #24]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	bf14      	ite	ne
 8009d4c:	2202      	movne	r2, #2
 8009d4e:	2201      	moveq	r2, #1
 8009d50:	6122      	str	r2, [r4, #16]
 8009d52:	b1bd      	cbz	r5, 8009d84 <__d2b+0x94>
 8009d54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d58:	4405      	add	r5, r0
 8009d5a:	603d      	str	r5, [r7, #0]
 8009d5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d60:	6030      	str	r0, [r6, #0]
 8009d62:	4620      	mov	r0, r4
 8009d64:	b003      	add	sp, #12
 8009d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d6e:	e7d6      	b.n	8009d1e <__d2b+0x2e>
 8009d70:	6161      	str	r1, [r4, #20]
 8009d72:	e7e7      	b.n	8009d44 <__d2b+0x54>
 8009d74:	a801      	add	r0, sp, #4
 8009d76:	f7ff fd61 	bl	800983c <__lo0bits>
 8009d7a:	9b01      	ldr	r3, [sp, #4]
 8009d7c:	6163      	str	r3, [r4, #20]
 8009d7e:	3020      	adds	r0, #32
 8009d80:	2201      	movs	r2, #1
 8009d82:	e7e5      	b.n	8009d50 <__d2b+0x60>
 8009d84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d8c:	6038      	str	r0, [r7, #0]
 8009d8e:	6918      	ldr	r0, [r3, #16]
 8009d90:	f7ff fd34 	bl	80097fc <__hi0bits>
 8009d94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d98:	e7e2      	b.n	8009d60 <__d2b+0x70>
 8009d9a:	bf00      	nop
 8009d9c:	0800d069 	.word	0x0800d069
 8009da0:	0800d07a 	.word	0x0800d07a

08009da4 <__sflush_r>:
 8009da4:	898a      	ldrh	r2, [r1, #12]
 8009da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009daa:	4605      	mov	r5, r0
 8009dac:	0710      	lsls	r0, r2, #28
 8009dae:	460c      	mov	r4, r1
 8009db0:	d458      	bmi.n	8009e64 <__sflush_r+0xc0>
 8009db2:	684b      	ldr	r3, [r1, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	dc05      	bgt.n	8009dc4 <__sflush_r+0x20>
 8009db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	dc02      	bgt.n	8009dc4 <__sflush_r+0x20>
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dc6:	2e00      	cmp	r6, #0
 8009dc8:	d0f9      	beq.n	8009dbe <__sflush_r+0x1a>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009dd0:	682f      	ldr	r7, [r5, #0]
 8009dd2:	6a21      	ldr	r1, [r4, #32]
 8009dd4:	602b      	str	r3, [r5, #0]
 8009dd6:	d032      	beq.n	8009e3e <__sflush_r+0x9a>
 8009dd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	075a      	lsls	r2, r3, #29
 8009dde:	d505      	bpl.n	8009dec <__sflush_r+0x48>
 8009de0:	6863      	ldr	r3, [r4, #4]
 8009de2:	1ac0      	subs	r0, r0, r3
 8009de4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009de6:	b10b      	cbz	r3, 8009dec <__sflush_r+0x48>
 8009de8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dea:	1ac0      	subs	r0, r0, r3
 8009dec:	2300      	movs	r3, #0
 8009dee:	4602      	mov	r2, r0
 8009df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009df2:	6a21      	ldr	r1, [r4, #32]
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b0      	blx	r6
 8009df8:	1c43      	adds	r3, r0, #1
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	d106      	bne.n	8009e0c <__sflush_r+0x68>
 8009dfe:	6829      	ldr	r1, [r5, #0]
 8009e00:	291d      	cmp	r1, #29
 8009e02:	d82b      	bhi.n	8009e5c <__sflush_r+0xb8>
 8009e04:	4a29      	ldr	r2, [pc, #164]	; (8009eac <__sflush_r+0x108>)
 8009e06:	410a      	asrs	r2, r1
 8009e08:	07d6      	lsls	r6, r2, #31
 8009e0a:	d427      	bmi.n	8009e5c <__sflush_r+0xb8>
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	6062      	str	r2, [r4, #4]
 8009e10:	04d9      	lsls	r1, r3, #19
 8009e12:	6922      	ldr	r2, [r4, #16]
 8009e14:	6022      	str	r2, [r4, #0]
 8009e16:	d504      	bpl.n	8009e22 <__sflush_r+0x7e>
 8009e18:	1c42      	adds	r2, r0, #1
 8009e1a:	d101      	bne.n	8009e20 <__sflush_r+0x7c>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b903      	cbnz	r3, 8009e22 <__sflush_r+0x7e>
 8009e20:	6560      	str	r0, [r4, #84]	; 0x54
 8009e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e24:	602f      	str	r7, [r5, #0]
 8009e26:	2900      	cmp	r1, #0
 8009e28:	d0c9      	beq.n	8009dbe <__sflush_r+0x1a>
 8009e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e2e:	4299      	cmp	r1, r3
 8009e30:	d002      	beq.n	8009e38 <__sflush_r+0x94>
 8009e32:	4628      	mov	r0, r5
 8009e34:	f7ff fb3a 	bl	80094ac <_free_r>
 8009e38:	2000      	movs	r0, #0
 8009e3a:	6360      	str	r0, [r4, #52]	; 0x34
 8009e3c:	e7c0      	b.n	8009dc0 <__sflush_r+0x1c>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	4628      	mov	r0, r5
 8009e42:	47b0      	blx	r6
 8009e44:	1c41      	adds	r1, r0, #1
 8009e46:	d1c8      	bne.n	8009dda <__sflush_r+0x36>
 8009e48:	682b      	ldr	r3, [r5, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0c5      	beq.n	8009dda <__sflush_r+0x36>
 8009e4e:	2b1d      	cmp	r3, #29
 8009e50:	d001      	beq.n	8009e56 <__sflush_r+0xb2>
 8009e52:	2b16      	cmp	r3, #22
 8009e54:	d101      	bne.n	8009e5a <__sflush_r+0xb6>
 8009e56:	602f      	str	r7, [r5, #0]
 8009e58:	e7b1      	b.n	8009dbe <__sflush_r+0x1a>
 8009e5a:	89a3      	ldrh	r3, [r4, #12]
 8009e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e60:	81a3      	strh	r3, [r4, #12]
 8009e62:	e7ad      	b.n	8009dc0 <__sflush_r+0x1c>
 8009e64:	690f      	ldr	r7, [r1, #16]
 8009e66:	2f00      	cmp	r7, #0
 8009e68:	d0a9      	beq.n	8009dbe <__sflush_r+0x1a>
 8009e6a:	0793      	lsls	r3, r2, #30
 8009e6c:	680e      	ldr	r6, [r1, #0]
 8009e6e:	bf08      	it	eq
 8009e70:	694b      	ldreq	r3, [r1, #20]
 8009e72:	600f      	str	r7, [r1, #0]
 8009e74:	bf18      	it	ne
 8009e76:	2300      	movne	r3, #0
 8009e78:	eba6 0807 	sub.w	r8, r6, r7
 8009e7c:	608b      	str	r3, [r1, #8]
 8009e7e:	f1b8 0f00 	cmp.w	r8, #0
 8009e82:	dd9c      	ble.n	8009dbe <__sflush_r+0x1a>
 8009e84:	6a21      	ldr	r1, [r4, #32]
 8009e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e88:	4643      	mov	r3, r8
 8009e8a:	463a      	mov	r2, r7
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	47b0      	blx	r6
 8009e90:	2800      	cmp	r0, #0
 8009e92:	dc06      	bgt.n	8009ea2 <__sflush_r+0xfe>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea0:	e78e      	b.n	8009dc0 <__sflush_r+0x1c>
 8009ea2:	4407      	add	r7, r0
 8009ea4:	eba8 0800 	sub.w	r8, r8, r0
 8009ea8:	e7e9      	b.n	8009e7e <__sflush_r+0xda>
 8009eaa:	bf00      	nop
 8009eac:	dfbffffe 	.word	0xdfbffffe

08009eb0 <_fflush_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	690b      	ldr	r3, [r1, #16]
 8009eb4:	4605      	mov	r5, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	b913      	cbnz	r3, 8009ec0 <_fflush_r+0x10>
 8009eba:	2500      	movs	r5, #0
 8009ebc:	4628      	mov	r0, r5
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	b118      	cbz	r0, 8009eca <_fflush_r+0x1a>
 8009ec2:	6a03      	ldr	r3, [r0, #32]
 8009ec4:	b90b      	cbnz	r3, 8009eca <_fflush_r+0x1a>
 8009ec6:	f7fe fb7f 	bl	80085c8 <__sinit>
 8009eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0f3      	beq.n	8009eba <_fflush_r+0xa>
 8009ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ed4:	07d0      	lsls	r0, r2, #31
 8009ed6:	d404      	bmi.n	8009ee2 <_fflush_r+0x32>
 8009ed8:	0599      	lsls	r1, r3, #22
 8009eda:	d402      	bmi.n	8009ee2 <_fflush_r+0x32>
 8009edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ede:	f7fe fc69 	bl	80087b4 <__retarget_lock_acquire_recursive>
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	f7ff ff5d 	bl	8009da4 <__sflush_r>
 8009eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eec:	07da      	lsls	r2, r3, #31
 8009eee:	4605      	mov	r5, r0
 8009ef0:	d4e4      	bmi.n	8009ebc <_fflush_r+0xc>
 8009ef2:	89a3      	ldrh	r3, [r4, #12]
 8009ef4:	059b      	lsls	r3, r3, #22
 8009ef6:	d4e1      	bmi.n	8009ebc <_fflush_r+0xc>
 8009ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009efa:	f7fe fc5c 	bl	80087b6 <__retarget_lock_release_recursive>
 8009efe:	e7dd      	b.n	8009ebc <_fflush_r+0xc>

08009f00 <_sbrk_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d06      	ldr	r5, [pc, #24]	; (8009f1c <_sbrk_r+0x1c>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f7fb fafe 	bl	800550c <_sbrk>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_sbrk_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_sbrk_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	20000df0 	.word	0x20000df0

08009f20 <memcpy>:
 8009f20:	440a      	add	r2, r1
 8009f22:	4291      	cmp	r1, r2
 8009f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f28:	d100      	bne.n	8009f2c <memcpy+0xc>
 8009f2a:	4770      	bx	lr
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f36:	4291      	cmp	r1, r2
 8009f38:	d1f9      	bne.n	8009f2e <memcpy+0xe>
 8009f3a:	bd10      	pop	{r4, pc}

08009f3c <__assert_func>:
 8009f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f3e:	4614      	mov	r4, r2
 8009f40:	461a      	mov	r2, r3
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <__assert_func+0x2c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4605      	mov	r5, r0
 8009f48:	68d8      	ldr	r0, [r3, #12]
 8009f4a:	b14c      	cbz	r4, 8009f60 <__assert_func+0x24>
 8009f4c:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <__assert_func+0x30>)
 8009f4e:	9100      	str	r1, [sp, #0]
 8009f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f54:	4906      	ldr	r1, [pc, #24]	; (8009f70 <__assert_func+0x34>)
 8009f56:	462b      	mov	r3, r5
 8009f58:	f000 f844 	bl	8009fe4 <fiprintf>
 8009f5c:	f000 f854 	bl	800a008 <abort>
 8009f60:	4b04      	ldr	r3, [pc, #16]	; (8009f74 <__assert_func+0x38>)
 8009f62:	461c      	mov	r4, r3
 8009f64:	e7f3      	b.n	8009f4e <__assert_func+0x12>
 8009f66:	bf00      	nop
 8009f68:	200000a0 	.word	0x200000a0
 8009f6c:	0800d1de 	.word	0x0800d1de
 8009f70:	0800d1eb 	.word	0x0800d1eb
 8009f74:	0800d219 	.word	0x0800d219

08009f78 <_calloc_r>:
 8009f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f7a:	fba1 2402 	umull	r2, r4, r1, r2
 8009f7e:	b94c      	cbnz	r4, 8009f94 <_calloc_r+0x1c>
 8009f80:	4611      	mov	r1, r2
 8009f82:	9201      	str	r2, [sp, #4]
 8009f84:	f7ff fb06 	bl	8009594 <_malloc_r>
 8009f88:	9a01      	ldr	r2, [sp, #4]
 8009f8a:	4605      	mov	r5, r0
 8009f8c:	b930      	cbnz	r0, 8009f9c <_calloc_r+0x24>
 8009f8e:	4628      	mov	r0, r5
 8009f90:	b003      	add	sp, #12
 8009f92:	bd30      	pop	{r4, r5, pc}
 8009f94:	220c      	movs	r2, #12
 8009f96:	6002      	str	r2, [r0, #0]
 8009f98:	2500      	movs	r5, #0
 8009f9a:	e7f8      	b.n	8009f8e <_calloc_r+0x16>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	f7fe fb8c 	bl	80086ba <memset>
 8009fa2:	e7f4      	b.n	8009f8e <_calloc_r+0x16>

08009fa4 <__ascii_mbtowc>:
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	b901      	cbnz	r1, 8009faa <__ascii_mbtowc+0x6>
 8009fa8:	a901      	add	r1, sp, #4
 8009faa:	b142      	cbz	r2, 8009fbe <__ascii_mbtowc+0x1a>
 8009fac:	b14b      	cbz	r3, 8009fc2 <__ascii_mbtowc+0x1e>
 8009fae:	7813      	ldrb	r3, [r2, #0]
 8009fb0:	600b      	str	r3, [r1, #0]
 8009fb2:	7812      	ldrb	r2, [r2, #0]
 8009fb4:	1e10      	subs	r0, r2, #0
 8009fb6:	bf18      	it	ne
 8009fb8:	2001      	movne	r0, #1
 8009fba:	b002      	add	sp, #8
 8009fbc:	4770      	bx	lr
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	e7fb      	b.n	8009fba <__ascii_mbtowc+0x16>
 8009fc2:	f06f 0001 	mvn.w	r0, #1
 8009fc6:	e7f8      	b.n	8009fba <__ascii_mbtowc+0x16>

08009fc8 <__ascii_wctomb>:
 8009fc8:	b149      	cbz	r1, 8009fde <__ascii_wctomb+0x16>
 8009fca:	2aff      	cmp	r2, #255	; 0xff
 8009fcc:	bf85      	ittet	hi
 8009fce:	238a      	movhi	r3, #138	; 0x8a
 8009fd0:	6003      	strhi	r3, [r0, #0]
 8009fd2:	700a      	strbls	r2, [r1, #0]
 8009fd4:	f04f 30ff 	movhi.w	r0, #4294967295
 8009fd8:	bf98      	it	ls
 8009fda:	2001      	movls	r0, #1
 8009fdc:	4770      	bx	lr
 8009fde:	4608      	mov	r0, r1
 8009fe0:	4770      	bx	lr
	...

08009fe4 <fiprintf>:
 8009fe4:	b40e      	push	{r1, r2, r3}
 8009fe6:	b503      	push	{r0, r1, lr}
 8009fe8:	4601      	mov	r1, r0
 8009fea:	ab03      	add	r3, sp, #12
 8009fec:	4805      	ldr	r0, [pc, #20]	; (800a004 <fiprintf+0x20>)
 8009fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ff2:	6800      	ldr	r0, [r0, #0]
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	f000 f837 	bl	800a068 <_vfiprintf_r>
 8009ffa:	b002      	add	sp, #8
 8009ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a000:	b003      	add	sp, #12
 800a002:	4770      	bx	lr
 800a004:	200000a0 	.word	0x200000a0

0800a008 <abort>:
 800a008:	b508      	push	{r3, lr}
 800a00a:	2006      	movs	r0, #6
 800a00c:	f000 fa04 	bl	800a418 <raise>
 800a010:	2001      	movs	r0, #1
 800a012:	f7fb fa4b 	bl	80054ac <_exit>

0800a016 <__sfputc_r>:
 800a016:	6893      	ldr	r3, [r2, #8]
 800a018:	3b01      	subs	r3, #1
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	b410      	push	{r4}
 800a01e:	6093      	str	r3, [r2, #8]
 800a020:	da08      	bge.n	800a034 <__sfputc_r+0x1e>
 800a022:	6994      	ldr	r4, [r2, #24]
 800a024:	42a3      	cmp	r3, r4
 800a026:	db01      	blt.n	800a02c <__sfputc_r+0x16>
 800a028:	290a      	cmp	r1, #10
 800a02a:	d103      	bne.n	800a034 <__sfputc_r+0x1e>
 800a02c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a030:	f000 b934 	b.w	800a29c <__swbuf_r>
 800a034:	6813      	ldr	r3, [r2, #0]
 800a036:	1c58      	adds	r0, r3, #1
 800a038:	6010      	str	r0, [r2, #0]
 800a03a:	7019      	strb	r1, [r3, #0]
 800a03c:	4608      	mov	r0, r1
 800a03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <__sfputs_r>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	4606      	mov	r6, r0
 800a048:	460f      	mov	r7, r1
 800a04a:	4614      	mov	r4, r2
 800a04c:	18d5      	adds	r5, r2, r3
 800a04e:	42ac      	cmp	r4, r5
 800a050:	d101      	bne.n	800a056 <__sfputs_r+0x12>
 800a052:	2000      	movs	r0, #0
 800a054:	e007      	b.n	800a066 <__sfputs_r+0x22>
 800a056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a05a:	463a      	mov	r2, r7
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7ff ffda 	bl	800a016 <__sfputc_r>
 800a062:	1c43      	adds	r3, r0, #1
 800a064:	d1f3      	bne.n	800a04e <__sfputs_r+0xa>
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a068 <_vfiprintf_r>:
 800a068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	460d      	mov	r5, r1
 800a06e:	b09d      	sub	sp, #116	; 0x74
 800a070:	4614      	mov	r4, r2
 800a072:	4698      	mov	r8, r3
 800a074:	4606      	mov	r6, r0
 800a076:	b118      	cbz	r0, 800a080 <_vfiprintf_r+0x18>
 800a078:	6a03      	ldr	r3, [r0, #32]
 800a07a:	b90b      	cbnz	r3, 800a080 <_vfiprintf_r+0x18>
 800a07c:	f7fe faa4 	bl	80085c8 <__sinit>
 800a080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a082:	07d9      	lsls	r1, r3, #31
 800a084:	d405      	bmi.n	800a092 <_vfiprintf_r+0x2a>
 800a086:	89ab      	ldrh	r3, [r5, #12]
 800a088:	059a      	lsls	r2, r3, #22
 800a08a:	d402      	bmi.n	800a092 <_vfiprintf_r+0x2a>
 800a08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a08e:	f7fe fb91 	bl	80087b4 <__retarget_lock_acquire_recursive>
 800a092:	89ab      	ldrh	r3, [r5, #12]
 800a094:	071b      	lsls	r3, r3, #28
 800a096:	d501      	bpl.n	800a09c <_vfiprintf_r+0x34>
 800a098:	692b      	ldr	r3, [r5, #16]
 800a09a:	b99b      	cbnz	r3, 800a0c4 <_vfiprintf_r+0x5c>
 800a09c:	4629      	mov	r1, r5
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f000 f93a 	bl	800a318 <__swsetup_r>
 800a0a4:	b170      	cbz	r0, 800a0c4 <_vfiprintf_r+0x5c>
 800a0a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0a8:	07dc      	lsls	r4, r3, #31
 800a0aa:	d504      	bpl.n	800a0b6 <_vfiprintf_r+0x4e>
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	b01d      	add	sp, #116	; 0x74
 800a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b6:	89ab      	ldrh	r3, [r5, #12]
 800a0b8:	0598      	lsls	r0, r3, #22
 800a0ba:	d4f7      	bmi.n	800a0ac <_vfiprintf_r+0x44>
 800a0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0be:	f7fe fb7a 	bl	80087b6 <__retarget_lock_release_recursive>
 800a0c2:	e7f3      	b.n	800a0ac <_vfiprintf_r+0x44>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c8:	2320      	movs	r3, #32
 800a0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0d2:	2330      	movs	r3, #48	; 0x30
 800a0d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a288 <_vfiprintf_r+0x220>
 800a0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0dc:	f04f 0901 	mov.w	r9, #1
 800a0e0:	4623      	mov	r3, r4
 800a0e2:	469a      	mov	sl, r3
 800a0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0e8:	b10a      	cbz	r2, 800a0ee <_vfiprintf_r+0x86>
 800a0ea:	2a25      	cmp	r2, #37	; 0x25
 800a0ec:	d1f9      	bne.n	800a0e2 <_vfiprintf_r+0x7a>
 800a0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a0f2:	d00b      	beq.n	800a10c <_vfiprintf_r+0xa4>
 800a0f4:	465b      	mov	r3, fp
 800a0f6:	4622      	mov	r2, r4
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	f7ff ffa2 	bl	800a044 <__sfputs_r>
 800a100:	3001      	adds	r0, #1
 800a102:	f000 80a9 	beq.w	800a258 <_vfiprintf_r+0x1f0>
 800a106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a108:	445a      	add	r2, fp
 800a10a:	9209      	str	r2, [sp, #36]	; 0x24
 800a10c:	f89a 3000 	ldrb.w	r3, [sl]
 800a110:	2b00      	cmp	r3, #0
 800a112:	f000 80a1 	beq.w	800a258 <_vfiprintf_r+0x1f0>
 800a116:	2300      	movs	r3, #0
 800a118:	f04f 32ff 	mov.w	r2, #4294967295
 800a11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a120:	f10a 0a01 	add.w	sl, sl, #1
 800a124:	9304      	str	r3, [sp, #16]
 800a126:	9307      	str	r3, [sp, #28]
 800a128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a12c:	931a      	str	r3, [sp, #104]	; 0x68
 800a12e:	4654      	mov	r4, sl
 800a130:	2205      	movs	r2, #5
 800a132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a136:	4854      	ldr	r0, [pc, #336]	; (800a288 <_vfiprintf_r+0x220>)
 800a138:	f7f6 f84a 	bl	80001d0 <memchr>
 800a13c:	9a04      	ldr	r2, [sp, #16]
 800a13e:	b9d8      	cbnz	r0, 800a178 <_vfiprintf_r+0x110>
 800a140:	06d1      	lsls	r1, r2, #27
 800a142:	bf44      	itt	mi
 800a144:	2320      	movmi	r3, #32
 800a146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a14a:	0713      	lsls	r3, r2, #28
 800a14c:	bf44      	itt	mi
 800a14e:	232b      	movmi	r3, #43	; 0x2b
 800a150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a154:	f89a 3000 	ldrb.w	r3, [sl]
 800a158:	2b2a      	cmp	r3, #42	; 0x2a
 800a15a:	d015      	beq.n	800a188 <_vfiprintf_r+0x120>
 800a15c:	9a07      	ldr	r2, [sp, #28]
 800a15e:	4654      	mov	r4, sl
 800a160:	2000      	movs	r0, #0
 800a162:	f04f 0c0a 	mov.w	ip, #10
 800a166:	4621      	mov	r1, r4
 800a168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a16c:	3b30      	subs	r3, #48	; 0x30
 800a16e:	2b09      	cmp	r3, #9
 800a170:	d94d      	bls.n	800a20e <_vfiprintf_r+0x1a6>
 800a172:	b1b0      	cbz	r0, 800a1a2 <_vfiprintf_r+0x13a>
 800a174:	9207      	str	r2, [sp, #28]
 800a176:	e014      	b.n	800a1a2 <_vfiprintf_r+0x13a>
 800a178:	eba0 0308 	sub.w	r3, r0, r8
 800a17c:	fa09 f303 	lsl.w	r3, r9, r3
 800a180:	4313      	orrs	r3, r2
 800a182:	9304      	str	r3, [sp, #16]
 800a184:	46a2      	mov	sl, r4
 800a186:	e7d2      	b.n	800a12e <_vfiprintf_r+0xc6>
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	1d19      	adds	r1, r3, #4
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	9103      	str	r1, [sp, #12]
 800a190:	2b00      	cmp	r3, #0
 800a192:	bfbb      	ittet	lt
 800a194:	425b      	neglt	r3, r3
 800a196:	f042 0202 	orrlt.w	r2, r2, #2
 800a19a:	9307      	strge	r3, [sp, #28]
 800a19c:	9307      	strlt	r3, [sp, #28]
 800a19e:	bfb8      	it	lt
 800a1a0:	9204      	strlt	r2, [sp, #16]
 800a1a2:	7823      	ldrb	r3, [r4, #0]
 800a1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a1a6:	d10c      	bne.n	800a1c2 <_vfiprintf_r+0x15a>
 800a1a8:	7863      	ldrb	r3, [r4, #1]
 800a1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a1ac:	d134      	bne.n	800a218 <_vfiprintf_r+0x1b0>
 800a1ae:	9b03      	ldr	r3, [sp, #12]
 800a1b0:	1d1a      	adds	r2, r3, #4
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	9203      	str	r2, [sp, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bfb8      	it	lt
 800a1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1be:	3402      	adds	r4, #2
 800a1c0:	9305      	str	r3, [sp, #20]
 800a1c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a298 <_vfiprintf_r+0x230>
 800a1c6:	7821      	ldrb	r1, [r4, #0]
 800a1c8:	2203      	movs	r2, #3
 800a1ca:	4650      	mov	r0, sl
 800a1cc:	f7f6 f800 	bl	80001d0 <memchr>
 800a1d0:	b138      	cbz	r0, 800a1e2 <_vfiprintf_r+0x17a>
 800a1d2:	9b04      	ldr	r3, [sp, #16]
 800a1d4:	eba0 000a 	sub.w	r0, r0, sl
 800a1d8:	2240      	movs	r2, #64	; 0x40
 800a1da:	4082      	lsls	r2, r0
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	3401      	adds	r4, #1
 800a1e0:	9304      	str	r3, [sp, #16]
 800a1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1e6:	4829      	ldr	r0, [pc, #164]	; (800a28c <_vfiprintf_r+0x224>)
 800a1e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1ec:	2206      	movs	r2, #6
 800a1ee:	f7f5 ffef 	bl	80001d0 <memchr>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d03f      	beq.n	800a276 <_vfiprintf_r+0x20e>
 800a1f6:	4b26      	ldr	r3, [pc, #152]	; (800a290 <_vfiprintf_r+0x228>)
 800a1f8:	bb1b      	cbnz	r3, 800a242 <_vfiprintf_r+0x1da>
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	3307      	adds	r3, #7
 800a1fe:	f023 0307 	bic.w	r3, r3, #7
 800a202:	3308      	adds	r3, #8
 800a204:	9303      	str	r3, [sp, #12]
 800a206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a208:	443b      	add	r3, r7
 800a20a:	9309      	str	r3, [sp, #36]	; 0x24
 800a20c:	e768      	b.n	800a0e0 <_vfiprintf_r+0x78>
 800a20e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a212:	460c      	mov	r4, r1
 800a214:	2001      	movs	r0, #1
 800a216:	e7a6      	b.n	800a166 <_vfiprintf_r+0xfe>
 800a218:	2300      	movs	r3, #0
 800a21a:	3401      	adds	r4, #1
 800a21c:	9305      	str	r3, [sp, #20]
 800a21e:	4619      	mov	r1, r3
 800a220:	f04f 0c0a 	mov.w	ip, #10
 800a224:	4620      	mov	r0, r4
 800a226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a22a:	3a30      	subs	r2, #48	; 0x30
 800a22c:	2a09      	cmp	r2, #9
 800a22e:	d903      	bls.n	800a238 <_vfiprintf_r+0x1d0>
 800a230:	2b00      	cmp	r3, #0
 800a232:	d0c6      	beq.n	800a1c2 <_vfiprintf_r+0x15a>
 800a234:	9105      	str	r1, [sp, #20]
 800a236:	e7c4      	b.n	800a1c2 <_vfiprintf_r+0x15a>
 800a238:	fb0c 2101 	mla	r1, ip, r1, r2
 800a23c:	4604      	mov	r4, r0
 800a23e:	2301      	movs	r3, #1
 800a240:	e7f0      	b.n	800a224 <_vfiprintf_r+0x1bc>
 800a242:	ab03      	add	r3, sp, #12
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	462a      	mov	r2, r5
 800a248:	4b12      	ldr	r3, [pc, #72]	; (800a294 <_vfiprintf_r+0x22c>)
 800a24a:	a904      	add	r1, sp, #16
 800a24c:	4630      	mov	r0, r6
 800a24e:	f7fd fd7b 	bl	8007d48 <_printf_float>
 800a252:	4607      	mov	r7, r0
 800a254:	1c78      	adds	r0, r7, #1
 800a256:	d1d6      	bne.n	800a206 <_vfiprintf_r+0x19e>
 800a258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a25a:	07d9      	lsls	r1, r3, #31
 800a25c:	d405      	bmi.n	800a26a <_vfiprintf_r+0x202>
 800a25e:	89ab      	ldrh	r3, [r5, #12]
 800a260:	059a      	lsls	r2, r3, #22
 800a262:	d402      	bmi.n	800a26a <_vfiprintf_r+0x202>
 800a264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a266:	f7fe faa6 	bl	80087b6 <__retarget_lock_release_recursive>
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	065b      	lsls	r3, r3, #25
 800a26e:	f53f af1d 	bmi.w	800a0ac <_vfiprintf_r+0x44>
 800a272:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a274:	e71c      	b.n	800a0b0 <_vfiprintf_r+0x48>
 800a276:	ab03      	add	r3, sp, #12
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	462a      	mov	r2, r5
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <_vfiprintf_r+0x22c>)
 800a27e:	a904      	add	r1, sp, #16
 800a280:	4630      	mov	r0, r6
 800a282:	f7fe f805 	bl	8008290 <_printf_i>
 800a286:	e7e4      	b.n	800a252 <_vfiprintf_r+0x1ea>
 800a288:	0800d21a 	.word	0x0800d21a
 800a28c:	0800d224 	.word	0x0800d224
 800a290:	08007d49 	.word	0x08007d49
 800a294:	0800a045 	.word	0x0800a045
 800a298:	0800d220 	.word	0x0800d220

0800a29c <__swbuf_r>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	460e      	mov	r6, r1
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	4605      	mov	r5, r0
 800a2a4:	b118      	cbz	r0, 800a2ae <__swbuf_r+0x12>
 800a2a6:	6a03      	ldr	r3, [r0, #32]
 800a2a8:	b90b      	cbnz	r3, 800a2ae <__swbuf_r+0x12>
 800a2aa:	f7fe f98d 	bl	80085c8 <__sinit>
 800a2ae:	69a3      	ldr	r3, [r4, #24]
 800a2b0:	60a3      	str	r3, [r4, #8]
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	071a      	lsls	r2, r3, #28
 800a2b6:	d525      	bpl.n	800a304 <__swbuf_r+0x68>
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	b31b      	cbz	r3, 800a304 <__swbuf_r+0x68>
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	6922      	ldr	r2, [r4, #16]
 800a2c0:	1a98      	subs	r0, r3, r2
 800a2c2:	6963      	ldr	r3, [r4, #20]
 800a2c4:	b2f6      	uxtb	r6, r6
 800a2c6:	4283      	cmp	r3, r0
 800a2c8:	4637      	mov	r7, r6
 800a2ca:	dc04      	bgt.n	800a2d6 <__swbuf_r+0x3a>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f7ff fdee 	bl	8009eb0 <_fflush_r>
 800a2d4:	b9e0      	cbnz	r0, 800a310 <__swbuf_r+0x74>
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	60a3      	str	r3, [r4, #8]
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	1c5a      	adds	r2, r3, #1
 800a2e0:	6022      	str	r2, [r4, #0]
 800a2e2:	701e      	strb	r6, [r3, #0]
 800a2e4:	6962      	ldr	r2, [r4, #20]
 800a2e6:	1c43      	adds	r3, r0, #1
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d004      	beq.n	800a2f6 <__swbuf_r+0x5a>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	07db      	lsls	r3, r3, #31
 800a2f0:	d506      	bpl.n	800a300 <__swbuf_r+0x64>
 800a2f2:	2e0a      	cmp	r6, #10
 800a2f4:	d104      	bne.n	800a300 <__swbuf_r+0x64>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f7ff fdd9 	bl	8009eb0 <_fflush_r>
 800a2fe:	b938      	cbnz	r0, 800a310 <__swbuf_r+0x74>
 800a300:	4638      	mov	r0, r7
 800a302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a304:	4621      	mov	r1, r4
 800a306:	4628      	mov	r0, r5
 800a308:	f000 f806 	bl	800a318 <__swsetup_r>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d0d5      	beq.n	800a2bc <__swbuf_r+0x20>
 800a310:	f04f 37ff 	mov.w	r7, #4294967295
 800a314:	e7f4      	b.n	800a300 <__swbuf_r+0x64>
	...

0800a318 <__swsetup_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4b2a      	ldr	r3, [pc, #168]	; (800a3c4 <__swsetup_r+0xac>)
 800a31c:	4605      	mov	r5, r0
 800a31e:	6818      	ldr	r0, [r3, #0]
 800a320:	460c      	mov	r4, r1
 800a322:	b118      	cbz	r0, 800a32c <__swsetup_r+0x14>
 800a324:	6a03      	ldr	r3, [r0, #32]
 800a326:	b90b      	cbnz	r3, 800a32c <__swsetup_r+0x14>
 800a328:	f7fe f94e 	bl	80085c8 <__sinit>
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a332:	0718      	lsls	r0, r3, #28
 800a334:	d422      	bmi.n	800a37c <__swsetup_r+0x64>
 800a336:	06d9      	lsls	r1, r3, #27
 800a338:	d407      	bmi.n	800a34a <__swsetup_r+0x32>
 800a33a:	2309      	movs	r3, #9
 800a33c:	602b      	str	r3, [r5, #0]
 800a33e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a342:	81a3      	strh	r3, [r4, #12]
 800a344:	f04f 30ff 	mov.w	r0, #4294967295
 800a348:	e034      	b.n	800a3b4 <__swsetup_r+0x9c>
 800a34a:	0758      	lsls	r0, r3, #29
 800a34c:	d512      	bpl.n	800a374 <__swsetup_r+0x5c>
 800a34e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a350:	b141      	cbz	r1, 800a364 <__swsetup_r+0x4c>
 800a352:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a356:	4299      	cmp	r1, r3
 800a358:	d002      	beq.n	800a360 <__swsetup_r+0x48>
 800a35a:	4628      	mov	r0, r5
 800a35c:	f7ff f8a6 	bl	80094ac <_free_r>
 800a360:	2300      	movs	r3, #0
 800a362:	6363      	str	r3, [r4, #52]	; 0x34
 800a364:	89a3      	ldrh	r3, [r4, #12]
 800a366:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a36a:	81a3      	strh	r3, [r4, #12]
 800a36c:	2300      	movs	r3, #0
 800a36e:	6063      	str	r3, [r4, #4]
 800a370:	6923      	ldr	r3, [r4, #16]
 800a372:	6023      	str	r3, [r4, #0]
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	f043 0308 	orr.w	r3, r3, #8
 800a37a:	81a3      	strh	r3, [r4, #12]
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	b94b      	cbnz	r3, 800a394 <__swsetup_r+0x7c>
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a38a:	d003      	beq.n	800a394 <__swsetup_r+0x7c>
 800a38c:	4621      	mov	r1, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	f000 f884 	bl	800a49c <__smakebuf_r>
 800a394:	89a0      	ldrh	r0, [r4, #12]
 800a396:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a39a:	f010 0301 	ands.w	r3, r0, #1
 800a39e:	d00a      	beq.n	800a3b6 <__swsetup_r+0x9e>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60a3      	str	r3, [r4, #8]
 800a3a4:	6963      	ldr	r3, [r4, #20]
 800a3a6:	425b      	negs	r3, r3
 800a3a8:	61a3      	str	r3, [r4, #24]
 800a3aa:	6923      	ldr	r3, [r4, #16]
 800a3ac:	b943      	cbnz	r3, 800a3c0 <__swsetup_r+0xa8>
 800a3ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3b2:	d1c4      	bne.n	800a33e <__swsetup_r+0x26>
 800a3b4:	bd38      	pop	{r3, r4, r5, pc}
 800a3b6:	0781      	lsls	r1, r0, #30
 800a3b8:	bf58      	it	pl
 800a3ba:	6963      	ldrpl	r3, [r4, #20]
 800a3bc:	60a3      	str	r3, [r4, #8]
 800a3be:	e7f4      	b.n	800a3aa <__swsetup_r+0x92>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e7f7      	b.n	800a3b4 <__swsetup_r+0x9c>
 800a3c4:	200000a0 	.word	0x200000a0

0800a3c8 <_raise_r>:
 800a3c8:	291f      	cmp	r1, #31
 800a3ca:	b538      	push	{r3, r4, r5, lr}
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	d904      	bls.n	800a3dc <_raise_r+0x14>
 800a3d2:	2316      	movs	r3, #22
 800a3d4:	6003      	str	r3, [r0, #0]
 800a3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3da:	bd38      	pop	{r3, r4, r5, pc}
 800a3dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a3de:	b112      	cbz	r2, 800a3e6 <_raise_r+0x1e>
 800a3e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3e4:	b94b      	cbnz	r3, 800a3fa <_raise_r+0x32>
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f000 f830 	bl	800a44c <_getpid_r>
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	4601      	mov	r1, r0
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3f6:	f000 b817 	b.w	800a428 <_kill_r>
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d00a      	beq.n	800a414 <_raise_r+0x4c>
 800a3fe:	1c59      	adds	r1, r3, #1
 800a400:	d103      	bne.n	800a40a <_raise_r+0x42>
 800a402:	2316      	movs	r3, #22
 800a404:	6003      	str	r3, [r0, #0]
 800a406:	2001      	movs	r0, #1
 800a408:	e7e7      	b.n	800a3da <_raise_r+0x12>
 800a40a:	2400      	movs	r4, #0
 800a40c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a410:	4628      	mov	r0, r5
 800a412:	4798      	blx	r3
 800a414:	2000      	movs	r0, #0
 800a416:	e7e0      	b.n	800a3da <_raise_r+0x12>

0800a418 <raise>:
 800a418:	4b02      	ldr	r3, [pc, #8]	; (800a424 <raise+0xc>)
 800a41a:	4601      	mov	r1, r0
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	f7ff bfd3 	b.w	800a3c8 <_raise_r>
 800a422:	bf00      	nop
 800a424:	200000a0 	.word	0x200000a0

0800a428 <_kill_r>:
 800a428:	b538      	push	{r3, r4, r5, lr}
 800a42a:	4d07      	ldr	r5, [pc, #28]	; (800a448 <_kill_r+0x20>)
 800a42c:	2300      	movs	r3, #0
 800a42e:	4604      	mov	r4, r0
 800a430:	4608      	mov	r0, r1
 800a432:	4611      	mov	r1, r2
 800a434:	602b      	str	r3, [r5, #0]
 800a436:	f7fb f831 	bl	800549c <_kill>
 800a43a:	1c43      	adds	r3, r0, #1
 800a43c:	d102      	bne.n	800a444 <_kill_r+0x1c>
 800a43e:	682b      	ldr	r3, [r5, #0]
 800a440:	b103      	cbz	r3, 800a444 <_kill_r+0x1c>
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	bd38      	pop	{r3, r4, r5, pc}
 800a446:	bf00      	nop
 800a448:	20000df0 	.word	0x20000df0

0800a44c <_getpid_r>:
 800a44c:	f7fb b824 	b.w	8005498 <_getpid>

0800a450 <__swhatbuf_r>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	460c      	mov	r4, r1
 800a454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a458:	2900      	cmp	r1, #0
 800a45a:	b096      	sub	sp, #88	; 0x58
 800a45c:	4615      	mov	r5, r2
 800a45e:	461e      	mov	r6, r3
 800a460:	da0d      	bge.n	800a47e <__swhatbuf_r+0x2e>
 800a462:	89a3      	ldrh	r3, [r4, #12]
 800a464:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a468:	f04f 0100 	mov.w	r1, #0
 800a46c:	bf0c      	ite	eq
 800a46e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a472:	2340      	movne	r3, #64	; 0x40
 800a474:	2000      	movs	r0, #0
 800a476:	6031      	str	r1, [r6, #0]
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	b016      	add	sp, #88	; 0x58
 800a47c:	bd70      	pop	{r4, r5, r6, pc}
 800a47e:	466a      	mov	r2, sp
 800a480:	f000 f848 	bl	800a514 <_fstat_r>
 800a484:	2800      	cmp	r0, #0
 800a486:	dbec      	blt.n	800a462 <__swhatbuf_r+0x12>
 800a488:	9901      	ldr	r1, [sp, #4]
 800a48a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a48e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a492:	4259      	negs	r1, r3
 800a494:	4159      	adcs	r1, r3
 800a496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a49a:	e7eb      	b.n	800a474 <__swhatbuf_r+0x24>

0800a49c <__smakebuf_r>:
 800a49c:	898b      	ldrh	r3, [r1, #12]
 800a49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4a0:	079d      	lsls	r5, r3, #30
 800a4a2:	4606      	mov	r6, r0
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	d507      	bpl.n	800a4b8 <__smakebuf_r+0x1c>
 800a4a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	6123      	str	r3, [r4, #16]
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	6163      	str	r3, [r4, #20]
 800a4b4:	b002      	add	sp, #8
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	ab01      	add	r3, sp, #4
 800a4ba:	466a      	mov	r2, sp
 800a4bc:	f7ff ffc8 	bl	800a450 <__swhatbuf_r>
 800a4c0:	9900      	ldr	r1, [sp, #0]
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7ff f865 	bl	8009594 <_malloc_r>
 800a4ca:	b948      	cbnz	r0, 800a4e0 <__smakebuf_r+0x44>
 800a4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d0:	059a      	lsls	r2, r3, #22
 800a4d2:	d4ef      	bmi.n	800a4b4 <__smakebuf_r+0x18>
 800a4d4:	f023 0303 	bic.w	r3, r3, #3
 800a4d8:	f043 0302 	orr.w	r3, r3, #2
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	e7e3      	b.n	800a4a8 <__smakebuf_r+0xc>
 800a4e0:	89a3      	ldrh	r3, [r4, #12]
 800a4e2:	6020      	str	r0, [r4, #0]
 800a4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e8:	81a3      	strh	r3, [r4, #12]
 800a4ea:	9b00      	ldr	r3, [sp, #0]
 800a4ec:	6163      	str	r3, [r4, #20]
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	6120      	str	r0, [r4, #16]
 800a4f2:	b15b      	cbz	r3, 800a50c <__smakebuf_r+0x70>
 800a4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4f8:	4630      	mov	r0, r6
 800a4fa:	f000 f81d 	bl	800a538 <_isatty_r>
 800a4fe:	b128      	cbz	r0, 800a50c <__smakebuf_r+0x70>
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	f023 0303 	bic.w	r3, r3, #3
 800a506:	f043 0301 	orr.w	r3, r3, #1
 800a50a:	81a3      	strh	r3, [r4, #12]
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	431d      	orrs	r5, r3
 800a510:	81a5      	strh	r5, [r4, #12]
 800a512:	e7cf      	b.n	800a4b4 <__smakebuf_r+0x18>

0800a514 <_fstat_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4d07      	ldr	r5, [pc, #28]	; (800a534 <_fstat_r+0x20>)
 800a518:	2300      	movs	r3, #0
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	4611      	mov	r1, r2
 800a520:	602b      	str	r3, [r5, #0]
 800a522:	f7fa ffea 	bl	80054fa <_fstat>
 800a526:	1c43      	adds	r3, r0, #1
 800a528:	d102      	bne.n	800a530 <_fstat_r+0x1c>
 800a52a:	682b      	ldr	r3, [r5, #0]
 800a52c:	b103      	cbz	r3, 800a530 <_fstat_r+0x1c>
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	bd38      	pop	{r3, r4, r5, pc}
 800a532:	bf00      	nop
 800a534:	20000df0 	.word	0x20000df0

0800a538 <_isatty_r>:
 800a538:	b538      	push	{r3, r4, r5, lr}
 800a53a:	4d06      	ldr	r5, [pc, #24]	; (800a554 <_isatty_r+0x1c>)
 800a53c:	2300      	movs	r3, #0
 800a53e:	4604      	mov	r4, r0
 800a540:	4608      	mov	r0, r1
 800a542:	602b      	str	r3, [r5, #0]
 800a544:	f7fa ffde 	bl	8005504 <_isatty>
 800a548:	1c43      	adds	r3, r0, #1
 800a54a:	d102      	bne.n	800a552 <_isatty_r+0x1a>
 800a54c:	682b      	ldr	r3, [r5, #0]
 800a54e:	b103      	cbz	r3, 800a552 <_isatty_r+0x1a>
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	bd38      	pop	{r3, r4, r5, pc}
 800a554:	20000df0 	.word	0x20000df0

0800a558 <acos>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	ed2d 8b02 	vpush	{d8}
 800a55e:	ec55 4b10 	vmov	r4, r5, d0
 800a562:	f000 fc51 	bl	800ae08 <__ieee754_acos>
 800a566:	4622      	mov	r2, r4
 800a568:	462b      	mov	r3, r5
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	eeb0 8a40 	vmov.f32	s16, s0
 800a572:	eef0 8a60 	vmov.f32	s17, s1
 800a576:	f7f6 fad9 	bl	8000b2c <__aeabi_dcmpun>
 800a57a:	b9a8      	cbnz	r0, 800a5a8 <acos+0x50>
 800a57c:	ec45 4b10 	vmov	d0, r4, r5
 800a580:	f000 f942 	bl	800a808 <fabs>
 800a584:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <acos+0x60>)
 800a586:	ec51 0b10 	vmov	r0, r1, d0
 800a58a:	2200      	movs	r2, #0
 800a58c:	f7f6 fac4 	bl	8000b18 <__aeabi_dcmpgt>
 800a590:	b150      	cbz	r0, 800a5a8 <acos+0x50>
 800a592:	f7fe f8e5 	bl	8008760 <__errno>
 800a596:	ecbd 8b02 	vpop	{d8}
 800a59a:	2321      	movs	r3, #33	; 0x21
 800a59c:	6003      	str	r3, [r0, #0]
 800a59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a2:	4806      	ldr	r0, [pc, #24]	; (800a5bc <acos+0x64>)
 800a5a4:	f000 b9c0 	b.w	800a928 <nan>
 800a5a8:	eeb0 0a48 	vmov.f32	s0, s16
 800a5ac:	eef0 0a68 	vmov.f32	s1, s17
 800a5b0:	ecbd 8b02 	vpop	{d8}
 800a5b4:	bd38      	pop	{r3, r4, r5, pc}
 800a5b6:	bf00      	nop
 800a5b8:	3ff00000 	.word	0x3ff00000
 800a5bc:	0800d219 	.word	0x0800d219

0800a5c0 <asin>:
 800a5c0:	b538      	push	{r3, r4, r5, lr}
 800a5c2:	ed2d 8b02 	vpush	{d8}
 800a5c6:	ec55 4b10 	vmov	r4, r5, d0
 800a5ca:	f000 fe7d 	bl	800b2c8 <__ieee754_asin>
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	462b      	mov	r3, r5
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	4629      	mov	r1, r5
 800a5d6:	eeb0 8a40 	vmov.f32	s16, s0
 800a5da:	eef0 8a60 	vmov.f32	s17, s1
 800a5de:	f7f6 faa5 	bl	8000b2c <__aeabi_dcmpun>
 800a5e2:	b9a8      	cbnz	r0, 800a610 <asin+0x50>
 800a5e4:	ec45 4b10 	vmov	d0, r4, r5
 800a5e8:	f000 f90e 	bl	800a808 <fabs>
 800a5ec:	4b0c      	ldr	r3, [pc, #48]	; (800a620 <asin+0x60>)
 800a5ee:	ec51 0b10 	vmov	r0, r1, d0
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f7f6 fa90 	bl	8000b18 <__aeabi_dcmpgt>
 800a5f8:	b150      	cbz	r0, 800a610 <asin+0x50>
 800a5fa:	f7fe f8b1 	bl	8008760 <__errno>
 800a5fe:	ecbd 8b02 	vpop	{d8}
 800a602:	2321      	movs	r3, #33	; 0x21
 800a604:	6003      	str	r3, [r0, #0]
 800a606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a60a:	4806      	ldr	r0, [pc, #24]	; (800a624 <asin+0x64>)
 800a60c:	f000 b98c 	b.w	800a928 <nan>
 800a610:	eeb0 0a48 	vmov.f32	s0, s16
 800a614:	eef0 0a68 	vmov.f32	s1, s17
 800a618:	ecbd 8b02 	vpop	{d8}
 800a61c:	bd38      	pop	{r3, r4, r5, pc}
 800a61e:	bf00      	nop
 800a620:	3ff00000 	.word	0x3ff00000
 800a624:	0800d219 	.word	0x0800d219

0800a628 <pow>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	ed2d 8b02 	vpush	{d8}
 800a62e:	eeb0 8a40 	vmov.f32	s16, s0
 800a632:	eef0 8a60 	vmov.f32	s17, s1
 800a636:	ec55 4b11 	vmov	r4, r5, d1
 800a63a:	f001 f859 	bl	800b6f0 <__ieee754_pow>
 800a63e:	4622      	mov	r2, r4
 800a640:	462b      	mov	r3, r5
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	ec57 6b10 	vmov	r6, r7, d0
 800a64a:	f7f6 fa6f 	bl	8000b2c <__aeabi_dcmpun>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d13b      	bne.n	800a6ca <pow+0xa2>
 800a652:	ec51 0b18 	vmov	r0, r1, d8
 800a656:	2200      	movs	r2, #0
 800a658:	2300      	movs	r3, #0
 800a65a:	f7f6 fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 800a65e:	b1b8      	cbz	r0, 800a690 <pow+0x68>
 800a660:	2200      	movs	r2, #0
 800a662:	2300      	movs	r3, #0
 800a664:	4620      	mov	r0, r4
 800a666:	4629      	mov	r1, r5
 800a668:	f7f6 fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	d146      	bne.n	800a6fe <pow+0xd6>
 800a670:	ec45 4b10 	vmov	d0, r4, r5
 800a674:	f000 f94a 	bl	800a90c <finite>
 800a678:	b338      	cbz	r0, 800a6ca <pow+0xa2>
 800a67a:	2200      	movs	r2, #0
 800a67c:	2300      	movs	r3, #0
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	f7f6 fa2b 	bl	8000adc <__aeabi_dcmplt>
 800a686:	b300      	cbz	r0, 800a6ca <pow+0xa2>
 800a688:	f7fe f86a 	bl	8008760 <__errno>
 800a68c:	2322      	movs	r3, #34	; 0x22
 800a68e:	e01b      	b.n	800a6c8 <pow+0xa0>
 800a690:	ec47 6b10 	vmov	d0, r6, r7
 800a694:	f000 f93a 	bl	800a90c <finite>
 800a698:	b9e0      	cbnz	r0, 800a6d4 <pow+0xac>
 800a69a:	eeb0 0a48 	vmov.f32	s0, s16
 800a69e:	eef0 0a68 	vmov.f32	s1, s17
 800a6a2:	f000 f933 	bl	800a90c <finite>
 800a6a6:	b1a8      	cbz	r0, 800a6d4 <pow+0xac>
 800a6a8:	ec45 4b10 	vmov	d0, r4, r5
 800a6ac:	f000 f92e 	bl	800a90c <finite>
 800a6b0:	b180      	cbz	r0, 800a6d4 <pow+0xac>
 800a6b2:	4632      	mov	r2, r6
 800a6b4:	463b      	mov	r3, r7
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	f7f6 fa37 	bl	8000b2c <__aeabi_dcmpun>
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	d0e2      	beq.n	800a688 <pow+0x60>
 800a6c2:	f7fe f84d 	bl	8008760 <__errno>
 800a6c6:	2321      	movs	r3, #33	; 0x21
 800a6c8:	6003      	str	r3, [r0, #0]
 800a6ca:	ecbd 8b02 	vpop	{d8}
 800a6ce:	ec47 6b10 	vmov	d0, r6, r7
 800a6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4630      	mov	r0, r6
 800a6da:	4639      	mov	r1, r7
 800a6dc:	f7f6 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d0f2      	beq.n	800a6ca <pow+0xa2>
 800a6e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a6e8:	eef0 0a68 	vmov.f32	s1, s17
 800a6ec:	f000 f90e 	bl	800a90c <finite>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d0ea      	beq.n	800a6ca <pow+0xa2>
 800a6f4:	ec45 4b10 	vmov	d0, r4, r5
 800a6f8:	f000 f908 	bl	800a90c <finite>
 800a6fc:	e7c3      	b.n	800a686 <pow+0x5e>
 800a6fe:	4f01      	ldr	r7, [pc, #4]	; (800a704 <pow+0xdc>)
 800a700:	2600      	movs	r6, #0
 800a702:	e7e2      	b.n	800a6ca <pow+0xa2>
 800a704:	3ff00000 	.word	0x3ff00000

0800a708 <sqrt>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	ed2d 8b02 	vpush	{d8}
 800a70e:	ec55 4b10 	vmov	r4, r5, d0
 800a712:	f000 f911 	bl	800a938 <__ieee754_sqrt>
 800a716:	4622      	mov	r2, r4
 800a718:	462b      	mov	r3, r5
 800a71a:	4620      	mov	r0, r4
 800a71c:	4629      	mov	r1, r5
 800a71e:	eeb0 8a40 	vmov.f32	s16, s0
 800a722:	eef0 8a60 	vmov.f32	s17, s1
 800a726:	f7f6 fa01 	bl	8000b2c <__aeabi_dcmpun>
 800a72a:	b990      	cbnz	r0, 800a752 <sqrt+0x4a>
 800a72c:	2200      	movs	r2, #0
 800a72e:	2300      	movs	r3, #0
 800a730:	4620      	mov	r0, r4
 800a732:	4629      	mov	r1, r5
 800a734:	f7f6 f9d2 	bl	8000adc <__aeabi_dcmplt>
 800a738:	b158      	cbz	r0, 800a752 <sqrt+0x4a>
 800a73a:	f7fe f811 	bl	8008760 <__errno>
 800a73e:	2321      	movs	r3, #33	; 0x21
 800a740:	6003      	str	r3, [r0, #0]
 800a742:	2200      	movs	r2, #0
 800a744:	2300      	movs	r3, #0
 800a746:	4610      	mov	r0, r2
 800a748:	4619      	mov	r1, r3
 800a74a:	f7f6 f87f 	bl	800084c <__aeabi_ddiv>
 800a74e:	ec41 0b18 	vmov	d8, r0, r1
 800a752:	eeb0 0a48 	vmov.f32	s0, s16
 800a756:	eef0 0a68 	vmov.f32	s1, s17
 800a75a:	ecbd 8b02 	vpop	{d8}
 800a75e:	bd38      	pop	{r3, r4, r5, pc}

0800a760 <cos>:
 800a760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a762:	ec53 2b10 	vmov	r2, r3, d0
 800a766:	4826      	ldr	r0, [pc, #152]	; (800a800 <cos+0xa0>)
 800a768:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a76c:	4281      	cmp	r1, r0
 800a76e:	dc06      	bgt.n	800a77e <cos+0x1e>
 800a770:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a7f8 <cos+0x98>
 800a774:	b005      	add	sp, #20
 800a776:	f85d eb04 	ldr.w	lr, [sp], #4
 800a77a:	f000 b9bd 	b.w	800aaf8 <__kernel_cos>
 800a77e:	4821      	ldr	r0, [pc, #132]	; (800a804 <cos+0xa4>)
 800a780:	4281      	cmp	r1, r0
 800a782:	dd09      	ble.n	800a798 <cos+0x38>
 800a784:	ee10 0a10 	vmov	r0, s0
 800a788:	4619      	mov	r1, r3
 800a78a:	f7f5 fd7d 	bl	8000288 <__aeabi_dsub>
 800a78e:	ec41 0b10 	vmov	d0, r0, r1
 800a792:	b005      	add	sp, #20
 800a794:	f85d fb04 	ldr.w	pc, [sp], #4
 800a798:	4668      	mov	r0, sp
 800a79a:	f001 fcd5 	bl	800c148 <__ieee754_rem_pio2>
 800a79e:	f000 0003 	and.w	r0, r0, #3
 800a7a2:	2801      	cmp	r0, #1
 800a7a4:	d00b      	beq.n	800a7be <cos+0x5e>
 800a7a6:	2802      	cmp	r0, #2
 800a7a8:	d016      	beq.n	800a7d8 <cos+0x78>
 800a7aa:	b9e0      	cbnz	r0, 800a7e6 <cos+0x86>
 800a7ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7b0:	ed9d 0b00 	vldr	d0, [sp]
 800a7b4:	f000 f9a0 	bl	800aaf8 <__kernel_cos>
 800a7b8:	ec51 0b10 	vmov	r0, r1, d0
 800a7bc:	e7e7      	b.n	800a78e <cos+0x2e>
 800a7be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7c2:	ed9d 0b00 	vldr	d0, [sp]
 800a7c6:	f000 fa5f 	bl	800ac88 <__kernel_sin>
 800a7ca:	ec53 2b10 	vmov	r2, r3, d0
 800a7ce:	ee10 0a10 	vmov	r0, s0
 800a7d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a7d6:	e7da      	b.n	800a78e <cos+0x2e>
 800a7d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7dc:	ed9d 0b00 	vldr	d0, [sp]
 800a7e0:	f000 f98a 	bl	800aaf8 <__kernel_cos>
 800a7e4:	e7f1      	b.n	800a7ca <cos+0x6a>
 800a7e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7ea:	ed9d 0b00 	vldr	d0, [sp]
 800a7ee:	2001      	movs	r0, #1
 800a7f0:	f000 fa4a 	bl	800ac88 <__kernel_sin>
 800a7f4:	e7e0      	b.n	800a7b8 <cos+0x58>
 800a7f6:	bf00      	nop
	...
 800a800:	3fe921fb 	.word	0x3fe921fb
 800a804:	7fefffff 	.word	0x7fefffff

0800a808 <fabs>:
 800a808:	ec51 0b10 	vmov	r0, r1, d0
 800a80c:	ee10 2a10 	vmov	r2, s0
 800a810:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a814:	ec43 2b10 	vmov	d0, r2, r3
 800a818:	4770      	bx	lr
 800a81a:	0000      	movs	r0, r0
 800a81c:	0000      	movs	r0, r0
	...

0800a820 <sin>:
 800a820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a822:	ec53 2b10 	vmov	r2, r3, d0
 800a826:	4828      	ldr	r0, [pc, #160]	; (800a8c8 <sin+0xa8>)
 800a828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a82c:	4281      	cmp	r1, r0
 800a82e:	dc07      	bgt.n	800a840 <sin+0x20>
 800a830:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a8c0 <sin+0xa0>
 800a834:	2000      	movs	r0, #0
 800a836:	b005      	add	sp, #20
 800a838:	f85d eb04 	ldr.w	lr, [sp], #4
 800a83c:	f000 ba24 	b.w	800ac88 <__kernel_sin>
 800a840:	4822      	ldr	r0, [pc, #136]	; (800a8cc <sin+0xac>)
 800a842:	4281      	cmp	r1, r0
 800a844:	dd09      	ble.n	800a85a <sin+0x3a>
 800a846:	ee10 0a10 	vmov	r0, s0
 800a84a:	4619      	mov	r1, r3
 800a84c:	f7f5 fd1c 	bl	8000288 <__aeabi_dsub>
 800a850:	ec41 0b10 	vmov	d0, r0, r1
 800a854:	b005      	add	sp, #20
 800a856:	f85d fb04 	ldr.w	pc, [sp], #4
 800a85a:	4668      	mov	r0, sp
 800a85c:	f001 fc74 	bl	800c148 <__ieee754_rem_pio2>
 800a860:	f000 0003 	and.w	r0, r0, #3
 800a864:	2801      	cmp	r0, #1
 800a866:	d00c      	beq.n	800a882 <sin+0x62>
 800a868:	2802      	cmp	r0, #2
 800a86a:	d011      	beq.n	800a890 <sin+0x70>
 800a86c:	b9f0      	cbnz	r0, 800a8ac <sin+0x8c>
 800a86e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a872:	ed9d 0b00 	vldr	d0, [sp]
 800a876:	2001      	movs	r0, #1
 800a878:	f000 fa06 	bl	800ac88 <__kernel_sin>
 800a87c:	ec51 0b10 	vmov	r0, r1, d0
 800a880:	e7e6      	b.n	800a850 <sin+0x30>
 800a882:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a886:	ed9d 0b00 	vldr	d0, [sp]
 800a88a:	f000 f935 	bl	800aaf8 <__kernel_cos>
 800a88e:	e7f5      	b.n	800a87c <sin+0x5c>
 800a890:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a894:	ed9d 0b00 	vldr	d0, [sp]
 800a898:	2001      	movs	r0, #1
 800a89a:	f000 f9f5 	bl	800ac88 <__kernel_sin>
 800a89e:	ec53 2b10 	vmov	r2, r3, d0
 800a8a2:	ee10 0a10 	vmov	r0, s0
 800a8a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a8aa:	e7d1      	b.n	800a850 <sin+0x30>
 800a8ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a8b0:	ed9d 0b00 	vldr	d0, [sp]
 800a8b4:	f000 f920 	bl	800aaf8 <__kernel_cos>
 800a8b8:	e7f1      	b.n	800a89e <sin+0x7e>
 800a8ba:	bf00      	nop
 800a8bc:	f3af 8000 	nop.w
	...
 800a8c8:	3fe921fb 	.word	0x3fe921fb
 800a8cc:	7fefffff 	.word	0x7fefffff

0800a8d0 <sqrtf>:
 800a8d0:	b508      	push	{r3, lr}
 800a8d2:	ed2d 8b02 	vpush	{d8}
 800a8d6:	eeb0 8a40 	vmov.f32	s16, s0
 800a8da:	f000 f907 	bl	800aaec <__ieee754_sqrtf>
 800a8de:	eeb4 8a48 	vcmp.f32	s16, s16
 800a8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e6:	d60c      	bvs.n	800a902 <sqrtf+0x32>
 800a8e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a908 <sqrtf+0x38>
 800a8ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f4:	d505      	bpl.n	800a902 <sqrtf+0x32>
 800a8f6:	f7fd ff33 	bl	8008760 <__errno>
 800a8fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a8fe:	2321      	movs	r3, #33	; 0x21
 800a900:	6003      	str	r3, [r0, #0]
 800a902:	ecbd 8b02 	vpop	{d8}
 800a906:	bd08      	pop	{r3, pc}
 800a908:	00000000 	.word	0x00000000

0800a90c <finite>:
 800a90c:	b082      	sub	sp, #8
 800a90e:	ed8d 0b00 	vstr	d0, [sp]
 800a912:	9801      	ldr	r0, [sp, #4]
 800a914:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a918:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a91c:	0fc0      	lsrs	r0, r0, #31
 800a91e:	b002      	add	sp, #8
 800a920:	4770      	bx	lr
 800a922:	0000      	movs	r0, r0
 800a924:	0000      	movs	r0, r0
	...

0800a928 <nan>:
 800a928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a930 <nan+0x8>
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	00000000 	.word	0x00000000
 800a934:	7ff80000 	.word	0x7ff80000

0800a938 <__ieee754_sqrt>:
 800a938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a93c:	ec55 4b10 	vmov	r4, r5, d0
 800a940:	4e67      	ldr	r6, [pc, #412]	; (800aae0 <__ieee754_sqrt+0x1a8>)
 800a942:	43ae      	bics	r6, r5
 800a944:	ee10 0a10 	vmov	r0, s0
 800a948:	ee10 2a10 	vmov	r2, s0
 800a94c:	4629      	mov	r1, r5
 800a94e:	462b      	mov	r3, r5
 800a950:	d10d      	bne.n	800a96e <__ieee754_sqrt+0x36>
 800a952:	f7f5 fe51 	bl	80005f8 <__aeabi_dmul>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	4620      	mov	r0, r4
 800a95c:	4629      	mov	r1, r5
 800a95e:	f7f5 fc95 	bl	800028c <__adddf3>
 800a962:	4604      	mov	r4, r0
 800a964:	460d      	mov	r5, r1
 800a966:	ec45 4b10 	vmov	d0, r4, r5
 800a96a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96e:	2d00      	cmp	r5, #0
 800a970:	dc0b      	bgt.n	800a98a <__ieee754_sqrt+0x52>
 800a972:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a976:	4326      	orrs	r6, r4
 800a978:	d0f5      	beq.n	800a966 <__ieee754_sqrt+0x2e>
 800a97a:	b135      	cbz	r5, 800a98a <__ieee754_sqrt+0x52>
 800a97c:	f7f5 fc84 	bl	8000288 <__aeabi_dsub>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	f7f5 ff62 	bl	800084c <__aeabi_ddiv>
 800a988:	e7eb      	b.n	800a962 <__ieee754_sqrt+0x2a>
 800a98a:	1509      	asrs	r1, r1, #20
 800a98c:	f000 808d 	beq.w	800aaaa <__ieee754_sqrt+0x172>
 800a990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a994:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a99c:	07c9      	lsls	r1, r1, #31
 800a99e:	bf5c      	itt	pl
 800a9a0:	005b      	lslpl	r3, r3, #1
 800a9a2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a9a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a9aa:	bf58      	it	pl
 800a9ac:	0052      	lslpl	r2, r2, #1
 800a9ae:	2500      	movs	r5, #0
 800a9b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a9b4:	1076      	asrs	r6, r6, #1
 800a9b6:	0052      	lsls	r2, r2, #1
 800a9b8:	f04f 0e16 	mov.w	lr, #22
 800a9bc:	46ac      	mov	ip, r5
 800a9be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9c2:	eb0c 0001 	add.w	r0, ip, r1
 800a9c6:	4298      	cmp	r0, r3
 800a9c8:	bfde      	ittt	le
 800a9ca:	1a1b      	suble	r3, r3, r0
 800a9cc:	eb00 0c01 	addle.w	ip, r0, r1
 800a9d0:	186d      	addle	r5, r5, r1
 800a9d2:	005b      	lsls	r3, r3, #1
 800a9d4:	f1be 0e01 	subs.w	lr, lr, #1
 800a9d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a9dc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a9e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a9e4:	d1ed      	bne.n	800a9c2 <__ieee754_sqrt+0x8a>
 800a9e6:	4674      	mov	r4, lr
 800a9e8:	2720      	movs	r7, #32
 800a9ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a9ee:	4563      	cmp	r3, ip
 800a9f0:	eb01 000e 	add.w	r0, r1, lr
 800a9f4:	dc02      	bgt.n	800a9fc <__ieee754_sqrt+0xc4>
 800a9f6:	d113      	bne.n	800aa20 <__ieee754_sqrt+0xe8>
 800a9f8:	4290      	cmp	r0, r2
 800a9fa:	d811      	bhi.n	800aa20 <__ieee754_sqrt+0xe8>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	eb00 0e01 	add.w	lr, r0, r1
 800aa02:	da57      	bge.n	800aab4 <__ieee754_sqrt+0x17c>
 800aa04:	f1be 0f00 	cmp.w	lr, #0
 800aa08:	db54      	blt.n	800aab4 <__ieee754_sqrt+0x17c>
 800aa0a:	f10c 0801 	add.w	r8, ip, #1
 800aa0e:	eba3 030c 	sub.w	r3, r3, ip
 800aa12:	4290      	cmp	r0, r2
 800aa14:	bf88      	it	hi
 800aa16:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800aa1a:	1a12      	subs	r2, r2, r0
 800aa1c:	440c      	add	r4, r1
 800aa1e:	46c4      	mov	ip, r8
 800aa20:	005b      	lsls	r3, r3, #1
 800aa22:	3f01      	subs	r7, #1
 800aa24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800aa28:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aa2c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800aa30:	d1dd      	bne.n	800a9ee <__ieee754_sqrt+0xb6>
 800aa32:	4313      	orrs	r3, r2
 800aa34:	d01b      	beq.n	800aa6e <__ieee754_sqrt+0x136>
 800aa36:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800aae4 <__ieee754_sqrt+0x1ac>
 800aa3a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800aae8 <__ieee754_sqrt+0x1b0>
 800aa3e:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa42:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa46:	f7f5 fc1f 	bl	8000288 <__aeabi_dsub>
 800aa4a:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4640      	mov	r0, r8
 800aa54:	4649      	mov	r1, r9
 800aa56:	f7f6 f84b 	bl	8000af0 <__aeabi_dcmple>
 800aa5a:	b140      	cbz	r0, 800aa6e <__ieee754_sqrt+0x136>
 800aa5c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800aa60:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa64:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa68:	d126      	bne.n	800aab8 <__ieee754_sqrt+0x180>
 800aa6a:	3501      	adds	r5, #1
 800aa6c:	463c      	mov	r4, r7
 800aa6e:	106a      	asrs	r2, r5, #1
 800aa70:	0863      	lsrs	r3, r4, #1
 800aa72:	07e9      	lsls	r1, r5, #31
 800aa74:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aa78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aa7c:	bf48      	it	mi
 800aa7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aa82:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800aa86:	461c      	mov	r4, r3
 800aa88:	e76d      	b.n	800a966 <__ieee754_sqrt+0x2e>
 800aa8a:	0ad3      	lsrs	r3, r2, #11
 800aa8c:	3815      	subs	r0, #21
 800aa8e:	0552      	lsls	r2, r2, #21
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0fa      	beq.n	800aa8a <__ieee754_sqrt+0x152>
 800aa94:	02dc      	lsls	r4, r3, #11
 800aa96:	d50a      	bpl.n	800aaae <__ieee754_sqrt+0x176>
 800aa98:	f1c1 0420 	rsb	r4, r1, #32
 800aa9c:	fa22 f404 	lsr.w	r4, r2, r4
 800aaa0:	1e4d      	subs	r5, r1, #1
 800aaa2:	408a      	lsls	r2, r1
 800aaa4:	4323      	orrs	r3, r4
 800aaa6:	1b41      	subs	r1, r0, r5
 800aaa8:	e772      	b.n	800a990 <__ieee754_sqrt+0x58>
 800aaaa:	4608      	mov	r0, r1
 800aaac:	e7f0      	b.n	800aa90 <__ieee754_sqrt+0x158>
 800aaae:	005b      	lsls	r3, r3, #1
 800aab0:	3101      	adds	r1, #1
 800aab2:	e7ef      	b.n	800aa94 <__ieee754_sqrt+0x15c>
 800aab4:	46e0      	mov	r8, ip
 800aab6:	e7aa      	b.n	800aa0e <__ieee754_sqrt+0xd6>
 800aab8:	f7f5 fbe8 	bl	800028c <__adddf3>
 800aabc:	e9da 8900 	ldrd	r8, r9, [sl]
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4640      	mov	r0, r8
 800aac6:	4649      	mov	r1, r9
 800aac8:	f7f6 f808 	bl	8000adc <__aeabi_dcmplt>
 800aacc:	b120      	cbz	r0, 800aad8 <__ieee754_sqrt+0x1a0>
 800aace:	1ca0      	adds	r0, r4, #2
 800aad0:	bf08      	it	eq
 800aad2:	3501      	addeq	r5, #1
 800aad4:	3402      	adds	r4, #2
 800aad6:	e7ca      	b.n	800aa6e <__ieee754_sqrt+0x136>
 800aad8:	3401      	adds	r4, #1
 800aada:	f024 0401 	bic.w	r4, r4, #1
 800aade:	e7c6      	b.n	800aa6e <__ieee754_sqrt+0x136>
 800aae0:	7ff00000 	.word	0x7ff00000
 800aae4:	20000210 	.word	0x20000210
 800aae8:	20000218 	.word	0x20000218

0800aaec <__ieee754_sqrtf>:
 800aaec:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800aaf0:	4770      	bx	lr
 800aaf2:	0000      	movs	r0, r0
 800aaf4:	0000      	movs	r0, r0
	...

0800aaf8 <__kernel_cos>:
 800aaf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	ec57 6b10 	vmov	r6, r7, d0
 800ab00:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ab04:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ab08:	ed8d 1b00 	vstr	d1, [sp]
 800ab0c:	da07      	bge.n	800ab1e <__kernel_cos+0x26>
 800ab0e:	ee10 0a10 	vmov	r0, s0
 800ab12:	4639      	mov	r1, r7
 800ab14:	f7f6 f820 	bl	8000b58 <__aeabi_d2iz>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	f000 8088 	beq.w	800ac2e <__kernel_cos+0x136>
 800ab1e:	4632      	mov	r2, r6
 800ab20:	463b      	mov	r3, r7
 800ab22:	4630      	mov	r0, r6
 800ab24:	4639      	mov	r1, r7
 800ab26:	f7f5 fd67 	bl	80005f8 <__aeabi_dmul>
 800ab2a:	4b51      	ldr	r3, [pc, #324]	; (800ac70 <__kernel_cos+0x178>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4604      	mov	r4, r0
 800ab30:	460d      	mov	r5, r1
 800ab32:	f7f5 fd61 	bl	80005f8 <__aeabi_dmul>
 800ab36:	a340      	add	r3, pc, #256	; (adr r3, 800ac38 <__kernel_cos+0x140>)
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	4682      	mov	sl, r0
 800ab3e:	468b      	mov	fp, r1
 800ab40:	4620      	mov	r0, r4
 800ab42:	4629      	mov	r1, r5
 800ab44:	f7f5 fd58 	bl	80005f8 <__aeabi_dmul>
 800ab48:	a33d      	add	r3, pc, #244	; (adr r3, 800ac40 <__kernel_cos+0x148>)
 800ab4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4e:	f7f5 fb9d 	bl	800028c <__adddf3>
 800ab52:	4622      	mov	r2, r4
 800ab54:	462b      	mov	r3, r5
 800ab56:	f7f5 fd4f 	bl	80005f8 <__aeabi_dmul>
 800ab5a:	a33b      	add	r3, pc, #236	; (adr r3, 800ac48 <__kernel_cos+0x150>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	f7f5 fb92 	bl	8000288 <__aeabi_dsub>
 800ab64:	4622      	mov	r2, r4
 800ab66:	462b      	mov	r3, r5
 800ab68:	f7f5 fd46 	bl	80005f8 <__aeabi_dmul>
 800ab6c:	a338      	add	r3, pc, #224	; (adr r3, 800ac50 <__kernel_cos+0x158>)
 800ab6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab72:	f7f5 fb8b 	bl	800028c <__adddf3>
 800ab76:	4622      	mov	r2, r4
 800ab78:	462b      	mov	r3, r5
 800ab7a:	f7f5 fd3d 	bl	80005f8 <__aeabi_dmul>
 800ab7e:	a336      	add	r3, pc, #216	; (adr r3, 800ac58 <__kernel_cos+0x160>)
 800ab80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab84:	f7f5 fb80 	bl	8000288 <__aeabi_dsub>
 800ab88:	4622      	mov	r2, r4
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	f7f5 fd34 	bl	80005f8 <__aeabi_dmul>
 800ab90:	a333      	add	r3, pc, #204	; (adr r3, 800ac60 <__kernel_cos+0x168>)
 800ab92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab96:	f7f5 fb79 	bl	800028c <__adddf3>
 800ab9a:	4622      	mov	r2, r4
 800ab9c:	462b      	mov	r3, r5
 800ab9e:	f7f5 fd2b 	bl	80005f8 <__aeabi_dmul>
 800aba2:	4622      	mov	r2, r4
 800aba4:	462b      	mov	r3, r5
 800aba6:	f7f5 fd27 	bl	80005f8 <__aeabi_dmul>
 800abaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abae:	4604      	mov	r4, r0
 800abb0:	460d      	mov	r5, r1
 800abb2:	4630      	mov	r0, r6
 800abb4:	4639      	mov	r1, r7
 800abb6:	f7f5 fd1f 	bl	80005f8 <__aeabi_dmul>
 800abba:	460b      	mov	r3, r1
 800abbc:	4602      	mov	r2, r0
 800abbe:	4629      	mov	r1, r5
 800abc0:	4620      	mov	r0, r4
 800abc2:	f7f5 fb61 	bl	8000288 <__aeabi_dsub>
 800abc6:	4b2b      	ldr	r3, [pc, #172]	; (800ac74 <__kernel_cos+0x17c>)
 800abc8:	4598      	cmp	r8, r3
 800abca:	4606      	mov	r6, r0
 800abcc:	460f      	mov	r7, r1
 800abce:	dc10      	bgt.n	800abf2 <__kernel_cos+0xfa>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4650      	mov	r0, sl
 800abd6:	4659      	mov	r1, fp
 800abd8:	f7f5 fb56 	bl	8000288 <__aeabi_dsub>
 800abdc:	460b      	mov	r3, r1
 800abde:	4926      	ldr	r1, [pc, #152]	; (800ac78 <__kernel_cos+0x180>)
 800abe0:	4602      	mov	r2, r0
 800abe2:	2000      	movs	r0, #0
 800abe4:	f7f5 fb50 	bl	8000288 <__aeabi_dsub>
 800abe8:	ec41 0b10 	vmov	d0, r0, r1
 800abec:	b003      	add	sp, #12
 800abee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf2:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <__kernel_cos+0x184>)
 800abf4:	4920      	ldr	r1, [pc, #128]	; (800ac78 <__kernel_cos+0x180>)
 800abf6:	4598      	cmp	r8, r3
 800abf8:	bfcc      	ite	gt
 800abfa:	4d21      	ldrgt	r5, [pc, #132]	; (800ac80 <__kernel_cos+0x188>)
 800abfc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ac00:	2400      	movs	r4, #0
 800ac02:	4622      	mov	r2, r4
 800ac04:	462b      	mov	r3, r5
 800ac06:	2000      	movs	r0, #0
 800ac08:	f7f5 fb3e 	bl	8000288 <__aeabi_dsub>
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	4680      	mov	r8, r0
 800ac10:	4689      	mov	r9, r1
 800ac12:	462b      	mov	r3, r5
 800ac14:	4650      	mov	r0, sl
 800ac16:	4659      	mov	r1, fp
 800ac18:	f7f5 fb36 	bl	8000288 <__aeabi_dsub>
 800ac1c:	4632      	mov	r2, r6
 800ac1e:	463b      	mov	r3, r7
 800ac20:	f7f5 fb32 	bl	8000288 <__aeabi_dsub>
 800ac24:	4602      	mov	r2, r0
 800ac26:	460b      	mov	r3, r1
 800ac28:	4640      	mov	r0, r8
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	e7da      	b.n	800abe4 <__kernel_cos+0xec>
 800ac2e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ac68 <__kernel_cos+0x170>
 800ac32:	e7db      	b.n	800abec <__kernel_cos+0xf4>
 800ac34:	f3af 8000 	nop.w
 800ac38:	be8838d4 	.word	0xbe8838d4
 800ac3c:	bda8fae9 	.word	0xbda8fae9
 800ac40:	bdb4b1c4 	.word	0xbdb4b1c4
 800ac44:	3e21ee9e 	.word	0x3e21ee9e
 800ac48:	809c52ad 	.word	0x809c52ad
 800ac4c:	3e927e4f 	.word	0x3e927e4f
 800ac50:	19cb1590 	.word	0x19cb1590
 800ac54:	3efa01a0 	.word	0x3efa01a0
 800ac58:	16c15177 	.word	0x16c15177
 800ac5c:	3f56c16c 	.word	0x3f56c16c
 800ac60:	5555554c 	.word	0x5555554c
 800ac64:	3fa55555 	.word	0x3fa55555
 800ac68:	00000000 	.word	0x00000000
 800ac6c:	3ff00000 	.word	0x3ff00000
 800ac70:	3fe00000 	.word	0x3fe00000
 800ac74:	3fd33332 	.word	0x3fd33332
 800ac78:	3ff00000 	.word	0x3ff00000
 800ac7c:	3fe90000 	.word	0x3fe90000
 800ac80:	3fd20000 	.word	0x3fd20000
 800ac84:	00000000 	.word	0x00000000

0800ac88 <__kernel_sin>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	ed2d 8b04 	vpush	{d8-d9}
 800ac90:	eeb0 8a41 	vmov.f32	s16, s2
 800ac94:	eef0 8a61 	vmov.f32	s17, s3
 800ac98:	ec55 4b10 	vmov	r4, r5, d0
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aca2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aca6:	9001      	str	r0, [sp, #4]
 800aca8:	da06      	bge.n	800acb8 <__kernel_sin+0x30>
 800acaa:	ee10 0a10 	vmov	r0, s0
 800acae:	4629      	mov	r1, r5
 800acb0:	f7f5 ff52 	bl	8000b58 <__aeabi_d2iz>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d051      	beq.n	800ad5c <__kernel_sin+0xd4>
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	4620      	mov	r0, r4
 800acbe:	4629      	mov	r1, r5
 800acc0:	f7f5 fc9a 	bl	80005f8 <__aeabi_dmul>
 800acc4:	4682      	mov	sl, r0
 800acc6:	468b      	mov	fp, r1
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	4620      	mov	r0, r4
 800acce:	4629      	mov	r1, r5
 800acd0:	f7f5 fc92 	bl	80005f8 <__aeabi_dmul>
 800acd4:	a341      	add	r3, pc, #260	; (adr r3, 800addc <__kernel_sin+0x154>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	4680      	mov	r8, r0
 800acdc:	4689      	mov	r9, r1
 800acde:	4650      	mov	r0, sl
 800ace0:	4659      	mov	r1, fp
 800ace2:	f7f5 fc89 	bl	80005f8 <__aeabi_dmul>
 800ace6:	a33f      	add	r3, pc, #252	; (adr r3, 800ade4 <__kernel_sin+0x15c>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 facc 	bl	8000288 <__aeabi_dsub>
 800acf0:	4652      	mov	r2, sl
 800acf2:	465b      	mov	r3, fp
 800acf4:	f7f5 fc80 	bl	80005f8 <__aeabi_dmul>
 800acf8:	a33c      	add	r3, pc, #240	; (adr r3, 800adec <__kernel_sin+0x164>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	f7f5 fac5 	bl	800028c <__adddf3>
 800ad02:	4652      	mov	r2, sl
 800ad04:	465b      	mov	r3, fp
 800ad06:	f7f5 fc77 	bl	80005f8 <__aeabi_dmul>
 800ad0a:	a33a      	add	r3, pc, #232	; (adr r3, 800adf4 <__kernel_sin+0x16c>)
 800ad0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad10:	f7f5 faba 	bl	8000288 <__aeabi_dsub>
 800ad14:	4652      	mov	r2, sl
 800ad16:	465b      	mov	r3, fp
 800ad18:	f7f5 fc6e 	bl	80005f8 <__aeabi_dmul>
 800ad1c:	a337      	add	r3, pc, #220	; (adr r3, 800adfc <__kernel_sin+0x174>)
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	f7f5 fab3 	bl	800028c <__adddf3>
 800ad26:	9b01      	ldr	r3, [sp, #4]
 800ad28:	4606      	mov	r6, r0
 800ad2a:	460f      	mov	r7, r1
 800ad2c:	b9eb      	cbnz	r3, 800ad6a <__kernel_sin+0xe2>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	4650      	mov	r0, sl
 800ad34:	4659      	mov	r1, fp
 800ad36:	f7f5 fc5f 	bl	80005f8 <__aeabi_dmul>
 800ad3a:	a325      	add	r3, pc, #148	; (adr r3, 800add0 <__kernel_sin+0x148>)
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f7f5 faa2 	bl	8000288 <__aeabi_dsub>
 800ad44:	4642      	mov	r2, r8
 800ad46:	464b      	mov	r3, r9
 800ad48:	f7f5 fc56 	bl	80005f8 <__aeabi_dmul>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4620      	mov	r0, r4
 800ad52:	4629      	mov	r1, r5
 800ad54:	f7f5 fa9a 	bl	800028c <__adddf3>
 800ad58:	4604      	mov	r4, r0
 800ad5a:	460d      	mov	r5, r1
 800ad5c:	ec45 4b10 	vmov	d0, r4, r5
 800ad60:	b003      	add	sp, #12
 800ad62:	ecbd 8b04 	vpop	{d8-d9}
 800ad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6a:	4b1b      	ldr	r3, [pc, #108]	; (800add8 <__kernel_sin+0x150>)
 800ad6c:	ec51 0b18 	vmov	r0, r1, d8
 800ad70:	2200      	movs	r2, #0
 800ad72:	f7f5 fc41 	bl	80005f8 <__aeabi_dmul>
 800ad76:	4632      	mov	r2, r6
 800ad78:	ec41 0b19 	vmov	d9, r0, r1
 800ad7c:	463b      	mov	r3, r7
 800ad7e:	4640      	mov	r0, r8
 800ad80:	4649      	mov	r1, r9
 800ad82:	f7f5 fc39 	bl	80005f8 <__aeabi_dmul>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	ec51 0b19 	vmov	r0, r1, d9
 800ad8e:	f7f5 fa7b 	bl	8000288 <__aeabi_dsub>
 800ad92:	4652      	mov	r2, sl
 800ad94:	465b      	mov	r3, fp
 800ad96:	f7f5 fc2f 	bl	80005f8 <__aeabi_dmul>
 800ad9a:	ec53 2b18 	vmov	r2, r3, d8
 800ad9e:	f7f5 fa73 	bl	8000288 <__aeabi_dsub>
 800ada2:	a30b      	add	r3, pc, #44	; (adr r3, 800add0 <__kernel_sin+0x148>)
 800ada4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada8:	4606      	mov	r6, r0
 800adaa:	460f      	mov	r7, r1
 800adac:	4640      	mov	r0, r8
 800adae:	4649      	mov	r1, r9
 800adb0:	f7f5 fc22 	bl	80005f8 <__aeabi_dmul>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4630      	mov	r0, r6
 800adba:	4639      	mov	r1, r7
 800adbc:	f7f5 fa66 	bl	800028c <__adddf3>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4620      	mov	r0, r4
 800adc6:	4629      	mov	r1, r5
 800adc8:	f7f5 fa5e 	bl	8000288 <__aeabi_dsub>
 800adcc:	e7c4      	b.n	800ad58 <__kernel_sin+0xd0>
 800adce:	bf00      	nop
 800add0:	55555549 	.word	0x55555549
 800add4:	3fc55555 	.word	0x3fc55555
 800add8:	3fe00000 	.word	0x3fe00000
 800addc:	5acfd57c 	.word	0x5acfd57c
 800ade0:	3de5d93a 	.word	0x3de5d93a
 800ade4:	8a2b9ceb 	.word	0x8a2b9ceb
 800ade8:	3e5ae5e6 	.word	0x3e5ae5e6
 800adec:	57b1fe7d 	.word	0x57b1fe7d
 800adf0:	3ec71de3 	.word	0x3ec71de3
 800adf4:	19c161d5 	.word	0x19c161d5
 800adf8:	3f2a01a0 	.word	0x3f2a01a0
 800adfc:	1110f8a6 	.word	0x1110f8a6
 800ae00:	3f811111 	.word	0x3f811111
 800ae04:	00000000 	.word	0x00000000

0800ae08 <__ieee754_acos>:
 800ae08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0c:	ec55 4b10 	vmov	r4, r5, d0
 800ae10:	49b7      	ldr	r1, [pc, #732]	; (800b0f0 <__ieee754_acos+0x2e8>)
 800ae12:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae16:	428b      	cmp	r3, r1
 800ae18:	dd1b      	ble.n	800ae52 <__ieee754_acos+0x4a>
 800ae1a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800ae1e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ae22:	4323      	orrs	r3, r4
 800ae24:	d106      	bne.n	800ae34 <__ieee754_acos+0x2c>
 800ae26:	2d00      	cmp	r5, #0
 800ae28:	f300 8211 	bgt.w	800b24e <__ieee754_acos+0x446>
 800ae2c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 800b088 <__ieee754_acos+0x280>
 800ae30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae34:	ee10 2a10 	vmov	r2, s0
 800ae38:	462b      	mov	r3, r5
 800ae3a:	ee10 0a10 	vmov	r0, s0
 800ae3e:	4629      	mov	r1, r5
 800ae40:	f7f5 fa22 	bl	8000288 <__aeabi_dsub>
 800ae44:	4602      	mov	r2, r0
 800ae46:	460b      	mov	r3, r1
 800ae48:	f7f5 fd00 	bl	800084c <__aeabi_ddiv>
 800ae4c:	ec41 0b10 	vmov	d0, r0, r1
 800ae50:	e7ee      	b.n	800ae30 <__ieee754_acos+0x28>
 800ae52:	49a8      	ldr	r1, [pc, #672]	; (800b0f4 <__ieee754_acos+0x2ec>)
 800ae54:	428b      	cmp	r3, r1
 800ae56:	f300 8087 	bgt.w	800af68 <__ieee754_acos+0x160>
 800ae5a:	4aa7      	ldr	r2, [pc, #668]	; (800b0f8 <__ieee754_acos+0x2f0>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	f340 81f9 	ble.w	800b254 <__ieee754_acos+0x44c>
 800ae62:	ee10 2a10 	vmov	r2, s0
 800ae66:	ee10 0a10 	vmov	r0, s0
 800ae6a:	462b      	mov	r3, r5
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	f7f5 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ae72:	a387      	add	r3, pc, #540	; (adr r3, 800b090 <__ieee754_acos+0x288>)
 800ae74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae78:	4606      	mov	r6, r0
 800ae7a:	460f      	mov	r7, r1
 800ae7c:	f7f5 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ae80:	a385      	add	r3, pc, #532	; (adr r3, 800b098 <__ieee754_acos+0x290>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f7f5 fa01 	bl	800028c <__adddf3>
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	463b      	mov	r3, r7
 800ae8e:	f7f5 fbb3 	bl	80005f8 <__aeabi_dmul>
 800ae92:	a383      	add	r3, pc, #524	; (adr r3, 800b0a0 <__ieee754_acos+0x298>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f7f5 f9f6 	bl	8000288 <__aeabi_dsub>
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	463b      	mov	r3, r7
 800aea0:	f7f5 fbaa 	bl	80005f8 <__aeabi_dmul>
 800aea4:	a380      	add	r3, pc, #512	; (adr r3, 800b0a8 <__ieee754_acos+0x2a0>)
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	f7f5 f9ef 	bl	800028c <__adddf3>
 800aeae:	4632      	mov	r2, r6
 800aeb0:	463b      	mov	r3, r7
 800aeb2:	f7f5 fba1 	bl	80005f8 <__aeabi_dmul>
 800aeb6:	a37e      	add	r3, pc, #504	; (adr r3, 800b0b0 <__ieee754_acos+0x2a8>)
 800aeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aebc:	f7f5 f9e4 	bl	8000288 <__aeabi_dsub>
 800aec0:	4632      	mov	r2, r6
 800aec2:	463b      	mov	r3, r7
 800aec4:	f7f5 fb98 	bl	80005f8 <__aeabi_dmul>
 800aec8:	a37b      	add	r3, pc, #492	; (adr r3, 800b0b8 <__ieee754_acos+0x2b0>)
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f7f5 f9dd 	bl	800028c <__adddf3>
 800aed2:	4632      	mov	r2, r6
 800aed4:	463b      	mov	r3, r7
 800aed6:	f7f5 fb8f 	bl	80005f8 <__aeabi_dmul>
 800aeda:	a379      	add	r3, pc, #484	; (adr r3, 800b0c0 <__ieee754_acos+0x2b8>)
 800aedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee0:	4680      	mov	r8, r0
 800aee2:	4689      	mov	r9, r1
 800aee4:	4630      	mov	r0, r6
 800aee6:	4639      	mov	r1, r7
 800aee8:	f7f5 fb86 	bl	80005f8 <__aeabi_dmul>
 800aeec:	a376      	add	r3, pc, #472	; (adr r3, 800b0c8 <__ieee754_acos+0x2c0>)
 800aeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef2:	f7f5 f9c9 	bl	8000288 <__aeabi_dsub>
 800aef6:	4632      	mov	r2, r6
 800aef8:	463b      	mov	r3, r7
 800aefa:	f7f5 fb7d 	bl	80005f8 <__aeabi_dmul>
 800aefe:	a374      	add	r3, pc, #464	; (adr r3, 800b0d0 <__ieee754_acos+0x2c8>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f7f5 f9c2 	bl	800028c <__adddf3>
 800af08:	4632      	mov	r2, r6
 800af0a:	463b      	mov	r3, r7
 800af0c:	f7f5 fb74 	bl	80005f8 <__aeabi_dmul>
 800af10:	a371      	add	r3, pc, #452	; (adr r3, 800b0d8 <__ieee754_acos+0x2d0>)
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	f7f5 f9b7 	bl	8000288 <__aeabi_dsub>
 800af1a:	4632      	mov	r2, r6
 800af1c:	463b      	mov	r3, r7
 800af1e:	f7f5 fb6b 	bl	80005f8 <__aeabi_dmul>
 800af22:	4b76      	ldr	r3, [pc, #472]	; (800b0fc <__ieee754_acos+0x2f4>)
 800af24:	2200      	movs	r2, #0
 800af26:	f7f5 f9b1 	bl	800028c <__adddf3>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
 800af2e:	4640      	mov	r0, r8
 800af30:	4649      	mov	r1, r9
 800af32:	f7f5 fc8b 	bl	800084c <__aeabi_ddiv>
 800af36:	4622      	mov	r2, r4
 800af38:	462b      	mov	r3, r5
 800af3a:	f7f5 fb5d 	bl	80005f8 <__aeabi_dmul>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	a167      	add	r1, pc, #412	; (adr r1, 800b0e0 <__ieee754_acos+0x2d8>)
 800af44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af48:	f7f5 f99e 	bl	8000288 <__aeabi_dsub>
 800af4c:	4602      	mov	r2, r0
 800af4e:	460b      	mov	r3, r1
 800af50:	4620      	mov	r0, r4
 800af52:	4629      	mov	r1, r5
 800af54:	f7f5 f998 	bl	8000288 <__aeabi_dsub>
 800af58:	4602      	mov	r2, r0
 800af5a:	460b      	mov	r3, r1
 800af5c:	a162      	add	r1, pc, #392	; (adr r1, 800b0e8 <__ieee754_acos+0x2e0>)
 800af5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af62:	f7f5 f991 	bl	8000288 <__aeabi_dsub>
 800af66:	e771      	b.n	800ae4c <__ieee754_acos+0x44>
 800af68:	2d00      	cmp	r5, #0
 800af6a:	f280 80cb 	bge.w	800b104 <__ieee754_acos+0x2fc>
 800af6e:	ee10 0a10 	vmov	r0, s0
 800af72:	4b62      	ldr	r3, [pc, #392]	; (800b0fc <__ieee754_acos+0x2f4>)
 800af74:	2200      	movs	r2, #0
 800af76:	4629      	mov	r1, r5
 800af78:	f7f5 f988 	bl	800028c <__adddf3>
 800af7c:	4b60      	ldr	r3, [pc, #384]	; (800b100 <__ieee754_acos+0x2f8>)
 800af7e:	2200      	movs	r2, #0
 800af80:	f7f5 fb3a 	bl	80005f8 <__aeabi_dmul>
 800af84:	a342      	add	r3, pc, #264	; (adr r3, 800b090 <__ieee754_acos+0x288>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	4604      	mov	r4, r0
 800af8c:	460d      	mov	r5, r1
 800af8e:	f7f5 fb33 	bl	80005f8 <__aeabi_dmul>
 800af92:	a341      	add	r3, pc, #260	; (adr r3, 800b098 <__ieee754_acos+0x290>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f7f5 f978 	bl	800028c <__adddf3>
 800af9c:	4622      	mov	r2, r4
 800af9e:	462b      	mov	r3, r5
 800afa0:	f7f5 fb2a 	bl	80005f8 <__aeabi_dmul>
 800afa4:	a33e      	add	r3, pc, #248	; (adr r3, 800b0a0 <__ieee754_acos+0x298>)
 800afa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afaa:	f7f5 f96d 	bl	8000288 <__aeabi_dsub>
 800afae:	4622      	mov	r2, r4
 800afb0:	462b      	mov	r3, r5
 800afb2:	f7f5 fb21 	bl	80005f8 <__aeabi_dmul>
 800afb6:	a33c      	add	r3, pc, #240	; (adr r3, 800b0a8 <__ieee754_acos+0x2a0>)
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f7f5 f966 	bl	800028c <__adddf3>
 800afc0:	4622      	mov	r2, r4
 800afc2:	462b      	mov	r3, r5
 800afc4:	f7f5 fb18 	bl	80005f8 <__aeabi_dmul>
 800afc8:	a339      	add	r3, pc, #228	; (adr r3, 800b0b0 <__ieee754_acos+0x2a8>)
 800afca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afce:	f7f5 f95b 	bl	8000288 <__aeabi_dsub>
 800afd2:	4622      	mov	r2, r4
 800afd4:	462b      	mov	r3, r5
 800afd6:	f7f5 fb0f 	bl	80005f8 <__aeabi_dmul>
 800afda:	a337      	add	r3, pc, #220	; (adr r3, 800b0b8 <__ieee754_acos+0x2b0>)
 800afdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe0:	f7f5 f954 	bl	800028c <__adddf3>
 800afe4:	4622      	mov	r2, r4
 800afe6:	462b      	mov	r3, r5
 800afe8:	f7f5 fb06 	bl	80005f8 <__aeabi_dmul>
 800afec:	ec45 4b10 	vmov	d0, r4, r5
 800aff0:	4680      	mov	r8, r0
 800aff2:	4689      	mov	r9, r1
 800aff4:	f7ff fca0 	bl	800a938 <__ieee754_sqrt>
 800aff8:	a331      	add	r3, pc, #196	; (adr r3, 800b0c0 <__ieee754_acos+0x2b8>)
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	ec57 6b10 	vmov	r6, r7, d0
 800b006:	f7f5 faf7 	bl	80005f8 <__aeabi_dmul>
 800b00a:	a32f      	add	r3, pc, #188	; (adr r3, 800b0c8 <__ieee754_acos+0x2c0>)
 800b00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b010:	f7f5 f93a 	bl	8000288 <__aeabi_dsub>
 800b014:	4622      	mov	r2, r4
 800b016:	462b      	mov	r3, r5
 800b018:	f7f5 faee 	bl	80005f8 <__aeabi_dmul>
 800b01c:	a32c      	add	r3, pc, #176	; (adr r3, 800b0d0 <__ieee754_acos+0x2c8>)
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	f7f5 f933 	bl	800028c <__adddf3>
 800b026:	4622      	mov	r2, r4
 800b028:	462b      	mov	r3, r5
 800b02a:	f7f5 fae5 	bl	80005f8 <__aeabi_dmul>
 800b02e:	a32a      	add	r3, pc, #168	; (adr r3, 800b0d8 <__ieee754_acos+0x2d0>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f7f5 f928 	bl	8000288 <__aeabi_dsub>
 800b038:	4622      	mov	r2, r4
 800b03a:	462b      	mov	r3, r5
 800b03c:	f7f5 fadc 	bl	80005f8 <__aeabi_dmul>
 800b040:	4b2e      	ldr	r3, [pc, #184]	; (800b0fc <__ieee754_acos+0x2f4>)
 800b042:	2200      	movs	r2, #0
 800b044:	f7f5 f922 	bl	800028c <__adddf3>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	4640      	mov	r0, r8
 800b04e:	4649      	mov	r1, r9
 800b050:	f7f5 fbfc 	bl	800084c <__aeabi_ddiv>
 800b054:	4632      	mov	r2, r6
 800b056:	463b      	mov	r3, r7
 800b058:	f7f5 face 	bl	80005f8 <__aeabi_dmul>
 800b05c:	a320      	add	r3, pc, #128	; (adr r3, 800b0e0 <__ieee754_acos+0x2d8>)
 800b05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b062:	f7f5 f911 	bl	8000288 <__aeabi_dsub>
 800b066:	4632      	mov	r2, r6
 800b068:	463b      	mov	r3, r7
 800b06a:	f7f5 f90f 	bl	800028c <__adddf3>
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	f7f5 f90b 	bl	800028c <__adddf3>
 800b076:	4602      	mov	r2, r0
 800b078:	460b      	mov	r3, r1
 800b07a:	a103      	add	r1, pc, #12	; (adr r1, 800b088 <__ieee754_acos+0x280>)
 800b07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b080:	e76f      	b.n	800af62 <__ieee754_acos+0x15a>
 800b082:	bf00      	nop
 800b084:	f3af 8000 	nop.w
 800b088:	54442d18 	.word	0x54442d18
 800b08c:	400921fb 	.word	0x400921fb
 800b090:	0dfdf709 	.word	0x0dfdf709
 800b094:	3f023de1 	.word	0x3f023de1
 800b098:	7501b288 	.word	0x7501b288
 800b09c:	3f49efe0 	.word	0x3f49efe0
 800b0a0:	b5688f3b 	.word	0xb5688f3b
 800b0a4:	3fa48228 	.word	0x3fa48228
 800b0a8:	0e884455 	.word	0x0e884455
 800b0ac:	3fc9c155 	.word	0x3fc9c155
 800b0b0:	03eb6f7d 	.word	0x03eb6f7d
 800b0b4:	3fd4d612 	.word	0x3fd4d612
 800b0b8:	55555555 	.word	0x55555555
 800b0bc:	3fc55555 	.word	0x3fc55555
 800b0c0:	b12e9282 	.word	0xb12e9282
 800b0c4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b0c8:	1b8d0159 	.word	0x1b8d0159
 800b0cc:	3fe6066c 	.word	0x3fe6066c
 800b0d0:	9c598ac8 	.word	0x9c598ac8
 800b0d4:	40002ae5 	.word	0x40002ae5
 800b0d8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b0dc:	40033a27 	.word	0x40033a27
 800b0e0:	33145c07 	.word	0x33145c07
 800b0e4:	3c91a626 	.word	0x3c91a626
 800b0e8:	54442d18 	.word	0x54442d18
 800b0ec:	3ff921fb 	.word	0x3ff921fb
 800b0f0:	3fefffff 	.word	0x3fefffff
 800b0f4:	3fdfffff 	.word	0x3fdfffff
 800b0f8:	3c600000 	.word	0x3c600000
 800b0fc:	3ff00000 	.word	0x3ff00000
 800b100:	3fe00000 	.word	0x3fe00000
 800b104:	ee10 2a10 	vmov	r2, s0
 800b108:	462b      	mov	r3, r5
 800b10a:	496d      	ldr	r1, [pc, #436]	; (800b2c0 <__ieee754_acos+0x4b8>)
 800b10c:	2000      	movs	r0, #0
 800b10e:	f7f5 f8bb 	bl	8000288 <__aeabi_dsub>
 800b112:	4b6c      	ldr	r3, [pc, #432]	; (800b2c4 <__ieee754_acos+0x4bc>)
 800b114:	2200      	movs	r2, #0
 800b116:	f7f5 fa6f 	bl	80005f8 <__aeabi_dmul>
 800b11a:	4604      	mov	r4, r0
 800b11c:	460d      	mov	r5, r1
 800b11e:	ec45 4b10 	vmov	d0, r4, r5
 800b122:	f7ff fc09 	bl	800a938 <__ieee754_sqrt>
 800b126:	a34e      	add	r3, pc, #312	; (adr r3, 800b260 <__ieee754_acos+0x458>)
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	4620      	mov	r0, r4
 800b12e:	4629      	mov	r1, r5
 800b130:	ec59 8b10 	vmov	r8, r9, d0
 800b134:	f7f5 fa60 	bl	80005f8 <__aeabi_dmul>
 800b138:	a34b      	add	r3, pc, #300	; (adr r3, 800b268 <__ieee754_acos+0x460>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 f8a5 	bl	800028c <__adddf3>
 800b142:	4622      	mov	r2, r4
 800b144:	462b      	mov	r3, r5
 800b146:	f7f5 fa57 	bl	80005f8 <__aeabi_dmul>
 800b14a:	a349      	add	r3, pc, #292	; (adr r3, 800b270 <__ieee754_acos+0x468>)
 800b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b150:	f7f5 f89a 	bl	8000288 <__aeabi_dsub>
 800b154:	4622      	mov	r2, r4
 800b156:	462b      	mov	r3, r5
 800b158:	f7f5 fa4e 	bl	80005f8 <__aeabi_dmul>
 800b15c:	a346      	add	r3, pc, #280	; (adr r3, 800b278 <__ieee754_acos+0x470>)
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	f7f5 f893 	bl	800028c <__adddf3>
 800b166:	4622      	mov	r2, r4
 800b168:	462b      	mov	r3, r5
 800b16a:	f7f5 fa45 	bl	80005f8 <__aeabi_dmul>
 800b16e:	a344      	add	r3, pc, #272	; (adr r3, 800b280 <__ieee754_acos+0x478>)
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f7f5 f888 	bl	8000288 <__aeabi_dsub>
 800b178:	4622      	mov	r2, r4
 800b17a:	462b      	mov	r3, r5
 800b17c:	f7f5 fa3c 	bl	80005f8 <__aeabi_dmul>
 800b180:	a341      	add	r3, pc, #260	; (adr r3, 800b288 <__ieee754_acos+0x480>)
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	f7f5 f881 	bl	800028c <__adddf3>
 800b18a:	4622      	mov	r2, r4
 800b18c:	462b      	mov	r3, r5
 800b18e:	f7f5 fa33 	bl	80005f8 <__aeabi_dmul>
 800b192:	a33f      	add	r3, pc, #252	; (adr r3, 800b290 <__ieee754_acos+0x488>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	4682      	mov	sl, r0
 800b19a:	468b      	mov	fp, r1
 800b19c:	4620      	mov	r0, r4
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7f5 fa2a 	bl	80005f8 <__aeabi_dmul>
 800b1a4:	a33c      	add	r3, pc, #240	; (adr r3, 800b298 <__ieee754_acos+0x490>)
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	f7f5 f86d 	bl	8000288 <__aeabi_dsub>
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	462b      	mov	r3, r5
 800b1b2:	f7f5 fa21 	bl	80005f8 <__aeabi_dmul>
 800b1b6:	a33a      	add	r3, pc, #232	; (adr r3, 800b2a0 <__ieee754_acos+0x498>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	f7f5 f866 	bl	800028c <__adddf3>
 800b1c0:	4622      	mov	r2, r4
 800b1c2:	462b      	mov	r3, r5
 800b1c4:	f7f5 fa18 	bl	80005f8 <__aeabi_dmul>
 800b1c8:	a337      	add	r3, pc, #220	; (adr r3, 800b2a8 <__ieee754_acos+0x4a0>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f7f5 f85b 	bl	8000288 <__aeabi_dsub>
 800b1d2:	4622      	mov	r2, r4
 800b1d4:	462b      	mov	r3, r5
 800b1d6:	f7f5 fa0f 	bl	80005f8 <__aeabi_dmul>
 800b1da:	4b39      	ldr	r3, [pc, #228]	; (800b2c0 <__ieee754_acos+0x4b8>)
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f7f5 f855 	bl	800028c <__adddf3>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	4659      	mov	r1, fp
 800b1ea:	f7f5 fb2f 	bl	800084c <__aeabi_ddiv>
 800b1ee:	4642      	mov	r2, r8
 800b1f0:	464b      	mov	r3, r9
 800b1f2:	f7f5 fa01 	bl	80005f8 <__aeabi_dmul>
 800b1f6:	2600      	movs	r6, #0
 800b1f8:	4682      	mov	sl, r0
 800b1fa:	468b      	mov	fp, r1
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	464b      	mov	r3, r9
 800b200:	4630      	mov	r0, r6
 800b202:	4649      	mov	r1, r9
 800b204:	f7f5 f9f8 	bl	80005f8 <__aeabi_dmul>
 800b208:	4602      	mov	r2, r0
 800b20a:	460b      	mov	r3, r1
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7f5 f83a 	bl	8000288 <__aeabi_dsub>
 800b214:	4632      	mov	r2, r6
 800b216:	4604      	mov	r4, r0
 800b218:	460d      	mov	r5, r1
 800b21a:	464b      	mov	r3, r9
 800b21c:	4640      	mov	r0, r8
 800b21e:	4649      	mov	r1, r9
 800b220:	f7f5 f834 	bl	800028c <__adddf3>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	4620      	mov	r0, r4
 800b22a:	4629      	mov	r1, r5
 800b22c:	f7f5 fb0e 	bl	800084c <__aeabi_ddiv>
 800b230:	4602      	mov	r2, r0
 800b232:	460b      	mov	r3, r1
 800b234:	4650      	mov	r0, sl
 800b236:	4659      	mov	r1, fp
 800b238:	f7f5 f828 	bl	800028c <__adddf3>
 800b23c:	4632      	mov	r2, r6
 800b23e:	464b      	mov	r3, r9
 800b240:	f7f5 f824 	bl	800028c <__adddf3>
 800b244:	4602      	mov	r2, r0
 800b246:	460b      	mov	r3, r1
 800b248:	f7f5 f820 	bl	800028c <__adddf3>
 800b24c:	e5fe      	b.n	800ae4c <__ieee754_acos+0x44>
 800b24e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800b2b0 <__ieee754_acos+0x4a8>
 800b252:	e5ed      	b.n	800ae30 <__ieee754_acos+0x28>
 800b254:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800b2b8 <__ieee754_acos+0x4b0>
 800b258:	e5ea      	b.n	800ae30 <__ieee754_acos+0x28>
 800b25a:	bf00      	nop
 800b25c:	f3af 8000 	nop.w
 800b260:	0dfdf709 	.word	0x0dfdf709
 800b264:	3f023de1 	.word	0x3f023de1
 800b268:	7501b288 	.word	0x7501b288
 800b26c:	3f49efe0 	.word	0x3f49efe0
 800b270:	b5688f3b 	.word	0xb5688f3b
 800b274:	3fa48228 	.word	0x3fa48228
 800b278:	0e884455 	.word	0x0e884455
 800b27c:	3fc9c155 	.word	0x3fc9c155
 800b280:	03eb6f7d 	.word	0x03eb6f7d
 800b284:	3fd4d612 	.word	0x3fd4d612
 800b288:	55555555 	.word	0x55555555
 800b28c:	3fc55555 	.word	0x3fc55555
 800b290:	b12e9282 	.word	0xb12e9282
 800b294:	3fb3b8c5 	.word	0x3fb3b8c5
 800b298:	1b8d0159 	.word	0x1b8d0159
 800b29c:	3fe6066c 	.word	0x3fe6066c
 800b2a0:	9c598ac8 	.word	0x9c598ac8
 800b2a4:	40002ae5 	.word	0x40002ae5
 800b2a8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b2ac:	40033a27 	.word	0x40033a27
	...
 800b2b8:	54442d18 	.word	0x54442d18
 800b2bc:	3ff921fb 	.word	0x3ff921fb
 800b2c0:	3ff00000 	.word	0x3ff00000
 800b2c4:	3fe00000 	.word	0x3fe00000

0800b2c8 <__ieee754_asin>:
 800b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2cc:	ed2d 8b04 	vpush	{d8-d9}
 800b2d0:	ec55 4b10 	vmov	r4, r5, d0
 800b2d4:	4bcc      	ldr	r3, [pc, #816]	; (800b608 <__ieee754_asin+0x340>)
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b2dc:	4598      	cmp	r8, r3
 800b2de:	9501      	str	r5, [sp, #4]
 800b2e0:	dd33      	ble.n	800b34a <__ieee754_asin+0x82>
 800b2e2:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800b2e6:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800b2ea:	ea58 0804 	orrs.w	r8, r8, r4
 800b2ee:	d117      	bne.n	800b320 <__ieee754_asin+0x58>
 800b2f0:	a3ab      	add	r3, pc, #684	; (adr r3, 800b5a0 <__ieee754_asin+0x2d8>)
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	ee10 0a10 	vmov	r0, s0
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	f7f5 f97c 	bl	80005f8 <__aeabi_dmul>
 800b300:	a3a9      	add	r3, pc, #676	; (adr r3, 800b5a8 <__ieee754_asin+0x2e0>)
 800b302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b306:	4606      	mov	r6, r0
 800b308:	460f      	mov	r7, r1
 800b30a:	4620      	mov	r0, r4
 800b30c:	4629      	mov	r1, r5
 800b30e:	f7f5 f973 	bl	80005f8 <__aeabi_dmul>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4630      	mov	r0, r6
 800b318:	4639      	mov	r1, r7
 800b31a:	f7f4 ffb7 	bl	800028c <__adddf3>
 800b31e:	e00b      	b.n	800b338 <__ieee754_asin+0x70>
 800b320:	ee10 2a10 	vmov	r2, s0
 800b324:	462b      	mov	r3, r5
 800b326:	ee10 0a10 	vmov	r0, s0
 800b32a:	4629      	mov	r1, r5
 800b32c:	f7f4 ffac 	bl	8000288 <__aeabi_dsub>
 800b330:	4602      	mov	r2, r0
 800b332:	460b      	mov	r3, r1
 800b334:	f7f5 fa8a 	bl	800084c <__aeabi_ddiv>
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	ec45 4b10 	vmov	d0, r4, r5
 800b340:	b003      	add	sp, #12
 800b342:	ecbd 8b04 	vpop	{d8-d9}
 800b346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34a:	4bb0      	ldr	r3, [pc, #704]	; (800b60c <__ieee754_asin+0x344>)
 800b34c:	4598      	cmp	r8, r3
 800b34e:	dc11      	bgt.n	800b374 <__ieee754_asin+0xac>
 800b350:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b354:	f280 80ae 	bge.w	800b4b4 <__ieee754_asin+0x1ec>
 800b358:	a395      	add	r3, pc, #596	; (adr r3, 800b5b0 <__ieee754_asin+0x2e8>)
 800b35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35e:	ee10 0a10 	vmov	r0, s0
 800b362:	4629      	mov	r1, r5
 800b364:	f7f4 ff92 	bl	800028c <__adddf3>
 800b368:	4ba9      	ldr	r3, [pc, #676]	; (800b610 <__ieee754_asin+0x348>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	f7f5 fbd4 	bl	8000b18 <__aeabi_dcmpgt>
 800b370:	2800      	cmp	r0, #0
 800b372:	d1e3      	bne.n	800b33c <__ieee754_asin+0x74>
 800b374:	ec45 4b10 	vmov	d0, r4, r5
 800b378:	f7ff fa46 	bl	800a808 <fabs>
 800b37c:	49a4      	ldr	r1, [pc, #656]	; (800b610 <__ieee754_asin+0x348>)
 800b37e:	ec53 2b10 	vmov	r2, r3, d0
 800b382:	2000      	movs	r0, #0
 800b384:	f7f4 ff80 	bl	8000288 <__aeabi_dsub>
 800b388:	4ba2      	ldr	r3, [pc, #648]	; (800b614 <__ieee754_asin+0x34c>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	f7f5 f934 	bl	80005f8 <__aeabi_dmul>
 800b390:	a389      	add	r3, pc, #548	; (adr r3, 800b5b8 <__ieee754_asin+0x2f0>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	4604      	mov	r4, r0
 800b398:	460d      	mov	r5, r1
 800b39a:	f7f5 f92d 	bl	80005f8 <__aeabi_dmul>
 800b39e:	a388      	add	r3, pc, #544	; (adr r3, 800b5c0 <__ieee754_asin+0x2f8>)
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	f7f4 ff72 	bl	800028c <__adddf3>
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	462b      	mov	r3, r5
 800b3ac:	f7f5 f924 	bl	80005f8 <__aeabi_dmul>
 800b3b0:	a385      	add	r3, pc, #532	; (adr r3, 800b5c8 <__ieee754_asin+0x300>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	f7f4 ff67 	bl	8000288 <__aeabi_dsub>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	462b      	mov	r3, r5
 800b3be:	f7f5 f91b 	bl	80005f8 <__aeabi_dmul>
 800b3c2:	a383      	add	r3, pc, #524	; (adr r3, 800b5d0 <__ieee754_asin+0x308>)
 800b3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c8:	f7f4 ff60 	bl	800028c <__adddf3>
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	462b      	mov	r3, r5
 800b3d0:	f7f5 f912 	bl	80005f8 <__aeabi_dmul>
 800b3d4:	a380      	add	r3, pc, #512	; (adr r3, 800b5d8 <__ieee754_asin+0x310>)
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	f7f4 ff55 	bl	8000288 <__aeabi_dsub>
 800b3de:	4622      	mov	r2, r4
 800b3e0:	462b      	mov	r3, r5
 800b3e2:	f7f5 f909 	bl	80005f8 <__aeabi_dmul>
 800b3e6:	a37e      	add	r3, pc, #504	; (adr r3, 800b5e0 <__ieee754_asin+0x318>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	f7f4 ff4e 	bl	800028c <__adddf3>
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	462b      	mov	r3, r5
 800b3f4:	f7f5 f900 	bl	80005f8 <__aeabi_dmul>
 800b3f8:	a37b      	add	r3, pc, #492	; (adr r3, 800b5e8 <__ieee754_asin+0x320>)
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	ec41 0b18 	vmov	d8, r0, r1
 800b402:	4620      	mov	r0, r4
 800b404:	4629      	mov	r1, r5
 800b406:	f7f5 f8f7 	bl	80005f8 <__aeabi_dmul>
 800b40a:	a379      	add	r3, pc, #484	; (adr r3, 800b5f0 <__ieee754_asin+0x328>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f7f4 ff3a 	bl	8000288 <__aeabi_dsub>
 800b414:	4622      	mov	r2, r4
 800b416:	462b      	mov	r3, r5
 800b418:	f7f5 f8ee 	bl	80005f8 <__aeabi_dmul>
 800b41c:	a376      	add	r3, pc, #472	; (adr r3, 800b5f8 <__ieee754_asin+0x330>)
 800b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b422:	f7f4 ff33 	bl	800028c <__adddf3>
 800b426:	4622      	mov	r2, r4
 800b428:	462b      	mov	r3, r5
 800b42a:	f7f5 f8e5 	bl	80005f8 <__aeabi_dmul>
 800b42e:	a374      	add	r3, pc, #464	; (adr r3, 800b600 <__ieee754_asin+0x338>)
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	f7f4 ff28 	bl	8000288 <__aeabi_dsub>
 800b438:	4622      	mov	r2, r4
 800b43a:	462b      	mov	r3, r5
 800b43c:	f7f5 f8dc 	bl	80005f8 <__aeabi_dmul>
 800b440:	4b73      	ldr	r3, [pc, #460]	; (800b610 <__ieee754_asin+0x348>)
 800b442:	2200      	movs	r2, #0
 800b444:	f7f4 ff22 	bl	800028c <__adddf3>
 800b448:	ec45 4b10 	vmov	d0, r4, r5
 800b44c:	4606      	mov	r6, r0
 800b44e:	460f      	mov	r7, r1
 800b450:	f7ff fa72 	bl	800a938 <__ieee754_sqrt>
 800b454:	4b70      	ldr	r3, [pc, #448]	; (800b618 <__ieee754_asin+0x350>)
 800b456:	4598      	cmp	r8, r3
 800b458:	ec5b ab10 	vmov	sl, fp, d0
 800b45c:	f340 80de 	ble.w	800b61c <__ieee754_asin+0x354>
 800b460:	4632      	mov	r2, r6
 800b462:	463b      	mov	r3, r7
 800b464:	ec51 0b18 	vmov	r0, r1, d8
 800b468:	f7f5 f9f0 	bl	800084c <__aeabi_ddiv>
 800b46c:	4652      	mov	r2, sl
 800b46e:	465b      	mov	r3, fp
 800b470:	f7f5 f8c2 	bl	80005f8 <__aeabi_dmul>
 800b474:	4652      	mov	r2, sl
 800b476:	465b      	mov	r3, fp
 800b478:	f7f4 ff08 	bl	800028c <__adddf3>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	f7f4 ff04 	bl	800028c <__adddf3>
 800b484:	a348      	add	r3, pc, #288	; (adr r3, 800b5a8 <__ieee754_asin+0x2e0>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	f7f4 fefd 	bl	8000288 <__aeabi_dsub>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	a143      	add	r1, pc, #268	; (adr r1, 800b5a0 <__ieee754_asin+0x2d8>)
 800b494:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b498:	f7f4 fef6 	bl	8000288 <__aeabi_dsub>
 800b49c:	9b01      	ldr	r3, [sp, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	bfdc      	itt	le
 800b4a2:	4602      	movle	r2, r0
 800b4a4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	460d      	mov	r5, r1
 800b4ac:	bfdc      	itt	le
 800b4ae:	4614      	movle	r4, r2
 800b4b0:	461d      	movle	r5, r3
 800b4b2:	e743      	b.n	800b33c <__ieee754_asin+0x74>
 800b4b4:	ee10 2a10 	vmov	r2, s0
 800b4b8:	ee10 0a10 	vmov	r0, s0
 800b4bc:	462b      	mov	r3, r5
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7f5 f89a 	bl	80005f8 <__aeabi_dmul>
 800b4c4:	a33c      	add	r3, pc, #240	; (adr r3, 800b5b8 <__ieee754_asin+0x2f0>)
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	4606      	mov	r6, r0
 800b4cc:	460f      	mov	r7, r1
 800b4ce:	f7f5 f893 	bl	80005f8 <__aeabi_dmul>
 800b4d2:	a33b      	add	r3, pc, #236	; (adr r3, 800b5c0 <__ieee754_asin+0x2f8>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	f7f4 fed8 	bl	800028c <__adddf3>
 800b4dc:	4632      	mov	r2, r6
 800b4de:	463b      	mov	r3, r7
 800b4e0:	f7f5 f88a 	bl	80005f8 <__aeabi_dmul>
 800b4e4:	a338      	add	r3, pc, #224	; (adr r3, 800b5c8 <__ieee754_asin+0x300>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	f7f4 fecd 	bl	8000288 <__aeabi_dsub>
 800b4ee:	4632      	mov	r2, r6
 800b4f0:	463b      	mov	r3, r7
 800b4f2:	f7f5 f881 	bl	80005f8 <__aeabi_dmul>
 800b4f6:	a336      	add	r3, pc, #216	; (adr r3, 800b5d0 <__ieee754_asin+0x308>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	f7f4 fec6 	bl	800028c <__adddf3>
 800b500:	4632      	mov	r2, r6
 800b502:	463b      	mov	r3, r7
 800b504:	f7f5 f878 	bl	80005f8 <__aeabi_dmul>
 800b508:	a333      	add	r3, pc, #204	; (adr r3, 800b5d8 <__ieee754_asin+0x310>)
 800b50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50e:	f7f4 febb 	bl	8000288 <__aeabi_dsub>
 800b512:	4632      	mov	r2, r6
 800b514:	463b      	mov	r3, r7
 800b516:	f7f5 f86f 	bl	80005f8 <__aeabi_dmul>
 800b51a:	a331      	add	r3, pc, #196	; (adr r3, 800b5e0 <__ieee754_asin+0x318>)
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f7f4 feb4 	bl	800028c <__adddf3>
 800b524:	4632      	mov	r2, r6
 800b526:	463b      	mov	r3, r7
 800b528:	f7f5 f866 	bl	80005f8 <__aeabi_dmul>
 800b52c:	a32e      	add	r3, pc, #184	; (adr r3, 800b5e8 <__ieee754_asin+0x320>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	4680      	mov	r8, r0
 800b534:	4689      	mov	r9, r1
 800b536:	4630      	mov	r0, r6
 800b538:	4639      	mov	r1, r7
 800b53a:	f7f5 f85d 	bl	80005f8 <__aeabi_dmul>
 800b53e:	a32c      	add	r3, pc, #176	; (adr r3, 800b5f0 <__ieee754_asin+0x328>)
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f7f4 fea0 	bl	8000288 <__aeabi_dsub>
 800b548:	4632      	mov	r2, r6
 800b54a:	463b      	mov	r3, r7
 800b54c:	f7f5 f854 	bl	80005f8 <__aeabi_dmul>
 800b550:	a329      	add	r3, pc, #164	; (adr r3, 800b5f8 <__ieee754_asin+0x330>)
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	f7f4 fe99 	bl	800028c <__adddf3>
 800b55a:	4632      	mov	r2, r6
 800b55c:	463b      	mov	r3, r7
 800b55e:	f7f5 f84b 	bl	80005f8 <__aeabi_dmul>
 800b562:	a327      	add	r3, pc, #156	; (adr r3, 800b600 <__ieee754_asin+0x338>)
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	f7f4 fe8e 	bl	8000288 <__aeabi_dsub>
 800b56c:	4632      	mov	r2, r6
 800b56e:	463b      	mov	r3, r7
 800b570:	f7f5 f842 	bl	80005f8 <__aeabi_dmul>
 800b574:	4b26      	ldr	r3, [pc, #152]	; (800b610 <__ieee754_asin+0x348>)
 800b576:	2200      	movs	r2, #0
 800b578:	f7f4 fe88 	bl	800028c <__adddf3>
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	4640      	mov	r0, r8
 800b582:	4649      	mov	r1, r9
 800b584:	f7f5 f962 	bl	800084c <__aeabi_ddiv>
 800b588:	4622      	mov	r2, r4
 800b58a:	462b      	mov	r3, r5
 800b58c:	f7f5 f834 	bl	80005f8 <__aeabi_dmul>
 800b590:	4602      	mov	r2, r0
 800b592:	460b      	mov	r3, r1
 800b594:	4620      	mov	r0, r4
 800b596:	4629      	mov	r1, r5
 800b598:	e6bf      	b.n	800b31a <__ieee754_asin+0x52>
 800b59a:	bf00      	nop
 800b59c:	f3af 8000 	nop.w
 800b5a0:	54442d18 	.word	0x54442d18
 800b5a4:	3ff921fb 	.word	0x3ff921fb
 800b5a8:	33145c07 	.word	0x33145c07
 800b5ac:	3c91a626 	.word	0x3c91a626
 800b5b0:	8800759c 	.word	0x8800759c
 800b5b4:	7e37e43c 	.word	0x7e37e43c
 800b5b8:	0dfdf709 	.word	0x0dfdf709
 800b5bc:	3f023de1 	.word	0x3f023de1
 800b5c0:	7501b288 	.word	0x7501b288
 800b5c4:	3f49efe0 	.word	0x3f49efe0
 800b5c8:	b5688f3b 	.word	0xb5688f3b
 800b5cc:	3fa48228 	.word	0x3fa48228
 800b5d0:	0e884455 	.word	0x0e884455
 800b5d4:	3fc9c155 	.word	0x3fc9c155
 800b5d8:	03eb6f7d 	.word	0x03eb6f7d
 800b5dc:	3fd4d612 	.word	0x3fd4d612
 800b5e0:	55555555 	.word	0x55555555
 800b5e4:	3fc55555 	.word	0x3fc55555
 800b5e8:	b12e9282 	.word	0xb12e9282
 800b5ec:	3fb3b8c5 	.word	0x3fb3b8c5
 800b5f0:	1b8d0159 	.word	0x1b8d0159
 800b5f4:	3fe6066c 	.word	0x3fe6066c
 800b5f8:	9c598ac8 	.word	0x9c598ac8
 800b5fc:	40002ae5 	.word	0x40002ae5
 800b600:	1c8a2d4b 	.word	0x1c8a2d4b
 800b604:	40033a27 	.word	0x40033a27
 800b608:	3fefffff 	.word	0x3fefffff
 800b60c:	3fdfffff 	.word	0x3fdfffff
 800b610:	3ff00000 	.word	0x3ff00000
 800b614:	3fe00000 	.word	0x3fe00000
 800b618:	3fef3332 	.word	0x3fef3332
 800b61c:	ee10 2a10 	vmov	r2, s0
 800b620:	ee10 0a10 	vmov	r0, s0
 800b624:	465b      	mov	r3, fp
 800b626:	4659      	mov	r1, fp
 800b628:	f7f4 fe30 	bl	800028c <__adddf3>
 800b62c:	4632      	mov	r2, r6
 800b62e:	463b      	mov	r3, r7
 800b630:	ec41 0b19 	vmov	d9, r0, r1
 800b634:	ec51 0b18 	vmov	r0, r1, d8
 800b638:	f7f5 f908 	bl	800084c <__aeabi_ddiv>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	ec51 0b19 	vmov	r0, r1, d9
 800b644:	f7f4 ffd8 	bl	80005f8 <__aeabi_dmul>
 800b648:	f04f 0800 	mov.w	r8, #0
 800b64c:	4606      	mov	r6, r0
 800b64e:	460f      	mov	r7, r1
 800b650:	4642      	mov	r2, r8
 800b652:	465b      	mov	r3, fp
 800b654:	4640      	mov	r0, r8
 800b656:	4659      	mov	r1, fp
 800b658:	f7f4 ffce 	bl	80005f8 <__aeabi_dmul>
 800b65c:	4602      	mov	r2, r0
 800b65e:	460b      	mov	r3, r1
 800b660:	4620      	mov	r0, r4
 800b662:	4629      	mov	r1, r5
 800b664:	f7f4 fe10 	bl	8000288 <__aeabi_dsub>
 800b668:	4642      	mov	r2, r8
 800b66a:	4604      	mov	r4, r0
 800b66c:	460d      	mov	r5, r1
 800b66e:	465b      	mov	r3, fp
 800b670:	4650      	mov	r0, sl
 800b672:	4659      	mov	r1, fp
 800b674:	f7f4 fe0a 	bl	800028c <__adddf3>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4620      	mov	r0, r4
 800b67e:	4629      	mov	r1, r5
 800b680:	f7f5 f8e4 	bl	800084c <__aeabi_ddiv>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	f7f4 fe00 	bl	800028c <__adddf3>
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	a113      	add	r1, pc, #76	; (adr r1, 800b6e0 <__ieee754_asin+0x418>)
 800b692:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b696:	f7f4 fdf7 	bl	8000288 <__aeabi_dsub>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	f7f4 fdf1 	bl	8000288 <__aeabi_dsub>
 800b6a6:	4642      	mov	r2, r8
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	465b      	mov	r3, fp
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	4659      	mov	r1, fp
 800b6b2:	f7f4 fdeb 	bl	800028c <__adddf3>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	a10b      	add	r1, pc, #44	; (adr r1, 800b6e8 <__ieee754_asin+0x420>)
 800b6bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6c0:	f7f4 fde2 	bl	8000288 <__aeabi_dsub>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f4 fddc 	bl	8000288 <__aeabi_dsub>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	a104      	add	r1, pc, #16	; (adr r1, 800b6e8 <__ieee754_asin+0x420>)
 800b6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6da:	e6dd      	b.n	800b498 <__ieee754_asin+0x1d0>
 800b6dc:	f3af 8000 	nop.w
 800b6e0:	33145c07 	.word	0x33145c07
 800b6e4:	3c91a626 	.word	0x3c91a626
 800b6e8:	54442d18 	.word	0x54442d18
 800b6ec:	3fe921fb 	.word	0x3fe921fb

0800b6f0 <__ieee754_pow>:
 800b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f4:	ed2d 8b06 	vpush	{d8-d10}
 800b6f8:	b089      	sub	sp, #36	; 0x24
 800b6fa:	ed8d 1b00 	vstr	d1, [sp]
 800b6fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b702:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b706:	ea58 0102 	orrs.w	r1, r8, r2
 800b70a:	ec57 6b10 	vmov	r6, r7, d0
 800b70e:	d115      	bne.n	800b73c <__ieee754_pow+0x4c>
 800b710:	19b3      	adds	r3, r6, r6
 800b712:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b716:	4152      	adcs	r2, r2
 800b718:	4299      	cmp	r1, r3
 800b71a:	4b89      	ldr	r3, [pc, #548]	; (800b940 <__ieee754_pow+0x250>)
 800b71c:	4193      	sbcs	r3, r2
 800b71e:	f080 84d1 	bcs.w	800c0c4 <__ieee754_pow+0x9d4>
 800b722:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b726:	4630      	mov	r0, r6
 800b728:	4639      	mov	r1, r7
 800b72a:	f7f4 fdaf 	bl	800028c <__adddf3>
 800b72e:	ec41 0b10 	vmov	d0, r0, r1
 800b732:	b009      	add	sp, #36	; 0x24
 800b734:	ecbd 8b06 	vpop	{d8-d10}
 800b738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73c:	4b81      	ldr	r3, [pc, #516]	; (800b944 <__ieee754_pow+0x254>)
 800b73e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b742:	429c      	cmp	r4, r3
 800b744:	ee10 aa10 	vmov	sl, s0
 800b748:	463d      	mov	r5, r7
 800b74a:	dc06      	bgt.n	800b75a <__ieee754_pow+0x6a>
 800b74c:	d101      	bne.n	800b752 <__ieee754_pow+0x62>
 800b74e:	2e00      	cmp	r6, #0
 800b750:	d1e7      	bne.n	800b722 <__ieee754_pow+0x32>
 800b752:	4598      	cmp	r8, r3
 800b754:	dc01      	bgt.n	800b75a <__ieee754_pow+0x6a>
 800b756:	d10f      	bne.n	800b778 <__ieee754_pow+0x88>
 800b758:	b172      	cbz	r2, 800b778 <__ieee754_pow+0x88>
 800b75a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b75e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b762:	ea55 050a 	orrs.w	r5, r5, sl
 800b766:	d1dc      	bne.n	800b722 <__ieee754_pow+0x32>
 800b768:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b76c:	18db      	adds	r3, r3, r3
 800b76e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b772:	4152      	adcs	r2, r2
 800b774:	429d      	cmp	r5, r3
 800b776:	e7d0      	b.n	800b71a <__ieee754_pow+0x2a>
 800b778:	2d00      	cmp	r5, #0
 800b77a:	da3b      	bge.n	800b7f4 <__ieee754_pow+0x104>
 800b77c:	4b72      	ldr	r3, [pc, #456]	; (800b948 <__ieee754_pow+0x258>)
 800b77e:	4598      	cmp	r8, r3
 800b780:	dc51      	bgt.n	800b826 <__ieee754_pow+0x136>
 800b782:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b786:	4598      	cmp	r8, r3
 800b788:	f340 84ab 	ble.w	800c0e2 <__ieee754_pow+0x9f2>
 800b78c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b790:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b794:	2b14      	cmp	r3, #20
 800b796:	dd0f      	ble.n	800b7b8 <__ieee754_pow+0xc8>
 800b798:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b79c:	fa22 f103 	lsr.w	r1, r2, r3
 800b7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	f040 849c 	bne.w	800c0e2 <__ieee754_pow+0x9f2>
 800b7aa:	f001 0101 	and.w	r1, r1, #1
 800b7ae:	f1c1 0302 	rsb	r3, r1, #2
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	b182      	cbz	r2, 800b7d8 <__ieee754_pow+0xe8>
 800b7b6:	e05f      	b.n	800b878 <__ieee754_pow+0x188>
 800b7b8:	2a00      	cmp	r2, #0
 800b7ba:	d15b      	bne.n	800b874 <__ieee754_pow+0x184>
 800b7bc:	f1c3 0314 	rsb	r3, r3, #20
 800b7c0:	fa48 f103 	asr.w	r1, r8, r3
 800b7c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b7c8:	4543      	cmp	r3, r8
 800b7ca:	f040 8487 	bne.w	800c0dc <__ieee754_pow+0x9ec>
 800b7ce:	f001 0101 	and.w	r1, r1, #1
 800b7d2:	f1c1 0302 	rsb	r3, r1, #2
 800b7d6:	9304      	str	r3, [sp, #16]
 800b7d8:	4b5c      	ldr	r3, [pc, #368]	; (800b94c <__ieee754_pow+0x25c>)
 800b7da:	4598      	cmp	r8, r3
 800b7dc:	d132      	bne.n	800b844 <__ieee754_pow+0x154>
 800b7de:	f1b9 0f00 	cmp.w	r9, #0
 800b7e2:	f280 8477 	bge.w	800c0d4 <__ieee754_pow+0x9e4>
 800b7e6:	4959      	ldr	r1, [pc, #356]	; (800b94c <__ieee754_pow+0x25c>)
 800b7e8:	4632      	mov	r2, r6
 800b7ea:	463b      	mov	r3, r7
 800b7ec:	2000      	movs	r0, #0
 800b7ee:	f7f5 f82d 	bl	800084c <__aeabi_ddiv>
 800b7f2:	e79c      	b.n	800b72e <__ieee754_pow+0x3e>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	9304      	str	r3, [sp, #16]
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d13d      	bne.n	800b878 <__ieee754_pow+0x188>
 800b7fc:	4b51      	ldr	r3, [pc, #324]	; (800b944 <__ieee754_pow+0x254>)
 800b7fe:	4598      	cmp	r8, r3
 800b800:	d1ea      	bne.n	800b7d8 <__ieee754_pow+0xe8>
 800b802:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b806:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b80a:	ea53 030a 	orrs.w	r3, r3, sl
 800b80e:	f000 8459 	beq.w	800c0c4 <__ieee754_pow+0x9d4>
 800b812:	4b4f      	ldr	r3, [pc, #316]	; (800b950 <__ieee754_pow+0x260>)
 800b814:	429c      	cmp	r4, r3
 800b816:	dd08      	ble.n	800b82a <__ieee754_pow+0x13a>
 800b818:	f1b9 0f00 	cmp.w	r9, #0
 800b81c:	f2c0 8456 	blt.w	800c0cc <__ieee754_pow+0x9dc>
 800b820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b824:	e783      	b.n	800b72e <__ieee754_pow+0x3e>
 800b826:	2302      	movs	r3, #2
 800b828:	e7e5      	b.n	800b7f6 <__ieee754_pow+0x106>
 800b82a:	f1b9 0f00 	cmp.w	r9, #0
 800b82e:	f04f 0000 	mov.w	r0, #0
 800b832:	f04f 0100 	mov.w	r1, #0
 800b836:	f6bf af7a 	bge.w	800b72e <__ieee754_pow+0x3e>
 800b83a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b83e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b842:	e774      	b.n	800b72e <__ieee754_pow+0x3e>
 800b844:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b848:	d106      	bne.n	800b858 <__ieee754_pow+0x168>
 800b84a:	4632      	mov	r2, r6
 800b84c:	463b      	mov	r3, r7
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f4 fed1 	bl	80005f8 <__aeabi_dmul>
 800b856:	e76a      	b.n	800b72e <__ieee754_pow+0x3e>
 800b858:	4b3e      	ldr	r3, [pc, #248]	; (800b954 <__ieee754_pow+0x264>)
 800b85a:	4599      	cmp	r9, r3
 800b85c:	d10c      	bne.n	800b878 <__ieee754_pow+0x188>
 800b85e:	2d00      	cmp	r5, #0
 800b860:	db0a      	blt.n	800b878 <__ieee754_pow+0x188>
 800b862:	ec47 6b10 	vmov	d0, r6, r7
 800b866:	b009      	add	sp, #36	; 0x24
 800b868:	ecbd 8b06 	vpop	{d8-d10}
 800b86c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	f7ff b862 	b.w	800a938 <__ieee754_sqrt>
 800b874:	2300      	movs	r3, #0
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	ec47 6b10 	vmov	d0, r6, r7
 800b87c:	f7fe ffc4 	bl	800a808 <fabs>
 800b880:	ec51 0b10 	vmov	r0, r1, d0
 800b884:	f1ba 0f00 	cmp.w	sl, #0
 800b888:	d129      	bne.n	800b8de <__ieee754_pow+0x1ee>
 800b88a:	b124      	cbz	r4, 800b896 <__ieee754_pow+0x1a6>
 800b88c:	4b2f      	ldr	r3, [pc, #188]	; (800b94c <__ieee754_pow+0x25c>)
 800b88e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b892:	429a      	cmp	r2, r3
 800b894:	d123      	bne.n	800b8de <__ieee754_pow+0x1ee>
 800b896:	f1b9 0f00 	cmp.w	r9, #0
 800b89a:	da05      	bge.n	800b8a8 <__ieee754_pow+0x1b8>
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	492a      	ldr	r1, [pc, #168]	; (800b94c <__ieee754_pow+0x25c>)
 800b8a4:	f7f4 ffd2 	bl	800084c <__aeabi_ddiv>
 800b8a8:	2d00      	cmp	r5, #0
 800b8aa:	f6bf af40 	bge.w	800b72e <__ieee754_pow+0x3e>
 800b8ae:	9b04      	ldr	r3, [sp, #16]
 800b8b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b8b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b8b8:	431c      	orrs	r4, r3
 800b8ba:	d108      	bne.n	800b8ce <__ieee754_pow+0x1de>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	460b      	mov	r3, r1
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	f7f4 fce0 	bl	8000288 <__aeabi_dsub>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	e78f      	b.n	800b7ee <__ieee754_pow+0xfe>
 800b8ce:	9b04      	ldr	r3, [sp, #16]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	f47f af2c 	bne.w	800b72e <__ieee754_pow+0x3e>
 800b8d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8da:	4619      	mov	r1, r3
 800b8dc:	e727      	b.n	800b72e <__ieee754_pow+0x3e>
 800b8de:	0feb      	lsrs	r3, r5, #31
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	9306      	str	r3, [sp, #24]
 800b8e4:	9a06      	ldr	r2, [sp, #24]
 800b8e6:	9b04      	ldr	r3, [sp, #16]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	d102      	bne.n	800b8f2 <__ieee754_pow+0x202>
 800b8ec:	4632      	mov	r2, r6
 800b8ee:	463b      	mov	r3, r7
 800b8f0:	e7e6      	b.n	800b8c0 <__ieee754_pow+0x1d0>
 800b8f2:	4b19      	ldr	r3, [pc, #100]	; (800b958 <__ieee754_pow+0x268>)
 800b8f4:	4598      	cmp	r8, r3
 800b8f6:	f340 80fb 	ble.w	800baf0 <__ieee754_pow+0x400>
 800b8fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b8fe:	4598      	cmp	r8, r3
 800b900:	4b13      	ldr	r3, [pc, #76]	; (800b950 <__ieee754_pow+0x260>)
 800b902:	dd0c      	ble.n	800b91e <__ieee754_pow+0x22e>
 800b904:	429c      	cmp	r4, r3
 800b906:	dc0f      	bgt.n	800b928 <__ieee754_pow+0x238>
 800b908:	f1b9 0f00 	cmp.w	r9, #0
 800b90c:	da0f      	bge.n	800b92e <__ieee754_pow+0x23e>
 800b90e:	2000      	movs	r0, #0
 800b910:	b009      	add	sp, #36	; 0x24
 800b912:	ecbd 8b06 	vpop	{d8-d10}
 800b916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91a:	f000 bec2 	b.w	800c6a2 <__math_oflow>
 800b91e:	429c      	cmp	r4, r3
 800b920:	dbf2      	blt.n	800b908 <__ieee754_pow+0x218>
 800b922:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <__ieee754_pow+0x25c>)
 800b924:	429c      	cmp	r4, r3
 800b926:	dd19      	ble.n	800b95c <__ieee754_pow+0x26c>
 800b928:	f1b9 0f00 	cmp.w	r9, #0
 800b92c:	dcef      	bgt.n	800b90e <__ieee754_pow+0x21e>
 800b92e:	2000      	movs	r0, #0
 800b930:	b009      	add	sp, #36	; 0x24
 800b932:	ecbd 8b06 	vpop	{d8-d10}
 800b936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b93a:	f000 bea9 	b.w	800c690 <__math_uflow>
 800b93e:	bf00      	nop
 800b940:	fff00000 	.word	0xfff00000
 800b944:	7ff00000 	.word	0x7ff00000
 800b948:	433fffff 	.word	0x433fffff
 800b94c:	3ff00000 	.word	0x3ff00000
 800b950:	3fefffff 	.word	0x3fefffff
 800b954:	3fe00000 	.word	0x3fe00000
 800b958:	41e00000 	.word	0x41e00000
 800b95c:	4b60      	ldr	r3, [pc, #384]	; (800bae0 <__ieee754_pow+0x3f0>)
 800b95e:	2200      	movs	r2, #0
 800b960:	f7f4 fc92 	bl	8000288 <__aeabi_dsub>
 800b964:	a354      	add	r3, pc, #336	; (adr r3, 800bab8 <__ieee754_pow+0x3c8>)
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	4604      	mov	r4, r0
 800b96c:	460d      	mov	r5, r1
 800b96e:	f7f4 fe43 	bl	80005f8 <__aeabi_dmul>
 800b972:	a353      	add	r3, pc, #332	; (adr r3, 800bac0 <__ieee754_pow+0x3d0>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	4606      	mov	r6, r0
 800b97a:	460f      	mov	r7, r1
 800b97c:	4620      	mov	r0, r4
 800b97e:	4629      	mov	r1, r5
 800b980:	f7f4 fe3a 	bl	80005f8 <__aeabi_dmul>
 800b984:	4b57      	ldr	r3, [pc, #348]	; (800bae4 <__ieee754_pow+0x3f4>)
 800b986:	4682      	mov	sl, r0
 800b988:	468b      	mov	fp, r1
 800b98a:	2200      	movs	r2, #0
 800b98c:	4620      	mov	r0, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	f7f4 fe32 	bl	80005f8 <__aeabi_dmul>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	a14b      	add	r1, pc, #300	; (adr r1, 800bac8 <__ieee754_pow+0x3d8>)
 800b99a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b99e:	f7f4 fc73 	bl	8000288 <__aeabi_dsub>
 800b9a2:	4622      	mov	r2, r4
 800b9a4:	462b      	mov	r3, r5
 800b9a6:	f7f4 fe27 	bl	80005f8 <__aeabi_dmul>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	494d      	ldr	r1, [pc, #308]	; (800bae8 <__ieee754_pow+0x3f8>)
 800b9b2:	f7f4 fc69 	bl	8000288 <__aeabi_dsub>
 800b9b6:	4622      	mov	r2, r4
 800b9b8:	4680      	mov	r8, r0
 800b9ba:	4689      	mov	r9, r1
 800b9bc:	462b      	mov	r3, r5
 800b9be:	4620      	mov	r0, r4
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	f7f4 fe19 	bl	80005f8 <__aeabi_dmul>
 800b9c6:	4602      	mov	r2, r0
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	f7f4 fe13 	bl	80005f8 <__aeabi_dmul>
 800b9d2:	a33f      	add	r3, pc, #252	; (adr r3, 800bad0 <__ieee754_pow+0x3e0>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	f7f4 fe0e 	bl	80005f8 <__aeabi_dmul>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	4659      	mov	r1, fp
 800b9e4:	f7f4 fc50 	bl	8000288 <__aeabi_dsub>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	4680      	mov	r8, r0
 800b9ee:	4689      	mov	r9, r1
 800b9f0:	4630      	mov	r0, r6
 800b9f2:	4639      	mov	r1, r7
 800b9f4:	f7f4 fc4a 	bl	800028c <__adddf3>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	463b      	mov	r3, r7
 800b9fe:	4604      	mov	r4, r0
 800ba00:	460d      	mov	r5, r1
 800ba02:	f7f4 fc41 	bl	8000288 <__aeabi_dsub>
 800ba06:	4602      	mov	r2, r0
 800ba08:	460b      	mov	r3, r1
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	4649      	mov	r1, r9
 800ba0e:	f7f4 fc3b 	bl	8000288 <__aeabi_dsub>
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	9a06      	ldr	r2, [sp, #24]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	4682      	mov	sl, r0
 800ba1c:	468b      	mov	fp, r1
 800ba1e:	f040 81e7 	bne.w	800bdf0 <__ieee754_pow+0x700>
 800ba22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bad8 <__ieee754_pow+0x3e8>
 800ba26:	eeb0 8a47 	vmov.f32	s16, s14
 800ba2a:	eef0 8a67 	vmov.f32	s17, s15
 800ba2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ba32:	2600      	movs	r6, #0
 800ba34:	4632      	mov	r2, r6
 800ba36:	463b      	mov	r3, r7
 800ba38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba3c:	f7f4 fc24 	bl	8000288 <__aeabi_dsub>
 800ba40:	4622      	mov	r2, r4
 800ba42:	462b      	mov	r3, r5
 800ba44:	f7f4 fdd8 	bl	80005f8 <__aeabi_dmul>
 800ba48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba4c:	4680      	mov	r8, r0
 800ba4e:	4689      	mov	r9, r1
 800ba50:	4650      	mov	r0, sl
 800ba52:	4659      	mov	r1, fp
 800ba54:	f7f4 fdd0 	bl	80005f8 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	4649      	mov	r1, r9
 800ba60:	f7f4 fc14 	bl	800028c <__adddf3>
 800ba64:	4632      	mov	r2, r6
 800ba66:	463b      	mov	r3, r7
 800ba68:	4680      	mov	r8, r0
 800ba6a:	4689      	mov	r9, r1
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	4629      	mov	r1, r5
 800ba70:	f7f4 fdc2 	bl	80005f8 <__aeabi_dmul>
 800ba74:	460b      	mov	r3, r1
 800ba76:	4604      	mov	r4, r0
 800ba78:	460d      	mov	r5, r1
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	4640      	mov	r0, r8
 800ba80:	f7f4 fc04 	bl	800028c <__adddf3>
 800ba84:	4b19      	ldr	r3, [pc, #100]	; (800baec <__ieee754_pow+0x3fc>)
 800ba86:	4299      	cmp	r1, r3
 800ba88:	ec45 4b19 	vmov	d9, r4, r5
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	460f      	mov	r7, r1
 800ba90:	468b      	mov	fp, r1
 800ba92:	f340 82f0 	ble.w	800c076 <__ieee754_pow+0x986>
 800ba96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ba9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ba9e:	4303      	orrs	r3, r0
 800baa0:	f000 81e4 	beq.w	800be6c <__ieee754_pow+0x77c>
 800baa4:	ec51 0b18 	vmov	r0, r1, d8
 800baa8:	2200      	movs	r2, #0
 800baaa:	2300      	movs	r3, #0
 800baac:	f7f5 f816 	bl	8000adc <__aeabi_dcmplt>
 800bab0:	3800      	subs	r0, #0
 800bab2:	bf18      	it	ne
 800bab4:	2001      	movne	r0, #1
 800bab6:	e72b      	b.n	800b910 <__ieee754_pow+0x220>
 800bab8:	60000000 	.word	0x60000000
 800babc:	3ff71547 	.word	0x3ff71547
 800bac0:	f85ddf44 	.word	0xf85ddf44
 800bac4:	3e54ae0b 	.word	0x3e54ae0b
 800bac8:	55555555 	.word	0x55555555
 800bacc:	3fd55555 	.word	0x3fd55555
 800bad0:	652b82fe 	.word	0x652b82fe
 800bad4:	3ff71547 	.word	0x3ff71547
 800bad8:	00000000 	.word	0x00000000
 800badc:	bff00000 	.word	0xbff00000
 800bae0:	3ff00000 	.word	0x3ff00000
 800bae4:	3fd00000 	.word	0x3fd00000
 800bae8:	3fe00000 	.word	0x3fe00000
 800baec:	408fffff 	.word	0x408fffff
 800baf0:	4bd5      	ldr	r3, [pc, #852]	; (800be48 <__ieee754_pow+0x758>)
 800baf2:	402b      	ands	r3, r5
 800baf4:	2200      	movs	r2, #0
 800baf6:	b92b      	cbnz	r3, 800bb04 <__ieee754_pow+0x414>
 800baf8:	4bd4      	ldr	r3, [pc, #848]	; (800be4c <__ieee754_pow+0x75c>)
 800bafa:	f7f4 fd7d 	bl	80005f8 <__aeabi_dmul>
 800bafe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bb02:	460c      	mov	r4, r1
 800bb04:	1523      	asrs	r3, r4, #20
 800bb06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb0a:	4413      	add	r3, r2
 800bb0c:	9305      	str	r3, [sp, #20]
 800bb0e:	4bd0      	ldr	r3, [pc, #832]	; (800be50 <__ieee754_pow+0x760>)
 800bb10:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bb14:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bb18:	429c      	cmp	r4, r3
 800bb1a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb1e:	dd08      	ble.n	800bb32 <__ieee754_pow+0x442>
 800bb20:	4bcc      	ldr	r3, [pc, #816]	; (800be54 <__ieee754_pow+0x764>)
 800bb22:	429c      	cmp	r4, r3
 800bb24:	f340 8162 	ble.w	800bdec <__ieee754_pow+0x6fc>
 800bb28:	9b05      	ldr	r3, [sp, #20]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	9305      	str	r3, [sp, #20]
 800bb2e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bb32:	2400      	movs	r4, #0
 800bb34:	00e3      	lsls	r3, r4, #3
 800bb36:	9307      	str	r3, [sp, #28]
 800bb38:	4bc7      	ldr	r3, [pc, #796]	; (800be58 <__ieee754_pow+0x768>)
 800bb3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb3e:	ed93 7b00 	vldr	d7, [r3]
 800bb42:	4629      	mov	r1, r5
 800bb44:	ec53 2b17 	vmov	r2, r3, d7
 800bb48:	eeb0 9a47 	vmov.f32	s18, s14
 800bb4c:	eef0 9a67 	vmov.f32	s19, s15
 800bb50:	4682      	mov	sl, r0
 800bb52:	f7f4 fb99 	bl	8000288 <__aeabi_dsub>
 800bb56:	4652      	mov	r2, sl
 800bb58:	4606      	mov	r6, r0
 800bb5a:	460f      	mov	r7, r1
 800bb5c:	462b      	mov	r3, r5
 800bb5e:	ec51 0b19 	vmov	r0, r1, d9
 800bb62:	f7f4 fb93 	bl	800028c <__adddf3>
 800bb66:	4602      	mov	r2, r0
 800bb68:	460b      	mov	r3, r1
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	49bb      	ldr	r1, [pc, #748]	; (800be5c <__ieee754_pow+0x76c>)
 800bb6e:	f7f4 fe6d 	bl	800084c <__aeabi_ddiv>
 800bb72:	ec41 0b1a 	vmov	d10, r0, r1
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	4639      	mov	r1, r7
 800bb7e:	f7f4 fd3b 	bl	80005f8 <__aeabi_dmul>
 800bb82:	2300      	movs	r3, #0
 800bb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb88:	9302      	str	r3, [sp, #8]
 800bb8a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb8e:	46ab      	mov	fp, r5
 800bb90:	106d      	asrs	r5, r5, #1
 800bb92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bb96:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bb9a:	ec41 0b18 	vmov	d8, r0, r1
 800bb9e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bba2:	2200      	movs	r2, #0
 800bba4:	4640      	mov	r0, r8
 800bba6:	4649      	mov	r1, r9
 800bba8:	4614      	mov	r4, r2
 800bbaa:	461d      	mov	r5, r3
 800bbac:	f7f4 fd24 	bl	80005f8 <__aeabi_dmul>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	4639      	mov	r1, r7
 800bbb8:	f7f4 fb66 	bl	8000288 <__aeabi_dsub>
 800bbbc:	ec53 2b19 	vmov	r2, r3, d9
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	460f      	mov	r7, r1
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 fb5e 	bl	8000288 <__aeabi_dsub>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	4650      	mov	r0, sl
 800bbd2:	4659      	mov	r1, fp
 800bbd4:	f7f4 fb58 	bl	8000288 <__aeabi_dsub>
 800bbd8:	4642      	mov	r2, r8
 800bbda:	464b      	mov	r3, r9
 800bbdc:	f7f4 fd0c 	bl	80005f8 <__aeabi_dmul>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	4639      	mov	r1, r7
 800bbe8:	f7f4 fb4e 	bl	8000288 <__aeabi_dsub>
 800bbec:	ec53 2b1a 	vmov	r2, r3, d10
 800bbf0:	f7f4 fd02 	bl	80005f8 <__aeabi_dmul>
 800bbf4:	ec53 2b18 	vmov	r2, r3, d8
 800bbf8:	ec41 0b19 	vmov	d9, r0, r1
 800bbfc:	ec51 0b18 	vmov	r0, r1, d8
 800bc00:	f7f4 fcfa 	bl	80005f8 <__aeabi_dmul>
 800bc04:	a37c      	add	r3, pc, #496	; (adr r3, 800bdf8 <__ieee754_pow+0x708>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	460d      	mov	r5, r1
 800bc0e:	f7f4 fcf3 	bl	80005f8 <__aeabi_dmul>
 800bc12:	a37b      	add	r3, pc, #492	; (adr r3, 800be00 <__ieee754_pow+0x710>)
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	f7f4 fb38 	bl	800028c <__adddf3>
 800bc1c:	4622      	mov	r2, r4
 800bc1e:	462b      	mov	r3, r5
 800bc20:	f7f4 fcea 	bl	80005f8 <__aeabi_dmul>
 800bc24:	a378      	add	r3, pc, #480	; (adr r3, 800be08 <__ieee754_pow+0x718>)
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	f7f4 fb2f 	bl	800028c <__adddf3>
 800bc2e:	4622      	mov	r2, r4
 800bc30:	462b      	mov	r3, r5
 800bc32:	f7f4 fce1 	bl	80005f8 <__aeabi_dmul>
 800bc36:	a376      	add	r3, pc, #472	; (adr r3, 800be10 <__ieee754_pow+0x720>)
 800bc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3c:	f7f4 fb26 	bl	800028c <__adddf3>
 800bc40:	4622      	mov	r2, r4
 800bc42:	462b      	mov	r3, r5
 800bc44:	f7f4 fcd8 	bl	80005f8 <__aeabi_dmul>
 800bc48:	a373      	add	r3, pc, #460	; (adr r3, 800be18 <__ieee754_pow+0x728>)
 800bc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4e:	f7f4 fb1d 	bl	800028c <__adddf3>
 800bc52:	4622      	mov	r2, r4
 800bc54:	462b      	mov	r3, r5
 800bc56:	f7f4 fccf 	bl	80005f8 <__aeabi_dmul>
 800bc5a:	a371      	add	r3, pc, #452	; (adr r3, 800be20 <__ieee754_pow+0x730>)
 800bc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc60:	f7f4 fb14 	bl	800028c <__adddf3>
 800bc64:	4622      	mov	r2, r4
 800bc66:	4606      	mov	r6, r0
 800bc68:	460f      	mov	r7, r1
 800bc6a:	462b      	mov	r3, r5
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	4629      	mov	r1, r5
 800bc70:	f7f4 fcc2 	bl	80005f8 <__aeabi_dmul>
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	4630      	mov	r0, r6
 800bc7a:	4639      	mov	r1, r7
 800bc7c:	f7f4 fcbc 	bl	80005f8 <__aeabi_dmul>
 800bc80:	4642      	mov	r2, r8
 800bc82:	4604      	mov	r4, r0
 800bc84:	460d      	mov	r5, r1
 800bc86:	464b      	mov	r3, r9
 800bc88:	ec51 0b18 	vmov	r0, r1, d8
 800bc8c:	f7f4 fafe 	bl	800028c <__adddf3>
 800bc90:	ec53 2b19 	vmov	r2, r3, d9
 800bc94:	f7f4 fcb0 	bl	80005f8 <__aeabi_dmul>
 800bc98:	4622      	mov	r2, r4
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	f7f4 faf6 	bl	800028c <__adddf3>
 800bca0:	4642      	mov	r2, r8
 800bca2:	4682      	mov	sl, r0
 800bca4:	468b      	mov	fp, r1
 800bca6:	464b      	mov	r3, r9
 800bca8:	4640      	mov	r0, r8
 800bcaa:	4649      	mov	r1, r9
 800bcac:	f7f4 fca4 	bl	80005f8 <__aeabi_dmul>
 800bcb0:	4b6b      	ldr	r3, [pc, #428]	; (800be60 <__ieee754_pow+0x770>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	460f      	mov	r7, r1
 800bcb8:	f7f4 fae8 	bl	800028c <__adddf3>
 800bcbc:	4652      	mov	r2, sl
 800bcbe:	465b      	mov	r3, fp
 800bcc0:	f7f4 fae4 	bl	800028c <__adddf3>
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	460d      	mov	r5, r1
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	4640      	mov	r0, r8
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	f7f4 fc91 	bl	80005f8 <__aeabi_dmul>
 800bcd6:	4b62      	ldr	r3, [pc, #392]	; (800be60 <__ieee754_pow+0x770>)
 800bcd8:	4680      	mov	r8, r0
 800bcda:	4689      	mov	r9, r1
 800bcdc:	2200      	movs	r2, #0
 800bcde:	4620      	mov	r0, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	f7f4 fad1 	bl	8000288 <__aeabi_dsub>
 800bce6:	4632      	mov	r2, r6
 800bce8:	463b      	mov	r3, r7
 800bcea:	f7f4 facd 	bl	8000288 <__aeabi_dsub>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4650      	mov	r0, sl
 800bcf4:	4659      	mov	r1, fp
 800bcf6:	f7f4 fac7 	bl	8000288 <__aeabi_dsub>
 800bcfa:	ec53 2b18 	vmov	r2, r3, d8
 800bcfe:	f7f4 fc7b 	bl	80005f8 <__aeabi_dmul>
 800bd02:	4622      	mov	r2, r4
 800bd04:	4606      	mov	r6, r0
 800bd06:	460f      	mov	r7, r1
 800bd08:	462b      	mov	r3, r5
 800bd0a:	ec51 0b19 	vmov	r0, r1, d9
 800bd0e:	f7f4 fc73 	bl	80005f8 <__aeabi_dmul>
 800bd12:	4602      	mov	r2, r0
 800bd14:	460b      	mov	r3, r1
 800bd16:	4630      	mov	r0, r6
 800bd18:	4639      	mov	r1, r7
 800bd1a:	f7f4 fab7 	bl	800028c <__adddf3>
 800bd1e:	4606      	mov	r6, r0
 800bd20:	460f      	mov	r7, r1
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4640      	mov	r0, r8
 800bd28:	4649      	mov	r1, r9
 800bd2a:	f7f4 faaf 	bl	800028c <__adddf3>
 800bd2e:	a33e      	add	r3, pc, #248	; (adr r3, 800be28 <__ieee754_pow+0x738>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	2000      	movs	r0, #0
 800bd36:	4604      	mov	r4, r0
 800bd38:	460d      	mov	r5, r1
 800bd3a:	f7f4 fc5d 	bl	80005f8 <__aeabi_dmul>
 800bd3e:	4642      	mov	r2, r8
 800bd40:	ec41 0b18 	vmov	d8, r0, r1
 800bd44:	464b      	mov	r3, r9
 800bd46:	4620      	mov	r0, r4
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f7f4 fa9d 	bl	8000288 <__aeabi_dsub>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	460b      	mov	r3, r1
 800bd52:	4630      	mov	r0, r6
 800bd54:	4639      	mov	r1, r7
 800bd56:	f7f4 fa97 	bl	8000288 <__aeabi_dsub>
 800bd5a:	a335      	add	r3, pc, #212	; (adr r3, 800be30 <__ieee754_pow+0x740>)
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	f7f4 fc4a 	bl	80005f8 <__aeabi_dmul>
 800bd64:	a334      	add	r3, pc, #208	; (adr r3, 800be38 <__ieee754_pow+0x748>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	4620      	mov	r0, r4
 800bd70:	4629      	mov	r1, r5
 800bd72:	f7f4 fc41 	bl	80005f8 <__aeabi_dmul>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	4639      	mov	r1, r7
 800bd7e:	f7f4 fa85 	bl	800028c <__adddf3>
 800bd82:	9a07      	ldr	r2, [sp, #28]
 800bd84:	4b37      	ldr	r3, [pc, #220]	; (800be64 <__ieee754_pow+0x774>)
 800bd86:	4413      	add	r3, r2
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	f7f4 fa7e 	bl	800028c <__adddf3>
 800bd90:	4682      	mov	sl, r0
 800bd92:	9805      	ldr	r0, [sp, #20]
 800bd94:	468b      	mov	fp, r1
 800bd96:	f7f4 fbc5 	bl	8000524 <__aeabi_i2d>
 800bd9a:	9a07      	ldr	r2, [sp, #28]
 800bd9c:	4b32      	ldr	r3, [pc, #200]	; (800be68 <__ieee754_pow+0x778>)
 800bd9e:	4413      	add	r3, r2
 800bda0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bda4:	4606      	mov	r6, r0
 800bda6:	460f      	mov	r7, r1
 800bda8:	4652      	mov	r2, sl
 800bdaa:	465b      	mov	r3, fp
 800bdac:	ec51 0b18 	vmov	r0, r1, d8
 800bdb0:	f7f4 fa6c 	bl	800028c <__adddf3>
 800bdb4:	4642      	mov	r2, r8
 800bdb6:	464b      	mov	r3, r9
 800bdb8:	f7f4 fa68 	bl	800028c <__adddf3>
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	463b      	mov	r3, r7
 800bdc0:	f7f4 fa64 	bl	800028c <__adddf3>
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	4632      	mov	r2, r6
 800bdc8:	463b      	mov	r3, r7
 800bdca:	4604      	mov	r4, r0
 800bdcc:	460d      	mov	r5, r1
 800bdce:	f7f4 fa5b 	bl	8000288 <__aeabi_dsub>
 800bdd2:	4642      	mov	r2, r8
 800bdd4:	464b      	mov	r3, r9
 800bdd6:	f7f4 fa57 	bl	8000288 <__aeabi_dsub>
 800bdda:	ec53 2b18 	vmov	r2, r3, d8
 800bdde:	f7f4 fa53 	bl	8000288 <__aeabi_dsub>
 800bde2:	4602      	mov	r2, r0
 800bde4:	460b      	mov	r3, r1
 800bde6:	4650      	mov	r0, sl
 800bde8:	4659      	mov	r1, fp
 800bdea:	e610      	b.n	800ba0e <__ieee754_pow+0x31e>
 800bdec:	2401      	movs	r4, #1
 800bdee:	e6a1      	b.n	800bb34 <__ieee754_pow+0x444>
 800bdf0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800be40 <__ieee754_pow+0x750>
 800bdf4:	e617      	b.n	800ba26 <__ieee754_pow+0x336>
 800bdf6:	bf00      	nop
 800bdf8:	4a454eef 	.word	0x4a454eef
 800bdfc:	3fca7e28 	.word	0x3fca7e28
 800be00:	93c9db65 	.word	0x93c9db65
 800be04:	3fcd864a 	.word	0x3fcd864a
 800be08:	a91d4101 	.word	0xa91d4101
 800be0c:	3fd17460 	.word	0x3fd17460
 800be10:	518f264d 	.word	0x518f264d
 800be14:	3fd55555 	.word	0x3fd55555
 800be18:	db6fabff 	.word	0xdb6fabff
 800be1c:	3fdb6db6 	.word	0x3fdb6db6
 800be20:	33333303 	.word	0x33333303
 800be24:	3fe33333 	.word	0x3fe33333
 800be28:	e0000000 	.word	0xe0000000
 800be2c:	3feec709 	.word	0x3feec709
 800be30:	dc3a03fd 	.word	0xdc3a03fd
 800be34:	3feec709 	.word	0x3feec709
 800be38:	145b01f5 	.word	0x145b01f5
 800be3c:	be3e2fe0 	.word	0xbe3e2fe0
 800be40:	00000000 	.word	0x00000000
 800be44:	3ff00000 	.word	0x3ff00000
 800be48:	7ff00000 	.word	0x7ff00000
 800be4c:	43400000 	.word	0x43400000
 800be50:	0003988e 	.word	0x0003988e
 800be54:	000bb679 	.word	0x000bb679
 800be58:	0800d230 	.word	0x0800d230
 800be5c:	3ff00000 	.word	0x3ff00000
 800be60:	40080000 	.word	0x40080000
 800be64:	0800d250 	.word	0x0800d250
 800be68:	0800d240 	.word	0x0800d240
 800be6c:	a3b3      	add	r3, pc, #716	; (adr r3, 800c13c <__ieee754_pow+0xa4c>)
 800be6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be72:	4640      	mov	r0, r8
 800be74:	4649      	mov	r1, r9
 800be76:	f7f4 fa09 	bl	800028c <__adddf3>
 800be7a:	4622      	mov	r2, r4
 800be7c:	ec41 0b1a 	vmov	d10, r0, r1
 800be80:	462b      	mov	r3, r5
 800be82:	4630      	mov	r0, r6
 800be84:	4639      	mov	r1, r7
 800be86:	f7f4 f9ff 	bl	8000288 <__aeabi_dsub>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	ec51 0b1a 	vmov	r0, r1, d10
 800be92:	f7f4 fe41 	bl	8000b18 <__aeabi_dcmpgt>
 800be96:	2800      	cmp	r0, #0
 800be98:	f47f ae04 	bne.w	800baa4 <__ieee754_pow+0x3b4>
 800be9c:	4aa2      	ldr	r2, [pc, #648]	; (800c128 <__ieee754_pow+0xa38>)
 800be9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bea2:	4293      	cmp	r3, r2
 800bea4:	f340 8107 	ble.w	800c0b6 <__ieee754_pow+0x9c6>
 800bea8:	151b      	asrs	r3, r3, #20
 800beaa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800beae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800beb2:	fa4a fa03 	asr.w	sl, sl, r3
 800beb6:	44da      	add	sl, fp
 800beb8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bebc:	489b      	ldr	r0, [pc, #620]	; (800c12c <__ieee754_pow+0xa3c>)
 800bebe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bec2:	4108      	asrs	r0, r1
 800bec4:	ea00 030a 	and.w	r3, r0, sl
 800bec8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800becc:	f1c1 0114 	rsb	r1, r1, #20
 800bed0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bed4:	fa4a fa01 	asr.w	sl, sl, r1
 800bed8:	f1bb 0f00 	cmp.w	fp, #0
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	4620      	mov	r0, r4
 800bee2:	4629      	mov	r1, r5
 800bee4:	bfb8      	it	lt
 800bee6:	f1ca 0a00 	rsblt	sl, sl, #0
 800beea:	f7f4 f9cd 	bl	8000288 <__aeabi_dsub>
 800beee:	ec41 0b19 	vmov	d9, r0, r1
 800bef2:	4642      	mov	r2, r8
 800bef4:	464b      	mov	r3, r9
 800bef6:	ec51 0b19 	vmov	r0, r1, d9
 800befa:	f7f4 f9c7 	bl	800028c <__adddf3>
 800befe:	a37a      	add	r3, pc, #488	; (adr r3, 800c0e8 <__ieee754_pow+0x9f8>)
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	2000      	movs	r0, #0
 800bf06:	4604      	mov	r4, r0
 800bf08:	460d      	mov	r5, r1
 800bf0a:	f7f4 fb75 	bl	80005f8 <__aeabi_dmul>
 800bf0e:	ec53 2b19 	vmov	r2, r3, d9
 800bf12:	4606      	mov	r6, r0
 800bf14:	460f      	mov	r7, r1
 800bf16:	4620      	mov	r0, r4
 800bf18:	4629      	mov	r1, r5
 800bf1a:	f7f4 f9b5 	bl	8000288 <__aeabi_dsub>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	460b      	mov	r3, r1
 800bf22:	4640      	mov	r0, r8
 800bf24:	4649      	mov	r1, r9
 800bf26:	f7f4 f9af 	bl	8000288 <__aeabi_dsub>
 800bf2a:	a371      	add	r3, pc, #452	; (adr r3, 800c0f0 <__ieee754_pow+0xa00>)
 800bf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf30:	f7f4 fb62 	bl	80005f8 <__aeabi_dmul>
 800bf34:	a370      	add	r3, pc, #448	; (adr r3, 800c0f8 <__ieee754_pow+0xa08>)
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	4689      	mov	r9, r1
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 fb59 	bl	80005f8 <__aeabi_dmul>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 f99d 	bl	800028c <__adddf3>
 800bf52:	4604      	mov	r4, r0
 800bf54:	460d      	mov	r5, r1
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	f7f4 f995 	bl	800028c <__adddf3>
 800bf62:	4632      	mov	r2, r6
 800bf64:	463b      	mov	r3, r7
 800bf66:	4680      	mov	r8, r0
 800bf68:	4689      	mov	r9, r1
 800bf6a:	f7f4 f98d 	bl	8000288 <__aeabi_dsub>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	4620      	mov	r0, r4
 800bf74:	4629      	mov	r1, r5
 800bf76:	f7f4 f987 	bl	8000288 <__aeabi_dsub>
 800bf7a:	4642      	mov	r2, r8
 800bf7c:	4606      	mov	r6, r0
 800bf7e:	460f      	mov	r7, r1
 800bf80:	464b      	mov	r3, r9
 800bf82:	4640      	mov	r0, r8
 800bf84:	4649      	mov	r1, r9
 800bf86:	f7f4 fb37 	bl	80005f8 <__aeabi_dmul>
 800bf8a:	a35d      	add	r3, pc, #372	; (adr r3, 800c100 <__ieee754_pow+0xa10>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	4604      	mov	r4, r0
 800bf92:	460d      	mov	r5, r1
 800bf94:	f7f4 fb30 	bl	80005f8 <__aeabi_dmul>
 800bf98:	a35b      	add	r3, pc, #364	; (adr r3, 800c108 <__ieee754_pow+0xa18>)
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	f7f4 f973 	bl	8000288 <__aeabi_dsub>
 800bfa2:	4622      	mov	r2, r4
 800bfa4:	462b      	mov	r3, r5
 800bfa6:	f7f4 fb27 	bl	80005f8 <__aeabi_dmul>
 800bfaa:	a359      	add	r3, pc, #356	; (adr r3, 800c110 <__ieee754_pow+0xa20>)
 800bfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb0:	f7f4 f96c 	bl	800028c <__adddf3>
 800bfb4:	4622      	mov	r2, r4
 800bfb6:	462b      	mov	r3, r5
 800bfb8:	f7f4 fb1e 	bl	80005f8 <__aeabi_dmul>
 800bfbc:	a356      	add	r3, pc, #344	; (adr r3, 800c118 <__ieee754_pow+0xa28>)
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	f7f4 f961 	bl	8000288 <__aeabi_dsub>
 800bfc6:	4622      	mov	r2, r4
 800bfc8:	462b      	mov	r3, r5
 800bfca:	f7f4 fb15 	bl	80005f8 <__aeabi_dmul>
 800bfce:	a354      	add	r3, pc, #336	; (adr r3, 800c120 <__ieee754_pow+0xa30>)
 800bfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd4:	f7f4 f95a 	bl	800028c <__adddf3>
 800bfd8:	4622      	mov	r2, r4
 800bfda:	462b      	mov	r3, r5
 800bfdc:	f7f4 fb0c 	bl	80005f8 <__aeabi_dmul>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4640      	mov	r0, r8
 800bfe6:	4649      	mov	r1, r9
 800bfe8:	f7f4 f94e 	bl	8000288 <__aeabi_dsub>
 800bfec:	4604      	mov	r4, r0
 800bfee:	460d      	mov	r5, r1
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4640      	mov	r0, r8
 800bff6:	4649      	mov	r1, r9
 800bff8:	f7f4 fafe 	bl	80005f8 <__aeabi_dmul>
 800bffc:	2200      	movs	r2, #0
 800bffe:	ec41 0b19 	vmov	d9, r0, r1
 800c002:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c006:	4620      	mov	r0, r4
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 f93d 	bl	8000288 <__aeabi_dsub>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	ec51 0b19 	vmov	r0, r1, d9
 800c016:	f7f4 fc19 	bl	800084c <__aeabi_ddiv>
 800c01a:	4632      	mov	r2, r6
 800c01c:	4604      	mov	r4, r0
 800c01e:	460d      	mov	r5, r1
 800c020:	463b      	mov	r3, r7
 800c022:	4640      	mov	r0, r8
 800c024:	4649      	mov	r1, r9
 800c026:	f7f4 fae7 	bl	80005f8 <__aeabi_dmul>
 800c02a:	4632      	mov	r2, r6
 800c02c:	463b      	mov	r3, r7
 800c02e:	f7f4 f92d 	bl	800028c <__adddf3>
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	4620      	mov	r0, r4
 800c038:	4629      	mov	r1, r5
 800c03a:	f7f4 f925 	bl	8000288 <__aeabi_dsub>
 800c03e:	4642      	mov	r2, r8
 800c040:	464b      	mov	r3, r9
 800c042:	f7f4 f921 	bl	8000288 <__aeabi_dsub>
 800c046:	460b      	mov	r3, r1
 800c048:	4602      	mov	r2, r0
 800c04a:	4939      	ldr	r1, [pc, #228]	; (800c130 <__ieee754_pow+0xa40>)
 800c04c:	2000      	movs	r0, #0
 800c04e:	f7f4 f91b 	bl	8000288 <__aeabi_dsub>
 800c052:	ec41 0b10 	vmov	d0, r0, r1
 800c056:	ee10 3a90 	vmov	r3, s1
 800c05a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c05e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c062:	da2b      	bge.n	800c0bc <__ieee754_pow+0x9cc>
 800c064:	4650      	mov	r0, sl
 800c066:	f000 fa77 	bl	800c558 <scalbn>
 800c06a:	ec51 0b10 	vmov	r0, r1, d0
 800c06e:	ec53 2b18 	vmov	r2, r3, d8
 800c072:	f7ff bbee 	b.w	800b852 <__ieee754_pow+0x162>
 800c076:	4b2f      	ldr	r3, [pc, #188]	; (800c134 <__ieee754_pow+0xa44>)
 800c078:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c07c:	429e      	cmp	r6, r3
 800c07e:	f77f af0d 	ble.w	800be9c <__ieee754_pow+0x7ac>
 800c082:	4b2d      	ldr	r3, [pc, #180]	; (800c138 <__ieee754_pow+0xa48>)
 800c084:	440b      	add	r3, r1
 800c086:	4303      	orrs	r3, r0
 800c088:	d009      	beq.n	800c09e <__ieee754_pow+0x9ae>
 800c08a:	ec51 0b18 	vmov	r0, r1, d8
 800c08e:	2200      	movs	r2, #0
 800c090:	2300      	movs	r3, #0
 800c092:	f7f4 fd23 	bl	8000adc <__aeabi_dcmplt>
 800c096:	3800      	subs	r0, #0
 800c098:	bf18      	it	ne
 800c09a:	2001      	movne	r0, #1
 800c09c:	e448      	b.n	800b930 <__ieee754_pow+0x240>
 800c09e:	4622      	mov	r2, r4
 800c0a0:	462b      	mov	r3, r5
 800c0a2:	f7f4 f8f1 	bl	8000288 <__aeabi_dsub>
 800c0a6:	4642      	mov	r2, r8
 800c0a8:	464b      	mov	r3, r9
 800c0aa:	f7f4 fd2b 	bl	8000b04 <__aeabi_dcmpge>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f43f aef4 	beq.w	800be9c <__ieee754_pow+0x7ac>
 800c0b4:	e7e9      	b.n	800c08a <__ieee754_pow+0x99a>
 800c0b6:	f04f 0a00 	mov.w	sl, #0
 800c0ba:	e71a      	b.n	800bef2 <__ieee754_pow+0x802>
 800c0bc:	ec51 0b10 	vmov	r0, r1, d0
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	e7d4      	b.n	800c06e <__ieee754_pow+0x97e>
 800c0c4:	491a      	ldr	r1, [pc, #104]	; (800c130 <__ieee754_pow+0xa40>)
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	f7ff bb31 	b.w	800b72e <__ieee754_pow+0x3e>
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	f7ff bb2d 	b.w	800b72e <__ieee754_pow+0x3e>
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7ff bb29 	b.w	800b72e <__ieee754_pow+0x3e>
 800c0dc:	9204      	str	r2, [sp, #16]
 800c0de:	f7ff bb7b 	b.w	800b7d8 <__ieee754_pow+0xe8>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f7ff bb65 	b.w	800b7b2 <__ieee754_pow+0xc2>
 800c0e8:	00000000 	.word	0x00000000
 800c0ec:	3fe62e43 	.word	0x3fe62e43
 800c0f0:	fefa39ef 	.word	0xfefa39ef
 800c0f4:	3fe62e42 	.word	0x3fe62e42
 800c0f8:	0ca86c39 	.word	0x0ca86c39
 800c0fc:	be205c61 	.word	0xbe205c61
 800c100:	72bea4d0 	.word	0x72bea4d0
 800c104:	3e663769 	.word	0x3e663769
 800c108:	c5d26bf1 	.word	0xc5d26bf1
 800c10c:	3ebbbd41 	.word	0x3ebbbd41
 800c110:	af25de2c 	.word	0xaf25de2c
 800c114:	3f11566a 	.word	0x3f11566a
 800c118:	16bebd93 	.word	0x16bebd93
 800c11c:	3f66c16c 	.word	0x3f66c16c
 800c120:	5555553e 	.word	0x5555553e
 800c124:	3fc55555 	.word	0x3fc55555
 800c128:	3fe00000 	.word	0x3fe00000
 800c12c:	fff00000 	.word	0xfff00000
 800c130:	3ff00000 	.word	0x3ff00000
 800c134:	4090cbff 	.word	0x4090cbff
 800c138:	3f6f3400 	.word	0x3f6f3400
 800c13c:	652b82fe 	.word	0x652b82fe
 800c140:	3c971547 	.word	0x3c971547
 800c144:	00000000 	.word	0x00000000

0800c148 <__ieee754_rem_pio2>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	ed2d 8b02 	vpush	{d8}
 800c150:	ec55 4b10 	vmov	r4, r5, d0
 800c154:	4bca      	ldr	r3, [pc, #808]	; (800c480 <__ieee754_rem_pio2+0x338>)
 800c156:	b08b      	sub	sp, #44	; 0x2c
 800c158:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c15c:	4598      	cmp	r8, r3
 800c15e:	4682      	mov	sl, r0
 800c160:	9502      	str	r5, [sp, #8]
 800c162:	dc08      	bgt.n	800c176 <__ieee754_rem_pio2+0x2e>
 800c164:	2200      	movs	r2, #0
 800c166:	2300      	movs	r3, #0
 800c168:	ed80 0b00 	vstr	d0, [r0]
 800c16c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c170:	f04f 0b00 	mov.w	fp, #0
 800c174:	e028      	b.n	800c1c8 <__ieee754_rem_pio2+0x80>
 800c176:	4bc3      	ldr	r3, [pc, #780]	; (800c484 <__ieee754_rem_pio2+0x33c>)
 800c178:	4598      	cmp	r8, r3
 800c17a:	dc78      	bgt.n	800c26e <__ieee754_rem_pio2+0x126>
 800c17c:	9b02      	ldr	r3, [sp, #8]
 800c17e:	4ec2      	ldr	r6, [pc, #776]	; (800c488 <__ieee754_rem_pio2+0x340>)
 800c180:	2b00      	cmp	r3, #0
 800c182:	ee10 0a10 	vmov	r0, s0
 800c186:	a3b0      	add	r3, pc, #704	; (adr r3, 800c448 <__ieee754_rem_pio2+0x300>)
 800c188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18c:	4629      	mov	r1, r5
 800c18e:	dd39      	ble.n	800c204 <__ieee754_rem_pio2+0xbc>
 800c190:	f7f4 f87a 	bl	8000288 <__aeabi_dsub>
 800c194:	45b0      	cmp	r8, r6
 800c196:	4604      	mov	r4, r0
 800c198:	460d      	mov	r5, r1
 800c19a:	d01b      	beq.n	800c1d4 <__ieee754_rem_pio2+0x8c>
 800c19c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c450 <__ieee754_rem_pio2+0x308>)
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	f7f4 f871 	bl	8000288 <__aeabi_dsub>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	e9ca 2300 	strd	r2, r3, [sl]
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	f7f4 f869 	bl	8000288 <__aeabi_dsub>
 800c1b6:	a3a6      	add	r3, pc, #664	; (adr r3, 800c450 <__ieee754_rem_pio2+0x308>)
 800c1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1bc:	f7f4 f864 	bl	8000288 <__aeabi_dsub>
 800c1c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c1c4:	f04f 0b01 	mov.w	fp, #1
 800c1c8:	4658      	mov	r0, fp
 800c1ca:	b00b      	add	sp, #44	; 0x2c
 800c1cc:	ecbd 8b02 	vpop	{d8}
 800c1d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d4:	a3a0      	add	r3, pc, #640	; (adr r3, 800c458 <__ieee754_rem_pio2+0x310>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f7f4 f855 	bl	8000288 <__aeabi_dsub>
 800c1de:	a3a0      	add	r3, pc, #640	; (adr r3, 800c460 <__ieee754_rem_pio2+0x318>)
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	4604      	mov	r4, r0
 800c1e6:	460d      	mov	r5, r1
 800c1e8:	f7f4 f84e 	bl	8000288 <__aeabi_dsub>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	e9ca 2300 	strd	r2, r3, [sl]
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	f7f4 f846 	bl	8000288 <__aeabi_dsub>
 800c1fc:	a398      	add	r3, pc, #608	; (adr r3, 800c460 <__ieee754_rem_pio2+0x318>)
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	e7db      	b.n	800c1bc <__ieee754_rem_pio2+0x74>
 800c204:	f7f4 f842 	bl	800028c <__adddf3>
 800c208:	45b0      	cmp	r8, r6
 800c20a:	4604      	mov	r4, r0
 800c20c:	460d      	mov	r5, r1
 800c20e:	d016      	beq.n	800c23e <__ieee754_rem_pio2+0xf6>
 800c210:	a38f      	add	r3, pc, #572	; (adr r3, 800c450 <__ieee754_rem_pio2+0x308>)
 800c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c216:	f7f4 f839 	bl	800028c <__adddf3>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	e9ca 2300 	strd	r2, r3, [sl]
 800c222:	4620      	mov	r0, r4
 800c224:	4629      	mov	r1, r5
 800c226:	f7f4 f82f 	bl	8000288 <__aeabi_dsub>
 800c22a:	a389      	add	r3, pc, #548	; (adr r3, 800c450 <__ieee754_rem_pio2+0x308>)
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f7f4 f82c 	bl	800028c <__adddf3>
 800c234:	f04f 3bff 	mov.w	fp, #4294967295
 800c238:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c23c:	e7c4      	b.n	800c1c8 <__ieee754_rem_pio2+0x80>
 800c23e:	a386      	add	r3, pc, #536	; (adr r3, 800c458 <__ieee754_rem_pio2+0x310>)
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f7f4 f822 	bl	800028c <__adddf3>
 800c248:	a385      	add	r3, pc, #532	; (adr r3, 800c460 <__ieee754_rem_pio2+0x318>)
 800c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24e:	4604      	mov	r4, r0
 800c250:	460d      	mov	r5, r1
 800c252:	f7f4 f81b 	bl	800028c <__adddf3>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	e9ca 2300 	strd	r2, r3, [sl]
 800c25e:	4620      	mov	r0, r4
 800c260:	4629      	mov	r1, r5
 800c262:	f7f4 f811 	bl	8000288 <__aeabi_dsub>
 800c266:	a37e      	add	r3, pc, #504	; (adr r3, 800c460 <__ieee754_rem_pio2+0x318>)
 800c268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26c:	e7e0      	b.n	800c230 <__ieee754_rem_pio2+0xe8>
 800c26e:	4b87      	ldr	r3, [pc, #540]	; (800c48c <__ieee754_rem_pio2+0x344>)
 800c270:	4598      	cmp	r8, r3
 800c272:	f300 80d8 	bgt.w	800c426 <__ieee754_rem_pio2+0x2de>
 800c276:	f7fe fac7 	bl	800a808 <fabs>
 800c27a:	ec55 4b10 	vmov	r4, r5, d0
 800c27e:	ee10 0a10 	vmov	r0, s0
 800c282:	a379      	add	r3, pc, #484	; (adr r3, 800c468 <__ieee754_rem_pio2+0x320>)
 800c284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c288:	4629      	mov	r1, r5
 800c28a:	f7f4 f9b5 	bl	80005f8 <__aeabi_dmul>
 800c28e:	4b80      	ldr	r3, [pc, #512]	; (800c490 <__ieee754_rem_pio2+0x348>)
 800c290:	2200      	movs	r2, #0
 800c292:	f7f3 fffb 	bl	800028c <__adddf3>
 800c296:	f7f4 fc5f 	bl	8000b58 <__aeabi_d2iz>
 800c29a:	4683      	mov	fp, r0
 800c29c:	f7f4 f942 	bl	8000524 <__aeabi_i2d>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	ec43 2b18 	vmov	d8, r2, r3
 800c2a8:	a367      	add	r3, pc, #412	; (adr r3, 800c448 <__ieee754_rem_pio2+0x300>)
 800c2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ae:	f7f4 f9a3 	bl	80005f8 <__aeabi_dmul>
 800c2b2:	4602      	mov	r2, r0
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	f7f3 ffe5 	bl	8000288 <__aeabi_dsub>
 800c2be:	a364      	add	r3, pc, #400	; (adr r3, 800c450 <__ieee754_rem_pio2+0x308>)
 800c2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c4:	4606      	mov	r6, r0
 800c2c6:	460f      	mov	r7, r1
 800c2c8:	ec51 0b18 	vmov	r0, r1, d8
 800c2cc:	f7f4 f994 	bl	80005f8 <__aeabi_dmul>
 800c2d0:	f1bb 0f1f 	cmp.w	fp, #31
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460d      	mov	r5, r1
 800c2d8:	dc0d      	bgt.n	800c2f6 <__ieee754_rem_pio2+0x1ae>
 800c2da:	4b6e      	ldr	r3, [pc, #440]	; (800c494 <__ieee754_rem_pio2+0x34c>)
 800c2dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e4:	4543      	cmp	r3, r8
 800c2e6:	d006      	beq.n	800c2f6 <__ieee754_rem_pio2+0x1ae>
 800c2e8:	4622      	mov	r2, r4
 800c2ea:	462b      	mov	r3, r5
 800c2ec:	4630      	mov	r0, r6
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	f7f3 ffca 	bl	8000288 <__aeabi_dsub>
 800c2f4:	e00e      	b.n	800c314 <__ieee754_rem_pio2+0x1cc>
 800c2f6:	462b      	mov	r3, r5
 800c2f8:	4622      	mov	r2, r4
 800c2fa:	4630      	mov	r0, r6
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	f7f3 ffc3 	bl	8000288 <__aeabi_dsub>
 800c302:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c306:	9303      	str	r3, [sp, #12]
 800c308:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c30c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c310:	2b10      	cmp	r3, #16
 800c312:	dc02      	bgt.n	800c31a <__ieee754_rem_pio2+0x1d2>
 800c314:	e9ca 0100 	strd	r0, r1, [sl]
 800c318:	e039      	b.n	800c38e <__ieee754_rem_pio2+0x246>
 800c31a:	a34f      	add	r3, pc, #316	; (adr r3, 800c458 <__ieee754_rem_pio2+0x310>)
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	ec51 0b18 	vmov	r0, r1, d8
 800c324:	f7f4 f968 	bl	80005f8 <__aeabi_dmul>
 800c328:	4604      	mov	r4, r0
 800c32a:	460d      	mov	r5, r1
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	4630      	mov	r0, r6
 800c332:	4639      	mov	r1, r7
 800c334:	f7f3 ffa8 	bl	8000288 <__aeabi_dsub>
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	4680      	mov	r8, r0
 800c33e:	4689      	mov	r9, r1
 800c340:	4630      	mov	r0, r6
 800c342:	4639      	mov	r1, r7
 800c344:	f7f3 ffa0 	bl	8000288 <__aeabi_dsub>
 800c348:	4622      	mov	r2, r4
 800c34a:	462b      	mov	r3, r5
 800c34c:	f7f3 ff9c 	bl	8000288 <__aeabi_dsub>
 800c350:	a343      	add	r3, pc, #268	; (adr r3, 800c460 <__ieee754_rem_pio2+0x318>)
 800c352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c356:	4604      	mov	r4, r0
 800c358:	460d      	mov	r5, r1
 800c35a:	ec51 0b18 	vmov	r0, r1, d8
 800c35e:	f7f4 f94b 	bl	80005f8 <__aeabi_dmul>
 800c362:	4622      	mov	r2, r4
 800c364:	462b      	mov	r3, r5
 800c366:	f7f3 ff8f 	bl	8000288 <__aeabi_dsub>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	4604      	mov	r4, r0
 800c370:	460d      	mov	r5, r1
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	f7f3 ff87 	bl	8000288 <__aeabi_dsub>
 800c37a:	9a03      	ldr	r2, [sp, #12]
 800c37c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	2b31      	cmp	r3, #49	; 0x31
 800c384:	dc24      	bgt.n	800c3d0 <__ieee754_rem_pio2+0x288>
 800c386:	e9ca 0100 	strd	r0, r1, [sl]
 800c38a:	4646      	mov	r6, r8
 800c38c:	464f      	mov	r7, r9
 800c38e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c392:	4630      	mov	r0, r6
 800c394:	4642      	mov	r2, r8
 800c396:	464b      	mov	r3, r9
 800c398:	4639      	mov	r1, r7
 800c39a:	f7f3 ff75 	bl	8000288 <__aeabi_dsub>
 800c39e:	462b      	mov	r3, r5
 800c3a0:	4622      	mov	r2, r4
 800c3a2:	f7f3 ff71 	bl	8000288 <__aeabi_dsub>
 800c3a6:	9b02      	ldr	r3, [sp, #8]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c3ae:	f6bf af0b 	bge.w	800c1c8 <__ieee754_rem_pio2+0x80>
 800c3b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c3b6:	f8ca 3004 	str.w	r3, [sl, #4]
 800c3ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c3be:	f8ca 8000 	str.w	r8, [sl]
 800c3c2:	f8ca 0008 	str.w	r0, [sl, #8]
 800c3c6:	f8ca 300c 	str.w	r3, [sl, #12]
 800c3ca:	f1cb 0b00 	rsb	fp, fp, #0
 800c3ce:	e6fb      	b.n	800c1c8 <__ieee754_rem_pio2+0x80>
 800c3d0:	a327      	add	r3, pc, #156	; (adr r3, 800c470 <__ieee754_rem_pio2+0x328>)
 800c3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d6:	ec51 0b18 	vmov	r0, r1, d8
 800c3da:	f7f4 f90d 	bl	80005f8 <__aeabi_dmul>
 800c3de:	4604      	mov	r4, r0
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	4640      	mov	r0, r8
 800c3e8:	4649      	mov	r1, r9
 800c3ea:	f7f3 ff4d 	bl	8000288 <__aeabi_dsub>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	460f      	mov	r7, r1
 800c3f6:	4640      	mov	r0, r8
 800c3f8:	4649      	mov	r1, r9
 800c3fa:	f7f3 ff45 	bl	8000288 <__aeabi_dsub>
 800c3fe:	4622      	mov	r2, r4
 800c400:	462b      	mov	r3, r5
 800c402:	f7f3 ff41 	bl	8000288 <__aeabi_dsub>
 800c406:	a31c      	add	r3, pc, #112	; (adr r3, 800c478 <__ieee754_rem_pio2+0x330>)
 800c408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40c:	4604      	mov	r4, r0
 800c40e:	460d      	mov	r5, r1
 800c410:	ec51 0b18 	vmov	r0, r1, d8
 800c414:	f7f4 f8f0 	bl	80005f8 <__aeabi_dmul>
 800c418:	4622      	mov	r2, r4
 800c41a:	462b      	mov	r3, r5
 800c41c:	f7f3 ff34 	bl	8000288 <__aeabi_dsub>
 800c420:	4604      	mov	r4, r0
 800c422:	460d      	mov	r5, r1
 800c424:	e760      	b.n	800c2e8 <__ieee754_rem_pio2+0x1a0>
 800c426:	4b1c      	ldr	r3, [pc, #112]	; (800c498 <__ieee754_rem_pio2+0x350>)
 800c428:	4598      	cmp	r8, r3
 800c42a:	dd37      	ble.n	800c49c <__ieee754_rem_pio2+0x354>
 800c42c:	ee10 2a10 	vmov	r2, s0
 800c430:	462b      	mov	r3, r5
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	f7f3 ff27 	bl	8000288 <__aeabi_dsub>
 800c43a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c43e:	e9ca 0100 	strd	r0, r1, [sl]
 800c442:	e695      	b.n	800c170 <__ieee754_rem_pio2+0x28>
 800c444:	f3af 8000 	nop.w
 800c448:	54400000 	.word	0x54400000
 800c44c:	3ff921fb 	.word	0x3ff921fb
 800c450:	1a626331 	.word	0x1a626331
 800c454:	3dd0b461 	.word	0x3dd0b461
 800c458:	1a600000 	.word	0x1a600000
 800c45c:	3dd0b461 	.word	0x3dd0b461
 800c460:	2e037073 	.word	0x2e037073
 800c464:	3ba3198a 	.word	0x3ba3198a
 800c468:	6dc9c883 	.word	0x6dc9c883
 800c46c:	3fe45f30 	.word	0x3fe45f30
 800c470:	2e000000 	.word	0x2e000000
 800c474:	3ba3198a 	.word	0x3ba3198a
 800c478:	252049c1 	.word	0x252049c1
 800c47c:	397b839a 	.word	0x397b839a
 800c480:	3fe921fb 	.word	0x3fe921fb
 800c484:	4002d97b 	.word	0x4002d97b
 800c488:	3ff921fb 	.word	0x3ff921fb
 800c48c:	413921fb 	.word	0x413921fb
 800c490:	3fe00000 	.word	0x3fe00000
 800c494:	0800d260 	.word	0x0800d260
 800c498:	7fefffff 	.word	0x7fefffff
 800c49c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800c4a0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800c4a4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	460d      	mov	r5, r1
 800c4ac:	f7f4 fb54 	bl	8000b58 <__aeabi_d2iz>
 800c4b0:	f7f4 f838 	bl	8000524 <__aeabi_i2d>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c4c0:	f7f3 fee2 	bl	8000288 <__aeabi_dsub>
 800c4c4:	4b21      	ldr	r3, [pc, #132]	; (800c54c <__ieee754_rem_pio2+0x404>)
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f7f4 f896 	bl	80005f8 <__aeabi_dmul>
 800c4cc:	460d      	mov	r5, r1
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	f7f4 fb42 	bl	8000b58 <__aeabi_d2iz>
 800c4d4:	f7f4 f826 	bl	8000524 <__aeabi_i2d>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	4620      	mov	r0, r4
 800c4de:	4629      	mov	r1, r5
 800c4e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c4e4:	f7f3 fed0 	bl	8000288 <__aeabi_dsub>
 800c4e8:	4b18      	ldr	r3, [pc, #96]	; (800c54c <__ieee754_rem_pio2+0x404>)
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f7f4 f884 	bl	80005f8 <__aeabi_dmul>
 800c4f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c4f4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800c4f8:	2703      	movs	r7, #3
 800c4fa:	2400      	movs	r4, #0
 800c4fc:	2500      	movs	r5, #0
 800c4fe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800c502:	4622      	mov	r2, r4
 800c504:	462b      	mov	r3, r5
 800c506:	46b9      	mov	r9, r7
 800c508:	3f01      	subs	r7, #1
 800c50a:	f7f4 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d1f5      	bne.n	800c4fe <__ieee754_rem_pio2+0x3b6>
 800c512:	4b0f      	ldr	r3, [pc, #60]	; (800c550 <__ieee754_rem_pio2+0x408>)
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	2302      	movs	r3, #2
 800c518:	9300      	str	r3, [sp, #0]
 800c51a:	4632      	mov	r2, r6
 800c51c:	464b      	mov	r3, r9
 800c51e:	4651      	mov	r1, sl
 800c520:	a804      	add	r0, sp, #16
 800c522:	f000 f8c9 	bl	800c6b8 <__kernel_rem_pio2>
 800c526:	9b02      	ldr	r3, [sp, #8]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	4683      	mov	fp, r0
 800c52c:	f6bf ae4c 	bge.w	800c1c8 <__ieee754_rem_pio2+0x80>
 800c530:	e9da 2100 	ldrd	r2, r1, [sl]
 800c534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c538:	e9ca 2300 	strd	r2, r3, [sl]
 800c53c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c540:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c544:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c548:	e73f      	b.n	800c3ca <__ieee754_rem_pio2+0x282>
 800c54a:	bf00      	nop
 800c54c:	41700000 	.word	0x41700000
 800c550:	0800d2e0 	.word	0x0800d2e0
 800c554:	00000000 	.word	0x00000000

0800c558 <scalbn>:
 800c558:	b570      	push	{r4, r5, r6, lr}
 800c55a:	ec55 4b10 	vmov	r4, r5, d0
 800c55e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c562:	4606      	mov	r6, r0
 800c564:	462b      	mov	r3, r5
 800c566:	b999      	cbnz	r1, 800c590 <scalbn+0x38>
 800c568:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c56c:	4323      	orrs	r3, r4
 800c56e:	d03f      	beq.n	800c5f0 <scalbn+0x98>
 800c570:	4b35      	ldr	r3, [pc, #212]	; (800c648 <scalbn+0xf0>)
 800c572:	4629      	mov	r1, r5
 800c574:	ee10 0a10 	vmov	r0, s0
 800c578:	2200      	movs	r2, #0
 800c57a:	f7f4 f83d 	bl	80005f8 <__aeabi_dmul>
 800c57e:	4b33      	ldr	r3, [pc, #204]	; (800c64c <scalbn+0xf4>)
 800c580:	429e      	cmp	r6, r3
 800c582:	4604      	mov	r4, r0
 800c584:	460d      	mov	r5, r1
 800c586:	da10      	bge.n	800c5aa <scalbn+0x52>
 800c588:	a327      	add	r3, pc, #156	; (adr r3, 800c628 <scalbn+0xd0>)
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	e01f      	b.n	800c5d0 <scalbn+0x78>
 800c590:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c594:	4291      	cmp	r1, r2
 800c596:	d10c      	bne.n	800c5b2 <scalbn+0x5a>
 800c598:	ee10 2a10 	vmov	r2, s0
 800c59c:	4620      	mov	r0, r4
 800c59e:	4629      	mov	r1, r5
 800c5a0:	f7f3 fe74 	bl	800028c <__adddf3>
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	460d      	mov	r5, r1
 800c5a8:	e022      	b.n	800c5f0 <scalbn+0x98>
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c5b0:	3936      	subs	r1, #54	; 0x36
 800c5b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c5b6:	4296      	cmp	r6, r2
 800c5b8:	dd0d      	ble.n	800c5d6 <scalbn+0x7e>
 800c5ba:	2d00      	cmp	r5, #0
 800c5bc:	a11c      	add	r1, pc, #112	; (adr r1, 800c630 <scalbn+0xd8>)
 800c5be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5c2:	da02      	bge.n	800c5ca <scalbn+0x72>
 800c5c4:	a11c      	add	r1, pc, #112	; (adr r1, 800c638 <scalbn+0xe0>)
 800c5c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ca:	a319      	add	r3, pc, #100	; (adr r3, 800c630 <scalbn+0xd8>)
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	f7f4 f812 	bl	80005f8 <__aeabi_dmul>
 800c5d4:	e7e6      	b.n	800c5a4 <scalbn+0x4c>
 800c5d6:	1872      	adds	r2, r6, r1
 800c5d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c5dc:	428a      	cmp	r2, r1
 800c5de:	dcec      	bgt.n	800c5ba <scalbn+0x62>
 800c5e0:	2a00      	cmp	r2, #0
 800c5e2:	dd08      	ble.n	800c5f6 <scalbn+0x9e>
 800c5e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5f0:	ec45 4b10 	vmov	d0, r4, r5
 800c5f4:	bd70      	pop	{r4, r5, r6, pc}
 800c5f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c5fa:	da08      	bge.n	800c60e <scalbn+0xb6>
 800c5fc:	2d00      	cmp	r5, #0
 800c5fe:	a10a      	add	r1, pc, #40	; (adr r1, 800c628 <scalbn+0xd0>)
 800c600:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c604:	dac0      	bge.n	800c588 <scalbn+0x30>
 800c606:	a10e      	add	r1, pc, #56	; (adr r1, 800c640 <scalbn+0xe8>)
 800c608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c60c:	e7bc      	b.n	800c588 <scalbn+0x30>
 800c60e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c612:	3236      	adds	r2, #54	; 0x36
 800c614:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c618:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c61c:	4620      	mov	r0, r4
 800c61e:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <scalbn+0xf8>)
 800c620:	2200      	movs	r2, #0
 800c622:	e7d5      	b.n	800c5d0 <scalbn+0x78>
 800c624:	f3af 8000 	nop.w
 800c628:	c2f8f359 	.word	0xc2f8f359
 800c62c:	01a56e1f 	.word	0x01a56e1f
 800c630:	8800759c 	.word	0x8800759c
 800c634:	7e37e43c 	.word	0x7e37e43c
 800c638:	8800759c 	.word	0x8800759c
 800c63c:	fe37e43c 	.word	0xfe37e43c
 800c640:	c2f8f359 	.word	0xc2f8f359
 800c644:	81a56e1f 	.word	0x81a56e1f
 800c648:	43500000 	.word	0x43500000
 800c64c:	ffff3cb0 	.word	0xffff3cb0
 800c650:	3c900000 	.word	0x3c900000

0800c654 <with_errno>:
 800c654:	b570      	push	{r4, r5, r6, lr}
 800c656:	4604      	mov	r4, r0
 800c658:	460d      	mov	r5, r1
 800c65a:	4616      	mov	r6, r2
 800c65c:	f7fc f880 	bl	8008760 <__errno>
 800c660:	4629      	mov	r1, r5
 800c662:	6006      	str	r6, [r0, #0]
 800c664:	4620      	mov	r0, r4
 800c666:	bd70      	pop	{r4, r5, r6, pc}

0800c668 <xflow>:
 800c668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c66a:	4614      	mov	r4, r2
 800c66c:	461d      	mov	r5, r3
 800c66e:	b108      	cbz	r0, 800c674 <xflow+0xc>
 800c670:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c674:	e9cd 2300 	strd	r2, r3, [sp]
 800c678:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c67c:	4620      	mov	r0, r4
 800c67e:	4629      	mov	r1, r5
 800c680:	f7f3 ffba 	bl	80005f8 <__aeabi_dmul>
 800c684:	2222      	movs	r2, #34	; 0x22
 800c686:	b003      	add	sp, #12
 800c688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c68c:	f7ff bfe2 	b.w	800c654 <with_errno>

0800c690 <__math_uflow>:
 800c690:	b508      	push	{r3, lr}
 800c692:	2200      	movs	r2, #0
 800c694:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c698:	f7ff ffe6 	bl	800c668 <xflow>
 800c69c:	ec41 0b10 	vmov	d0, r0, r1
 800c6a0:	bd08      	pop	{r3, pc}

0800c6a2 <__math_oflow>:
 800c6a2:	b508      	push	{r3, lr}
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c6aa:	f7ff ffdd 	bl	800c668 <xflow>
 800c6ae:	ec41 0b10 	vmov	d0, r0, r1
 800c6b2:	bd08      	pop	{r3, pc}
 800c6b4:	0000      	movs	r0, r0
	...

0800c6b8 <__kernel_rem_pio2>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	ed2d 8b02 	vpush	{d8}
 800c6c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c6c4:	f112 0f14 	cmn.w	r2, #20
 800c6c8:	9306      	str	r3, [sp, #24]
 800c6ca:	9104      	str	r1, [sp, #16]
 800c6cc:	4bc2      	ldr	r3, [pc, #776]	; (800c9d8 <__kernel_rem_pio2+0x320>)
 800c6ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800c6d0:	9009      	str	r0, [sp, #36]	; 0x24
 800c6d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6d6:	9300      	str	r3, [sp, #0]
 800c6d8:	9b06      	ldr	r3, [sp, #24]
 800c6da:	f103 33ff 	add.w	r3, r3, #4294967295
 800c6de:	bfa8      	it	ge
 800c6e0:	1ed4      	subge	r4, r2, #3
 800c6e2:	9305      	str	r3, [sp, #20]
 800c6e4:	bfb2      	itee	lt
 800c6e6:	2400      	movlt	r4, #0
 800c6e8:	2318      	movge	r3, #24
 800c6ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800c6ee:	f06f 0317 	mvn.w	r3, #23
 800c6f2:	fb04 3303 	mla	r3, r4, r3, r3
 800c6f6:	eb03 0a02 	add.w	sl, r3, r2
 800c6fa:	9b00      	ldr	r3, [sp, #0]
 800c6fc:	9a05      	ldr	r2, [sp, #20]
 800c6fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800c9c8 <__kernel_rem_pio2+0x310>
 800c702:	eb03 0802 	add.w	r8, r3, r2
 800c706:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c708:	1aa7      	subs	r7, r4, r2
 800c70a:	ae20      	add	r6, sp, #128	; 0x80
 800c70c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c710:	2500      	movs	r5, #0
 800c712:	4545      	cmp	r5, r8
 800c714:	dd13      	ble.n	800c73e <__kernel_rem_pio2+0x86>
 800c716:	9b06      	ldr	r3, [sp, #24]
 800c718:	aa20      	add	r2, sp, #128	; 0x80
 800c71a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c71e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800c722:	f04f 0800 	mov.w	r8, #0
 800c726:	9b00      	ldr	r3, [sp, #0]
 800c728:	4598      	cmp	r8, r3
 800c72a:	dc31      	bgt.n	800c790 <__kernel_rem_pio2+0xd8>
 800c72c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800c9c8 <__kernel_rem_pio2+0x310>
 800c730:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c734:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c738:	462f      	mov	r7, r5
 800c73a:	2600      	movs	r6, #0
 800c73c:	e01b      	b.n	800c776 <__kernel_rem_pio2+0xbe>
 800c73e:	42ef      	cmn	r7, r5
 800c740:	d407      	bmi.n	800c752 <__kernel_rem_pio2+0x9a>
 800c742:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c746:	f7f3 feed 	bl	8000524 <__aeabi_i2d>
 800c74a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c74e:	3501      	adds	r5, #1
 800c750:	e7df      	b.n	800c712 <__kernel_rem_pio2+0x5a>
 800c752:	ec51 0b18 	vmov	r0, r1, d8
 800c756:	e7f8      	b.n	800c74a <__kernel_rem_pio2+0x92>
 800c758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c75c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c760:	f7f3 ff4a 	bl	80005f8 <__aeabi_dmul>
 800c764:	4602      	mov	r2, r0
 800c766:	460b      	mov	r3, r1
 800c768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c76c:	f7f3 fd8e 	bl	800028c <__adddf3>
 800c770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c774:	3601      	adds	r6, #1
 800c776:	9b05      	ldr	r3, [sp, #20]
 800c778:	429e      	cmp	r6, r3
 800c77a:	f1a7 0708 	sub.w	r7, r7, #8
 800c77e:	ddeb      	ble.n	800c758 <__kernel_rem_pio2+0xa0>
 800c780:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c784:	f108 0801 	add.w	r8, r8, #1
 800c788:	ecab 7b02 	vstmia	fp!, {d7}
 800c78c:	3508      	adds	r5, #8
 800c78e:	e7ca      	b.n	800c726 <__kernel_rem_pio2+0x6e>
 800c790:	9b00      	ldr	r3, [sp, #0]
 800c792:	aa0c      	add	r2, sp, #48	; 0x30
 800c794:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c798:	930b      	str	r3, [sp, #44]	; 0x2c
 800c79a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800c79c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c7a0:	9c00      	ldr	r4, [sp, #0]
 800c7a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c7a4:	00e3      	lsls	r3, r4, #3
 800c7a6:	9308      	str	r3, [sp, #32]
 800c7a8:	ab98      	add	r3, sp, #608	; 0x260
 800c7aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c7ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c7b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800c7b6:	ab70      	add	r3, sp, #448	; 0x1c0
 800c7b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c7bc:	46c3      	mov	fp, r8
 800c7be:	46a1      	mov	r9, r4
 800c7c0:	f1b9 0f00 	cmp.w	r9, #0
 800c7c4:	f1a5 0508 	sub.w	r5, r5, #8
 800c7c8:	dc77      	bgt.n	800c8ba <__kernel_rem_pio2+0x202>
 800c7ca:	ec47 6b10 	vmov	d0, r6, r7
 800c7ce:	4650      	mov	r0, sl
 800c7d0:	f7ff fec2 	bl	800c558 <scalbn>
 800c7d4:	ec57 6b10 	vmov	r6, r7, d0
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c7de:	ee10 0a10 	vmov	r0, s0
 800c7e2:	4639      	mov	r1, r7
 800c7e4:	f7f3 ff08 	bl	80005f8 <__aeabi_dmul>
 800c7e8:	ec41 0b10 	vmov	d0, r0, r1
 800c7ec:	f000 fab4 	bl	800cd58 <floor>
 800c7f0:	4b7a      	ldr	r3, [pc, #488]	; (800c9dc <__kernel_rem_pio2+0x324>)
 800c7f2:	ec51 0b10 	vmov	r0, r1, d0
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	f7f3 fefe 	bl	80005f8 <__aeabi_dmul>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	4630      	mov	r0, r6
 800c802:	4639      	mov	r1, r7
 800c804:	f7f3 fd40 	bl	8000288 <__aeabi_dsub>
 800c808:	460f      	mov	r7, r1
 800c80a:	4606      	mov	r6, r0
 800c80c:	f7f4 f9a4 	bl	8000b58 <__aeabi_d2iz>
 800c810:	9002      	str	r0, [sp, #8]
 800c812:	f7f3 fe87 	bl	8000524 <__aeabi_i2d>
 800c816:	4602      	mov	r2, r0
 800c818:	460b      	mov	r3, r1
 800c81a:	4630      	mov	r0, r6
 800c81c:	4639      	mov	r1, r7
 800c81e:	f7f3 fd33 	bl	8000288 <__aeabi_dsub>
 800c822:	f1ba 0f00 	cmp.w	sl, #0
 800c826:	4606      	mov	r6, r0
 800c828:	460f      	mov	r7, r1
 800c82a:	dd6d      	ble.n	800c908 <__kernel_rem_pio2+0x250>
 800c82c:	1e61      	subs	r1, r4, #1
 800c82e:	ab0c      	add	r3, sp, #48	; 0x30
 800c830:	9d02      	ldr	r5, [sp, #8]
 800c832:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c836:	f1ca 0018 	rsb	r0, sl, #24
 800c83a:	fa43 f200 	asr.w	r2, r3, r0
 800c83e:	4415      	add	r5, r2
 800c840:	4082      	lsls	r2, r0
 800c842:	1a9b      	subs	r3, r3, r2
 800c844:	aa0c      	add	r2, sp, #48	; 0x30
 800c846:	9502      	str	r5, [sp, #8]
 800c848:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c84c:	f1ca 0217 	rsb	r2, sl, #23
 800c850:	fa43 fb02 	asr.w	fp, r3, r2
 800c854:	f1bb 0f00 	cmp.w	fp, #0
 800c858:	dd65      	ble.n	800c926 <__kernel_rem_pio2+0x26e>
 800c85a:	9b02      	ldr	r3, [sp, #8]
 800c85c:	2200      	movs	r2, #0
 800c85e:	3301      	adds	r3, #1
 800c860:	9302      	str	r3, [sp, #8]
 800c862:	4615      	mov	r5, r2
 800c864:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c868:	4294      	cmp	r4, r2
 800c86a:	f300 809f 	bgt.w	800c9ac <__kernel_rem_pio2+0x2f4>
 800c86e:	f1ba 0f00 	cmp.w	sl, #0
 800c872:	dd07      	ble.n	800c884 <__kernel_rem_pio2+0x1cc>
 800c874:	f1ba 0f01 	cmp.w	sl, #1
 800c878:	f000 80c1 	beq.w	800c9fe <__kernel_rem_pio2+0x346>
 800c87c:	f1ba 0f02 	cmp.w	sl, #2
 800c880:	f000 80c7 	beq.w	800ca12 <__kernel_rem_pio2+0x35a>
 800c884:	f1bb 0f02 	cmp.w	fp, #2
 800c888:	d14d      	bne.n	800c926 <__kernel_rem_pio2+0x26e>
 800c88a:	4632      	mov	r2, r6
 800c88c:	463b      	mov	r3, r7
 800c88e:	4954      	ldr	r1, [pc, #336]	; (800c9e0 <__kernel_rem_pio2+0x328>)
 800c890:	2000      	movs	r0, #0
 800c892:	f7f3 fcf9 	bl	8000288 <__aeabi_dsub>
 800c896:	4606      	mov	r6, r0
 800c898:	460f      	mov	r7, r1
 800c89a:	2d00      	cmp	r5, #0
 800c89c:	d043      	beq.n	800c926 <__kernel_rem_pio2+0x26e>
 800c89e:	4650      	mov	r0, sl
 800c8a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800c9d0 <__kernel_rem_pio2+0x318>
 800c8a4:	f7ff fe58 	bl	800c558 <scalbn>
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	4639      	mov	r1, r7
 800c8ac:	ec53 2b10 	vmov	r2, r3, d0
 800c8b0:	f7f3 fcea 	bl	8000288 <__aeabi_dsub>
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	460f      	mov	r7, r1
 800c8b8:	e035      	b.n	800c926 <__kernel_rem_pio2+0x26e>
 800c8ba:	4b4a      	ldr	r3, [pc, #296]	; (800c9e4 <__kernel_rem_pio2+0x32c>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	4630      	mov	r0, r6
 800c8c0:	4639      	mov	r1, r7
 800c8c2:	f7f3 fe99 	bl	80005f8 <__aeabi_dmul>
 800c8c6:	f7f4 f947 	bl	8000b58 <__aeabi_d2iz>
 800c8ca:	f7f3 fe2b 	bl	8000524 <__aeabi_i2d>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	ec43 2b18 	vmov	d8, r2, r3
 800c8d6:	4b44      	ldr	r3, [pc, #272]	; (800c9e8 <__kernel_rem_pio2+0x330>)
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f7f3 fe8d 	bl	80005f8 <__aeabi_dmul>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	4639      	mov	r1, r7
 800c8e6:	f7f3 fccf 	bl	8000288 <__aeabi_dsub>
 800c8ea:	f7f4 f935 	bl	8000b58 <__aeabi_d2iz>
 800c8ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8f2:	f84b 0b04 	str.w	r0, [fp], #4
 800c8f6:	ec51 0b18 	vmov	r0, r1, d8
 800c8fa:	f7f3 fcc7 	bl	800028c <__adddf3>
 800c8fe:	f109 39ff 	add.w	r9, r9, #4294967295
 800c902:	4606      	mov	r6, r0
 800c904:	460f      	mov	r7, r1
 800c906:	e75b      	b.n	800c7c0 <__kernel_rem_pio2+0x108>
 800c908:	d106      	bne.n	800c918 <__kernel_rem_pio2+0x260>
 800c90a:	1e63      	subs	r3, r4, #1
 800c90c:	aa0c      	add	r2, sp, #48	; 0x30
 800c90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c912:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800c916:	e79d      	b.n	800c854 <__kernel_rem_pio2+0x19c>
 800c918:	4b34      	ldr	r3, [pc, #208]	; (800c9ec <__kernel_rem_pio2+0x334>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	f7f4 f8f2 	bl	8000b04 <__aeabi_dcmpge>
 800c920:	2800      	cmp	r0, #0
 800c922:	d140      	bne.n	800c9a6 <__kernel_rem_pio2+0x2ee>
 800c924:	4683      	mov	fp, r0
 800c926:	2200      	movs	r2, #0
 800c928:	2300      	movs	r3, #0
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f4 f8cb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c932:	2800      	cmp	r0, #0
 800c934:	f000 80c1 	beq.w	800caba <__kernel_rem_pio2+0x402>
 800c938:	1e65      	subs	r5, r4, #1
 800c93a:	462b      	mov	r3, r5
 800c93c:	2200      	movs	r2, #0
 800c93e:	9900      	ldr	r1, [sp, #0]
 800c940:	428b      	cmp	r3, r1
 800c942:	da6d      	bge.n	800ca20 <__kernel_rem_pio2+0x368>
 800c944:	2a00      	cmp	r2, #0
 800c946:	f000 808a 	beq.w	800ca5e <__kernel_rem_pio2+0x3a6>
 800c94a:	ab0c      	add	r3, sp, #48	; 0x30
 800c94c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c950:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 80ae 	beq.w	800cab6 <__kernel_rem_pio2+0x3fe>
 800c95a:	4650      	mov	r0, sl
 800c95c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800c9d0 <__kernel_rem_pio2+0x318>
 800c960:	f7ff fdfa 	bl	800c558 <scalbn>
 800c964:	1c6b      	adds	r3, r5, #1
 800c966:	00da      	lsls	r2, r3, #3
 800c968:	9205      	str	r2, [sp, #20]
 800c96a:	ec57 6b10 	vmov	r6, r7, d0
 800c96e:	aa70      	add	r2, sp, #448	; 0x1c0
 800c970:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800c9e4 <__kernel_rem_pio2+0x32c>
 800c974:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800c978:	462c      	mov	r4, r5
 800c97a:	f04f 0800 	mov.w	r8, #0
 800c97e:	2c00      	cmp	r4, #0
 800c980:	f280 80d4 	bge.w	800cb2c <__kernel_rem_pio2+0x474>
 800c984:	462c      	mov	r4, r5
 800c986:	2c00      	cmp	r4, #0
 800c988:	f2c0 8102 	blt.w	800cb90 <__kernel_rem_pio2+0x4d8>
 800c98c:	4b18      	ldr	r3, [pc, #96]	; (800c9f0 <__kernel_rem_pio2+0x338>)
 800c98e:	461e      	mov	r6, r3
 800c990:	ab70      	add	r3, sp, #448	; 0x1c0
 800c992:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800c996:	1b2b      	subs	r3, r5, r4
 800c998:	f04f 0900 	mov.w	r9, #0
 800c99c:	f04f 0a00 	mov.w	sl, #0
 800c9a0:	2700      	movs	r7, #0
 800c9a2:	9306      	str	r3, [sp, #24]
 800c9a4:	e0e6      	b.n	800cb74 <__kernel_rem_pio2+0x4bc>
 800c9a6:	f04f 0b02 	mov.w	fp, #2
 800c9aa:	e756      	b.n	800c85a <__kernel_rem_pio2+0x1a2>
 800c9ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c9b0:	bb05      	cbnz	r5, 800c9f4 <__kernel_rem_pio2+0x33c>
 800c9b2:	b123      	cbz	r3, 800c9be <__kernel_rem_pio2+0x306>
 800c9b4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c9b8:	f8c8 3000 	str.w	r3, [r8]
 800c9bc:	2301      	movs	r3, #1
 800c9be:	3201      	adds	r2, #1
 800c9c0:	f108 0804 	add.w	r8, r8, #4
 800c9c4:	461d      	mov	r5, r3
 800c9c6:	e74f      	b.n	800c868 <__kernel_rem_pio2+0x1b0>
	...
 800c9d4:	3ff00000 	.word	0x3ff00000
 800c9d8:	0800d428 	.word	0x0800d428
 800c9dc:	40200000 	.word	0x40200000
 800c9e0:	3ff00000 	.word	0x3ff00000
 800c9e4:	3e700000 	.word	0x3e700000
 800c9e8:	41700000 	.word	0x41700000
 800c9ec:	3fe00000 	.word	0x3fe00000
 800c9f0:	0800d3e8 	.word	0x0800d3e8
 800c9f4:	1acb      	subs	r3, r1, r3
 800c9f6:	f8c8 3000 	str.w	r3, [r8]
 800c9fa:	462b      	mov	r3, r5
 800c9fc:	e7df      	b.n	800c9be <__kernel_rem_pio2+0x306>
 800c9fe:	1e62      	subs	r2, r4, #1
 800ca00:	ab0c      	add	r3, sp, #48	; 0x30
 800ca02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ca0a:	a90c      	add	r1, sp, #48	; 0x30
 800ca0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ca10:	e738      	b.n	800c884 <__kernel_rem_pio2+0x1cc>
 800ca12:	1e62      	subs	r2, r4, #1
 800ca14:	ab0c      	add	r3, sp, #48	; 0x30
 800ca16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca1a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ca1e:	e7f4      	b.n	800ca0a <__kernel_rem_pio2+0x352>
 800ca20:	a90c      	add	r1, sp, #48	; 0x30
 800ca22:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	430a      	orrs	r2, r1
 800ca2a:	e788      	b.n	800c93e <__kernel_rem_pio2+0x286>
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ca32:	2900      	cmp	r1, #0
 800ca34:	d0fa      	beq.n	800ca2c <__kernel_rem_pio2+0x374>
 800ca36:	9a08      	ldr	r2, [sp, #32]
 800ca38:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ca3c:	446a      	add	r2, sp
 800ca3e:	3a98      	subs	r2, #152	; 0x98
 800ca40:	9208      	str	r2, [sp, #32]
 800ca42:	9a06      	ldr	r2, [sp, #24]
 800ca44:	a920      	add	r1, sp, #128	; 0x80
 800ca46:	18a2      	adds	r2, r4, r2
 800ca48:	18e3      	adds	r3, r4, r3
 800ca4a:	f104 0801 	add.w	r8, r4, #1
 800ca4e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ca52:	9302      	str	r3, [sp, #8]
 800ca54:	9b02      	ldr	r3, [sp, #8]
 800ca56:	4543      	cmp	r3, r8
 800ca58:	da04      	bge.n	800ca64 <__kernel_rem_pio2+0x3ac>
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	e6a2      	b.n	800c7a4 <__kernel_rem_pio2+0xec>
 800ca5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca60:	2301      	movs	r3, #1
 800ca62:	e7e4      	b.n	800ca2e <__kernel_rem_pio2+0x376>
 800ca64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ca6a:	f7f3 fd5b 	bl	8000524 <__aeabi_i2d>
 800ca6e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ca72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca74:	46ab      	mov	fp, r5
 800ca76:	461c      	mov	r4, r3
 800ca78:	f04f 0900 	mov.w	r9, #0
 800ca7c:	2600      	movs	r6, #0
 800ca7e:	2700      	movs	r7, #0
 800ca80:	9b05      	ldr	r3, [sp, #20]
 800ca82:	4599      	cmp	r9, r3
 800ca84:	dd06      	ble.n	800ca94 <__kernel_rem_pio2+0x3dc>
 800ca86:	9b08      	ldr	r3, [sp, #32]
 800ca88:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ca8c:	f108 0801 	add.w	r8, r8, #1
 800ca90:	9308      	str	r3, [sp, #32]
 800ca92:	e7df      	b.n	800ca54 <__kernel_rem_pio2+0x39c>
 800ca94:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ca98:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ca9c:	f7f3 fdac 	bl	80005f8 <__aeabi_dmul>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4630      	mov	r0, r6
 800caa6:	4639      	mov	r1, r7
 800caa8:	f7f3 fbf0 	bl	800028c <__adddf3>
 800caac:	f109 0901 	add.w	r9, r9, #1
 800cab0:	4606      	mov	r6, r0
 800cab2:	460f      	mov	r7, r1
 800cab4:	e7e4      	b.n	800ca80 <__kernel_rem_pio2+0x3c8>
 800cab6:	3d01      	subs	r5, #1
 800cab8:	e747      	b.n	800c94a <__kernel_rem_pio2+0x292>
 800caba:	ec47 6b10 	vmov	d0, r6, r7
 800cabe:	f1ca 0000 	rsb	r0, sl, #0
 800cac2:	f7ff fd49 	bl	800c558 <scalbn>
 800cac6:	ec57 6b10 	vmov	r6, r7, d0
 800caca:	4ba0      	ldr	r3, [pc, #640]	; (800cd4c <__kernel_rem_pio2+0x694>)
 800cacc:	ee10 0a10 	vmov	r0, s0
 800cad0:	2200      	movs	r2, #0
 800cad2:	4639      	mov	r1, r7
 800cad4:	f7f4 f816 	bl	8000b04 <__aeabi_dcmpge>
 800cad8:	b1f8      	cbz	r0, 800cb1a <__kernel_rem_pio2+0x462>
 800cada:	4b9d      	ldr	r3, [pc, #628]	; (800cd50 <__kernel_rem_pio2+0x698>)
 800cadc:	2200      	movs	r2, #0
 800cade:	4630      	mov	r0, r6
 800cae0:	4639      	mov	r1, r7
 800cae2:	f7f3 fd89 	bl	80005f8 <__aeabi_dmul>
 800cae6:	f7f4 f837 	bl	8000b58 <__aeabi_d2iz>
 800caea:	4680      	mov	r8, r0
 800caec:	f7f3 fd1a 	bl	8000524 <__aeabi_i2d>
 800caf0:	4b96      	ldr	r3, [pc, #600]	; (800cd4c <__kernel_rem_pio2+0x694>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	f7f3 fd80 	bl	80005f8 <__aeabi_dmul>
 800caf8:	460b      	mov	r3, r1
 800cafa:	4602      	mov	r2, r0
 800cafc:	4639      	mov	r1, r7
 800cafe:	4630      	mov	r0, r6
 800cb00:	f7f3 fbc2 	bl	8000288 <__aeabi_dsub>
 800cb04:	f7f4 f828 	bl	8000b58 <__aeabi_d2iz>
 800cb08:	1c65      	adds	r5, r4, #1
 800cb0a:	ab0c      	add	r3, sp, #48	; 0x30
 800cb0c:	f10a 0a18 	add.w	sl, sl, #24
 800cb10:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cb14:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cb18:	e71f      	b.n	800c95a <__kernel_rem_pio2+0x2a2>
 800cb1a:	4630      	mov	r0, r6
 800cb1c:	4639      	mov	r1, r7
 800cb1e:	f7f4 f81b 	bl	8000b58 <__aeabi_d2iz>
 800cb22:	ab0c      	add	r3, sp, #48	; 0x30
 800cb24:	4625      	mov	r5, r4
 800cb26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cb2a:	e716      	b.n	800c95a <__kernel_rem_pio2+0x2a2>
 800cb2c:	ab0c      	add	r3, sp, #48	; 0x30
 800cb2e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cb32:	f7f3 fcf7 	bl	8000524 <__aeabi_i2d>
 800cb36:	4632      	mov	r2, r6
 800cb38:	463b      	mov	r3, r7
 800cb3a:	f7f3 fd5d 	bl	80005f8 <__aeabi_dmul>
 800cb3e:	4642      	mov	r2, r8
 800cb40:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800cb44:	464b      	mov	r3, r9
 800cb46:	4630      	mov	r0, r6
 800cb48:	4639      	mov	r1, r7
 800cb4a:	f7f3 fd55 	bl	80005f8 <__aeabi_dmul>
 800cb4e:	3c01      	subs	r4, #1
 800cb50:	4606      	mov	r6, r0
 800cb52:	460f      	mov	r7, r1
 800cb54:	e713      	b.n	800c97e <__kernel_rem_pio2+0x2c6>
 800cb56:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800cb5a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800cb5e:	f7f3 fd4b 	bl	80005f8 <__aeabi_dmul>
 800cb62:	4602      	mov	r2, r0
 800cb64:	460b      	mov	r3, r1
 800cb66:	4648      	mov	r0, r9
 800cb68:	4651      	mov	r1, sl
 800cb6a:	f7f3 fb8f 	bl	800028c <__adddf3>
 800cb6e:	3701      	adds	r7, #1
 800cb70:	4681      	mov	r9, r0
 800cb72:	468a      	mov	sl, r1
 800cb74:	9b00      	ldr	r3, [sp, #0]
 800cb76:	429f      	cmp	r7, r3
 800cb78:	dc02      	bgt.n	800cb80 <__kernel_rem_pio2+0x4c8>
 800cb7a:	9b06      	ldr	r3, [sp, #24]
 800cb7c:	429f      	cmp	r7, r3
 800cb7e:	ddea      	ble.n	800cb56 <__kernel_rem_pio2+0x49e>
 800cb80:	9a06      	ldr	r2, [sp, #24]
 800cb82:	ab48      	add	r3, sp, #288	; 0x120
 800cb84:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800cb88:	e9c6 9a00 	strd	r9, sl, [r6]
 800cb8c:	3c01      	subs	r4, #1
 800cb8e:	e6fa      	b.n	800c986 <__kernel_rem_pio2+0x2ce>
 800cb90:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	dc0b      	bgt.n	800cbae <__kernel_rem_pio2+0x4f6>
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	dc39      	bgt.n	800cc0e <__kernel_rem_pio2+0x556>
 800cb9a:	d05d      	beq.n	800cc58 <__kernel_rem_pio2+0x5a0>
 800cb9c:	9b02      	ldr	r3, [sp, #8]
 800cb9e:	f003 0007 	and.w	r0, r3, #7
 800cba2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cba6:	ecbd 8b02 	vpop	{d8}
 800cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cbb0:	2b03      	cmp	r3, #3
 800cbb2:	d1f3      	bne.n	800cb9c <__kernel_rem_pio2+0x4e4>
 800cbb4:	9b05      	ldr	r3, [sp, #20]
 800cbb6:	9500      	str	r5, [sp, #0]
 800cbb8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cbbc:	eb0d 0403 	add.w	r4, sp, r3
 800cbc0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800cbc4:	46a2      	mov	sl, r4
 800cbc6:	9b00      	ldr	r3, [sp, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f1aa 0a08 	sub.w	sl, sl, #8
 800cbce:	dc69      	bgt.n	800cca4 <__kernel_rem_pio2+0x5ec>
 800cbd0:	46aa      	mov	sl, r5
 800cbd2:	f1ba 0f01 	cmp.w	sl, #1
 800cbd6:	f1a4 0408 	sub.w	r4, r4, #8
 800cbda:	f300 8083 	bgt.w	800cce4 <__kernel_rem_pio2+0x62c>
 800cbde:	9c05      	ldr	r4, [sp, #20]
 800cbe0:	ab48      	add	r3, sp, #288	; 0x120
 800cbe2:	441c      	add	r4, r3
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	2100      	movs	r1, #0
 800cbe8:	2d01      	cmp	r5, #1
 800cbea:	f300 809a 	bgt.w	800cd22 <__kernel_rem_pio2+0x66a>
 800cbee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800cbf2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cbf6:	f1bb 0f00 	cmp.w	fp, #0
 800cbfa:	f040 8098 	bne.w	800cd2e <__kernel_rem_pio2+0x676>
 800cbfe:	9b04      	ldr	r3, [sp, #16]
 800cc00:	e9c3 7800 	strd	r7, r8, [r3]
 800cc04:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cc08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cc0c:	e7c6      	b.n	800cb9c <__kernel_rem_pio2+0x4e4>
 800cc0e:	9e05      	ldr	r6, [sp, #20]
 800cc10:	ab48      	add	r3, sp, #288	; 0x120
 800cc12:	441e      	add	r6, r3
 800cc14:	462c      	mov	r4, r5
 800cc16:	2000      	movs	r0, #0
 800cc18:	2100      	movs	r1, #0
 800cc1a:	2c00      	cmp	r4, #0
 800cc1c:	da33      	bge.n	800cc86 <__kernel_rem_pio2+0x5ce>
 800cc1e:	f1bb 0f00 	cmp.w	fp, #0
 800cc22:	d036      	beq.n	800cc92 <__kernel_rem_pio2+0x5da>
 800cc24:	4602      	mov	r2, r0
 800cc26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc2a:	9c04      	ldr	r4, [sp, #16]
 800cc2c:	e9c4 2300 	strd	r2, r3, [r4]
 800cc30:	4602      	mov	r2, r0
 800cc32:	460b      	mov	r3, r1
 800cc34:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800cc38:	f7f3 fb26 	bl	8000288 <__aeabi_dsub>
 800cc3c:	ae4a      	add	r6, sp, #296	; 0x128
 800cc3e:	2401      	movs	r4, #1
 800cc40:	42a5      	cmp	r5, r4
 800cc42:	da29      	bge.n	800cc98 <__kernel_rem_pio2+0x5e0>
 800cc44:	f1bb 0f00 	cmp.w	fp, #0
 800cc48:	d002      	beq.n	800cc50 <__kernel_rem_pio2+0x598>
 800cc4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc4e:	4619      	mov	r1, r3
 800cc50:	9b04      	ldr	r3, [sp, #16]
 800cc52:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cc56:	e7a1      	b.n	800cb9c <__kernel_rem_pio2+0x4e4>
 800cc58:	9c05      	ldr	r4, [sp, #20]
 800cc5a:	ab48      	add	r3, sp, #288	; 0x120
 800cc5c:	441c      	add	r4, r3
 800cc5e:	2000      	movs	r0, #0
 800cc60:	2100      	movs	r1, #0
 800cc62:	2d00      	cmp	r5, #0
 800cc64:	da09      	bge.n	800cc7a <__kernel_rem_pio2+0x5c2>
 800cc66:	f1bb 0f00 	cmp.w	fp, #0
 800cc6a:	d002      	beq.n	800cc72 <__kernel_rem_pio2+0x5ba>
 800cc6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc70:	4619      	mov	r1, r3
 800cc72:	9b04      	ldr	r3, [sp, #16]
 800cc74:	e9c3 0100 	strd	r0, r1, [r3]
 800cc78:	e790      	b.n	800cb9c <__kernel_rem_pio2+0x4e4>
 800cc7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cc7e:	f7f3 fb05 	bl	800028c <__adddf3>
 800cc82:	3d01      	subs	r5, #1
 800cc84:	e7ed      	b.n	800cc62 <__kernel_rem_pio2+0x5aa>
 800cc86:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cc8a:	f7f3 faff 	bl	800028c <__adddf3>
 800cc8e:	3c01      	subs	r4, #1
 800cc90:	e7c3      	b.n	800cc1a <__kernel_rem_pio2+0x562>
 800cc92:	4602      	mov	r2, r0
 800cc94:	460b      	mov	r3, r1
 800cc96:	e7c8      	b.n	800cc2a <__kernel_rem_pio2+0x572>
 800cc98:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cc9c:	f7f3 faf6 	bl	800028c <__adddf3>
 800cca0:	3401      	adds	r4, #1
 800cca2:	e7cd      	b.n	800cc40 <__kernel_rem_pio2+0x588>
 800cca4:	e9da 8900 	ldrd	r8, r9, [sl]
 800cca8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ccac:	9b00      	ldr	r3, [sp, #0]
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	4632      	mov	r2, r6
 800ccb4:	463b      	mov	r3, r7
 800ccb6:	4640      	mov	r0, r8
 800ccb8:	4649      	mov	r1, r9
 800ccba:	f7f3 fae7 	bl	800028c <__adddf3>
 800ccbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	4649      	mov	r1, r9
 800ccca:	f7f3 fadd 	bl	8000288 <__aeabi_dsub>
 800ccce:	4632      	mov	r2, r6
 800ccd0:	463b      	mov	r3, r7
 800ccd2:	f7f3 fadb 	bl	800028c <__adddf3>
 800ccd6:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ccda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ccde:	ed8a 7b00 	vstr	d7, [sl]
 800cce2:	e770      	b.n	800cbc6 <__kernel_rem_pio2+0x50e>
 800cce4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cce8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ccec:	4640      	mov	r0, r8
 800ccee:	4632      	mov	r2, r6
 800ccf0:	463b      	mov	r3, r7
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	f7f3 faca 	bl	800028c <__adddf3>
 800ccf8:	e9cd 0100 	strd	r0, r1, [sp]
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	460b      	mov	r3, r1
 800cd00:	4640      	mov	r0, r8
 800cd02:	4649      	mov	r1, r9
 800cd04:	f7f3 fac0 	bl	8000288 <__aeabi_dsub>
 800cd08:	4632      	mov	r2, r6
 800cd0a:	463b      	mov	r3, r7
 800cd0c:	f7f3 fabe 	bl	800028c <__adddf3>
 800cd10:	ed9d 7b00 	vldr	d7, [sp]
 800cd14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cd18:	ed84 7b00 	vstr	d7, [r4]
 800cd1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd20:	e757      	b.n	800cbd2 <__kernel_rem_pio2+0x51a>
 800cd22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cd26:	f7f3 fab1 	bl	800028c <__adddf3>
 800cd2a:	3d01      	subs	r5, #1
 800cd2c:	e75c      	b.n	800cbe8 <__kernel_rem_pio2+0x530>
 800cd2e:	9b04      	ldr	r3, [sp, #16]
 800cd30:	9a04      	ldr	r2, [sp, #16]
 800cd32:	601f      	str	r7, [r3, #0]
 800cd34:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800cd38:	605c      	str	r4, [r3, #4]
 800cd3a:	609d      	str	r5, [r3, #8]
 800cd3c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cd40:	60d3      	str	r3, [r2, #12]
 800cd42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd46:	6110      	str	r0, [r2, #16]
 800cd48:	6153      	str	r3, [r2, #20]
 800cd4a:	e727      	b.n	800cb9c <__kernel_rem_pio2+0x4e4>
 800cd4c:	41700000 	.word	0x41700000
 800cd50:	3e700000 	.word	0x3e700000
 800cd54:	00000000 	.word	0x00000000

0800cd58 <floor>:
 800cd58:	ec51 0b10 	vmov	r0, r1, d0
 800cd5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd64:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800cd68:	2e13      	cmp	r6, #19
 800cd6a:	ee10 5a10 	vmov	r5, s0
 800cd6e:	ee10 8a10 	vmov	r8, s0
 800cd72:	460c      	mov	r4, r1
 800cd74:	dc31      	bgt.n	800cdda <floor+0x82>
 800cd76:	2e00      	cmp	r6, #0
 800cd78:	da14      	bge.n	800cda4 <floor+0x4c>
 800cd7a:	a333      	add	r3, pc, #204	; (adr r3, 800ce48 <floor+0xf0>)
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	f7f3 fa84 	bl	800028c <__adddf3>
 800cd84:	2200      	movs	r2, #0
 800cd86:	2300      	movs	r3, #0
 800cd88:	f7f3 fec6 	bl	8000b18 <__aeabi_dcmpgt>
 800cd8c:	b138      	cbz	r0, 800cd9e <floor+0x46>
 800cd8e:	2c00      	cmp	r4, #0
 800cd90:	da53      	bge.n	800ce3a <floor+0xe2>
 800cd92:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800cd96:	4325      	orrs	r5, r4
 800cd98:	d052      	beq.n	800ce40 <floor+0xe8>
 800cd9a:	4c2d      	ldr	r4, [pc, #180]	; (800ce50 <floor+0xf8>)
 800cd9c:	2500      	movs	r5, #0
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4628      	mov	r0, r5
 800cda2:	e024      	b.n	800cdee <floor+0x96>
 800cda4:	4f2b      	ldr	r7, [pc, #172]	; (800ce54 <floor+0xfc>)
 800cda6:	4137      	asrs	r7, r6
 800cda8:	ea01 0307 	and.w	r3, r1, r7
 800cdac:	4303      	orrs	r3, r0
 800cdae:	d01e      	beq.n	800cdee <floor+0x96>
 800cdb0:	a325      	add	r3, pc, #148	; (adr r3, 800ce48 <floor+0xf0>)
 800cdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb6:	f7f3 fa69 	bl	800028c <__adddf3>
 800cdba:	2200      	movs	r2, #0
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f7f3 feab 	bl	8000b18 <__aeabi_dcmpgt>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	d0eb      	beq.n	800cd9e <floor+0x46>
 800cdc6:	2c00      	cmp	r4, #0
 800cdc8:	bfbe      	ittt	lt
 800cdca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cdce:	4133      	asrlt	r3, r6
 800cdd0:	18e4      	addlt	r4, r4, r3
 800cdd2:	ea24 0407 	bic.w	r4, r4, r7
 800cdd6:	2500      	movs	r5, #0
 800cdd8:	e7e1      	b.n	800cd9e <floor+0x46>
 800cdda:	2e33      	cmp	r6, #51	; 0x33
 800cddc:	dd0b      	ble.n	800cdf6 <floor+0x9e>
 800cdde:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cde2:	d104      	bne.n	800cdee <floor+0x96>
 800cde4:	ee10 2a10 	vmov	r2, s0
 800cde8:	460b      	mov	r3, r1
 800cdea:	f7f3 fa4f 	bl	800028c <__adddf3>
 800cdee:	ec41 0b10 	vmov	d0, r0, r1
 800cdf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800cdfa:	f04f 37ff 	mov.w	r7, #4294967295
 800cdfe:	40df      	lsrs	r7, r3
 800ce00:	4238      	tst	r0, r7
 800ce02:	d0f4      	beq.n	800cdee <floor+0x96>
 800ce04:	a310      	add	r3, pc, #64	; (adr r3, 800ce48 <floor+0xf0>)
 800ce06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce0a:	f7f3 fa3f 	bl	800028c <__adddf3>
 800ce0e:	2200      	movs	r2, #0
 800ce10:	2300      	movs	r3, #0
 800ce12:	f7f3 fe81 	bl	8000b18 <__aeabi_dcmpgt>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d0c1      	beq.n	800cd9e <floor+0x46>
 800ce1a:	2c00      	cmp	r4, #0
 800ce1c:	da0a      	bge.n	800ce34 <floor+0xdc>
 800ce1e:	2e14      	cmp	r6, #20
 800ce20:	d101      	bne.n	800ce26 <floor+0xce>
 800ce22:	3401      	adds	r4, #1
 800ce24:	e006      	b.n	800ce34 <floor+0xdc>
 800ce26:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	40b3      	lsls	r3, r6
 800ce2e:	441d      	add	r5, r3
 800ce30:	45a8      	cmp	r8, r5
 800ce32:	d8f6      	bhi.n	800ce22 <floor+0xca>
 800ce34:	ea25 0507 	bic.w	r5, r5, r7
 800ce38:	e7b1      	b.n	800cd9e <floor+0x46>
 800ce3a:	2500      	movs	r5, #0
 800ce3c:	462c      	mov	r4, r5
 800ce3e:	e7ae      	b.n	800cd9e <floor+0x46>
 800ce40:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ce44:	e7ab      	b.n	800cd9e <floor+0x46>
 800ce46:	bf00      	nop
 800ce48:	8800759c 	.word	0x8800759c
 800ce4c:	7e37e43c 	.word	0x7e37e43c
 800ce50:	bff00000 	.word	0xbff00000
 800ce54:	000fffff 	.word	0x000fffff

0800ce58 <_init>:
 800ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5a:	bf00      	nop
 800ce5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce5e:	bc08      	pop	{r3}
 800ce60:	469e      	mov	lr, r3
 800ce62:	4770      	bx	lr

0800ce64 <_fini>:
 800ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce66:	bf00      	nop
 800ce68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce6a:	bc08      	pop	{r3}
 800ce6c:	469e      	mov	lr, r3
 800ce6e:	4770      	bx	lr
